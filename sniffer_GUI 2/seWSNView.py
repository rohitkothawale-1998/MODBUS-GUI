#!/usr/bin/env python
# basic UI generated by wxGlade 0.3.1 on Fri Oct 03 23:23:45 2003
# Project Leader: Tim Ren
# Original Developer: Tim Ren
# Additional Development: Bret Orner, Sean Lantry
#

import wx
import wxSerialConfigDialog
import serial
import threading
import os
import sys
import argparse
from base import XBeeBase
from struct import *
from datetime import *
import json
import time
from threading import Timer
import subprocess
import shutil
#import wx.html2
#import redis

# Parse command line arguments
parser = argparse.ArgumentParser(description='SE Wireless Development Tool')
parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbose debug output')
args = parser.parse_args()

# Global debug flag
DEBUG = args.verbose

# Initialize log files
try:
    outfile = open('log.txt', 'w')
    temperaturefile = open('temperature.csv', 'w')
except Exception as e:
    print("Error opening log files: {}".format(e))
    outfile = None
    temperaturefile = None
#ndp_deviceType =''
ndp_deviceUptime = ''
ndp_deviceIEEEAddr = ''
ndp_packetLoss = ''
ndp_txCounter = ''
ndp_shortAddress = ''
ndp_workingMemory = ''
ndp_parentIEEEaddr = ''
#ndp_deviceRxLQI = ''
ndp_blversion = ''
ndp_hopcount = ''
ndp_txFailure = ''
ndp_rxLQI = ''
#redisDB = redis.StrictRedis(host='localhost', port=6379, db=0)

fileCounter = 0

deviceLinks = []  #{'ieee_address':0,'parent_ieee_address':0,'rssi':' '}]

joinList = [{'ieee_address':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
             'packageid':' ', 'deviceType':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
             'temp':' ', 'humid':' ',
             'port1type':' ', 'port2type':' ', 'port3type':' ',
             'port1val':' ', 'port2val':' ', 'port3val':' ',
             'port1err':' ', 'port2err':' ', 'port3err':' ',
             'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
             'control':' ', 'pkgtype':' ', 'filever':' ', 'bootldver':' ', 'parentmac':' ', 'hopcount':'ff', 'rxLQI':' ', 'txFailure':' ',
             'deviceUptime':'0', 'packetLoss':'0', 'txCounter':'0', 'shortAddress':'0000', 'workingMemory':'0'}]

networkJson = {'links':deviceLinks, 'nodes':joinList}

hostTransID = 0
commishList = []
commishRedraw = False
orphanList = []
rogueList = []
removeList = []
tmpcommishList = []
packageid_holder = ' '
ManID_holder = ' '
status_holder = ' '
openJoin = True
terminalBuffer = []
terminalPaused = False
choiceList = []
gmaxsize = 82
gtotalBlocks = 0

# ------------------------------------------
# start the redis service if it has been started
#res = os.system(r"net start redis")

#----------------------------------------------------------------------
# Create an own event type, so that GUI updates can be delegated
# this is required as on some platforms only the main thread can
# access the GUI without crashing. wxMutexGuiEnter/wxMutexGuiLeave
# could be used too, but an event is more elegant.
#class OTA:
imageInfo_format= '<10sHHI34sI8s'
def imageInfo(filename):
    """Read and unpack image information from a binary file."""
    with open(filename, 'rb') as input_file:
        record = input_file.read(calcsize(imageInfo_format))
        if not record:
            return None
        return unpack(imageInfo_format, record)

def peek(offset, maxblksize, filename):
    """Read a block of data from a binary file at the specified offset."""
    filesize = imageInfo(filename)[5]
    print("Look for offset at {} of {} with maxsize {}".format(offset, filesize, maxblksize))
    
    with open(filename, 'rb') as input_file:
        input_file.seek(offset)
        if (offset + maxblksize) < filesize:
            record = input_file.read(maxblksize)
        else:  # not enough in the file, read remaining bytes
            record = input_file.read(filesize - offset)
        return record

def inspect(s):
    """Display hex representation of bytes."""
    if isinstance(s, str):
        s = s.encode()
    hex_chars = [hex(b) for b in s]
    for i, h in enumerate(hex_chars):
        print("{{ {}, {} }}".format(i, h))

SERIALRX = wx.NewEventType()
# bind to serial data receive events
EVT_SERIALRX = wx.PyEventBinder(SERIALRX, 0)

#-------------------------------------------------------------

class SerialRxEvent(wx.PyCommandEvent):
    eventType = SERIALRX
    def __init__(self, windowID, data):
        wx.PyCommandEvent.__init__(self, self.eventType, windowID)
        self.data = data

    def Clone(self):
        return self.__class__(self.GetId(), self.data)

#----------------------------------------------------------------------

ID_FILE        = wx.NewId()
ID_CLEAR        = wx.NewId()
ID_SAVE        = wx.NewId()
ID_SAVEAS       = wx.NewId()
ID_SETTINGS     = wx.NewId()
ID_TERM         = wx.NewId()
ID_COM_LIST     = wx.NewId()
ID_EXIT         = wx.NewId()
ID_HELP         = wx.NewId()
ID_SEND_HOTSHOT	= wx.NewId()
ID_SEND_STATUSREQ = wx.NewId()
ID_SEND_SJOIN_ACCEPT = wx.NewId()
ID_SEND_REMOVE_NODE = wx.NewId()
ID_SEND_TIME_RESP = wx.NewId()
ID_SEND_QNP_RESP = wx.NewId()
ID_SEND_PE_RESP = wx.NewId()
ID_SEND_RMT_CMD = wx.NewId()
ID_SEND_COLDSHOT = wx.NewId()
ID_SEND_RDNTHOTSHOT = wx.NewId()
ID_SEND_RDNTCOLDSHOT = wx.NewId()
ID_SEND_PKGNOTIFY_USB = wx.NewId()
ID_SEND_PKGNOTIFY_MINI = wx.NewId()
ID_SEND_PKGNOTIFY_SP180 = wx.NewId()
TIMER_ID = wx.NewId()

NEWLINE_CR      = 0
NEWLINE_LF      = 1
NEWLINE_CRLF    = 2

class TerminalSetup:
    """Placeholder for various terminal settings. Used to pass the
       options to the TerminalSettingsDialog."""
    def __init__(self):
        self.echo = False
        self.unprintable = False
        self.newline = NEWLINE_CRLF

class TerminalSettingsDialog(wx.Dialog):
    """Simple dialog with common terminal settings like echo, newline mode."""

    def __init__(self, *args, **kwds):
        self.settings = kwds['settings']
        del kwds['settings']
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.checkbox_echo = wx.CheckBox(self, -1, "Local Echo")
        self.checkbox_unprintable = wx.CheckBox(self, -1, "Show unprintable characters")
        self.radio_box_newline = wx.RadioBox(self, -1, "Newline Handling", choices=["CR only", "LF only", "CR+LF"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.button_ok = wx.Button(self, -1, "OK")
        self.button_cancel = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()
        self.__attach_events()
        self.checkbox_echo.SetValue(self.settings.echo)
        self.checkbox_unprintable.SetValue(self.settings.unprintable)
        self.radio_box_newline.SetSelection(self.settings.newline)

    def __set_properties(self):
        self.SetTitle("Terminal Settings")
        self.radio_box_newline.SetSelection(0)
        self.button_ok.SetDefault()

    def __do_layout(self):
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Input/Output"), wx.VERTICAL)
        sizer_4.Add(self.checkbox_echo, 0, wx.ALL, 4)
        sizer_4.Add(self.checkbox_unprintable, 0, wx.ALL, 4)
        sizer_4.Add(self.radio_box_newline, 0, 0, 0)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_3.Add(self.button_ok, 0, 0, 0)
        sizer_3.Add(self.button_cancel, 0, 0, 0)
        sizer_2.Add(sizer_3, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()

    def __attach_events(self):
        self.Bind(wx.EVT_BUTTON, self.OnOK, id = self.button_ok.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnCancel, id = self.button_cancel.GetId())

    def OnOK(self, events):
        """Update data with new values and close dialog."""
        self.settings.echo = self.checkbox_echo.GetValue()
        self.settings.unprintable = self.checkbox_unprintable.GetValue()
        self.settings.newline = self.radio_box_newline.GetSelection()
        self.EndModal(wx.ID_OK)

    def OnCancel(self, events):
        """Do not update data but close dialog."""
        self.EndModal(wx.ID_CANCEL)

# end of class TerminalSettingsDialog

class CommissionListDialog(wx.Dialog):
    """Simple dialog to create a commission list from a checklist."""
    global frame_seWSNView
    global pageNetMon
    global joinList
    global commishList
    global openJoin
    def __init__(self, *args, **kwds):
        self.settings = kwds['settings']
        del kwds['settings']
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        choiceList = []

        for item in joinList:
            choiceList.append(item['ieee_address'])
        self.commishListCB = wx.CheckListBox(self, -1, choices=choiceList)

        self.filenameEntry = wx.TextCtrl(self, -1, "list.txt")
        self.button_browse = wx.Button(self, -1, "Save")
        self.button_ok = wx.Button(self, -1, "OK")
        self.button_cancel = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()
        self.__attach_events()

    def __set_properties(self):
        self.SetTitle("Commission List Add/Edit")
        self.button_ok.SetDefault()

    def __do_layout(self):
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Available Devices"), wx.VERTICAL)
        sizer_4.Add(self.commishListCB, 1, wx.GROW|wx.EXPAND|wx.ALL, 4)
        #sizer_4.Add(self.checkbox_unprintable, 0, wx.ALL, 4)
        #sizer_4.Add(self.radio_box_newline, 0, 0, 0)
        sizer_2.Add(sizer_4, 1, wx.GROW|wx.EXPAND, 0)
        sizer_3.Add(self.button_ok, 0, 0, 0)
        sizer_3.Add(self.button_cancel, 0, 0, 0)
        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Commission List Filename"), wx.HORIZONTAL)
        sizer_5.Add(self.filenameEntry, 1, wx.EXPAND|wx.ALL, 4)
        sizer_5.Add(self.button_browse, 0, wx.ALL, 4)
        sizer_2.Add(sizer_5, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        sizer_2.Add(sizer_3, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()

    def __attach_events(self):
        self.Bind(wx.EVT_BUTTON, self.OnOK, id = self.button_ok.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnCancel, id = self.button_cancel.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnSave, id = self.button_browse.GetId())

    def OnSave(self, events):
        """Update data with new values and close dialog."""
        global commishList
        commishFilename = self.filenameEntry.GetLineText(0)
        filename = None
        commishFileDialog = wx.FileDialog(self, "Save Commission List", ".", commishFilename, "Text files (*.txt)|*.txt", wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
        if commishFileDialog.ShowModal() == wx.ID_CANCEL:
            return
        else:
            filename = commishFileDialog.GetPath()
        commishFileDialog.Destroy()
        if filename is not None:
            with open(filename, 'w') as f:
                commishList[:] = []
                selected = self.commishListCB.GetCheckedStrings()
                for s in selected:
                    f.write(s+"\n")
                    commishList.append(s)

    def OnOK(self, events):
        """Update data with new values and close dialog."""
        global pageNetMon
        global commishList
        global openJoin
        pageNetMon.tc_commish_list.Clear()
        pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
        for eachComm in commishList:
            if eachComm != '':
                pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
        openJoin = False
        pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
        self.EndModal(wx.ID_OK)

    def OnCancel(self, events):
        """Do not update data but close dialog."""
        self.EndModal(wx.ID_CANCEL)

    def ResetCoord(self):
        """Clear display data."""
        global joinList
        global pageNetMon
        global frame_seWSNView
        for item in joinList:
            item.Clear()
        joinList[0] = {'ieee_address':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
             'packageid':' ', 'deviceType':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
             'temp':' ', 'humid':' ',
             'port1type':' ', 'port2type':' ', 'port3type':' ',
             'port1val':' ', 'port2val':' ', 'port3val':' ',
             'port1err':' ', 'port2err':' ', 'port3err':' ',
             'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
             'control':' ', 'pkgtype':' ', 'filever':' ', 'bootldver':' ', 'parentmac':' ', 'hopcount':'ff', 'rxLQI':' ', 'txFailure':' ',
             'deviceUptime':'0', 'packetLoss':'0', 'txCounter':'0', 'shortAddress':'0000', 'workingMemory':'0'}

        pageNetMon.tree_ctrl.DeleteAllItems()
        pageNetMon.parentmactxc.Clear()
        pageNetMon.blversiontxc.Clear()
        pageNetMon.packageidtxc.Clear()
        pageNetMon.macaddrtxc.Clear()
        pageNetMon.skunumtxc.Clear()
        pageNetMon.sernumtxc.Clear()
        pageNetMon.mfgdatetxc.Clear()
        pageNetMon.hwvertxc.Clear()
        pageNetMon.batterytxc.Clear()
        pageNetMon.utctmtxc.Clear()
        pageNetMon.manidtxc.Clear()
        pageNetMon.statustxc.Clear()
        pageNetMon.devicetypetxc.Clear()
        pageNetMon.channeltxc.Clear()
        pageNetMon.hopcounttxc.Clear()
        pageNetMon.fwvertxc.Clear()
        pageNetMon.sdpvertxc.Clear()
        pageNetMon.transidtxc.Clear()
        pageNetMon.rssitxc.Clear()
        pageNetMon.temperaturetxc.Clear()
        pageNetMon.humiditytxc.Clear()
        pageNetMon.port1labeltxc.Clear()
        pageNetMon.port1typetxc.Clear()
        pageNetMon.port1valtxc.Clear()
        pageNetMon.port2labeltxc.Clear()
        pageNetMon.port2typetxc.Clear()
        pageNetMon.port2valtxc.Clear()
        pageNetMon.port3labeltxc.Clear()
        pageNetMon.port3typetxc.Clear()
        pageNetMon.port3valtxc.Clear()
        pageNetMon.spivertxc.Clear()
        pageNetMon.flagdatatxc.Clear()
        pageNetMon.controltxc.Clear()
        pageNetMon.pkgtypetxc.Clear()
        pageNetMon.filevertxc.Clear()
        frame_seWSNView.OnSendStatusReq(None)
# end of class CommissionListDialog
class RemoveListDialog(wx.Dialog):
    """Simple dialog to create a remove node list from a checklist."""
    global frame_seWSNView
    global joinList
    global removeList
    global choiceList
    def __init__(self, *args, **kwds):
        self.settings = kwds['settings']
        del kwds['settings']
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        global choiceList
        choiceList[:] = []
        for item in joinList:
            choiceList.append(item['ieee_address'])
        self.removeListCB = wx.CheckListBox(self, -1, choices=choiceList)

        self.button_all = wx.Button(self, -1, "All")
        self.button_ok = wx.Button(self, -1, "Remove")
        self.button_cancel = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()
        self.__attach_events()

    def __set_properties(self):
        self.SetTitle("Remove Node List Create")
        self.button_ok.SetDefault()

    def __do_layout(self):
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Available Devices"), wx.VERTICAL)
        sizer_4.Add(self.removeListCB, 1, wx.GROW|wx.EXPAND|wx.ALL, 4)
        sizer_2.Add(sizer_4, 1, wx.GROW|wx.EXPAND, 0)
        sizer_3.Add(self.button_all, 0, 0, 0)
        sizer_3.Add(self.button_ok, 0, 0, 0)
        sizer_3.Add(self.button_cancel, 0, 0, 0)

        sizer_2.Add(sizer_3, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()

    def __attach_events(self):
        self.Bind(wx.EVT_BUTTON, self.OnOK, id = self.button_ok.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnCancel, id = self.button_cancel.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnAll, id = self.button_all.GetId())

    def OnOK(self, events):
        """Update data with new values and close dialog."""
        global removeList

        removeList[:] = []
        selected = self.removeListCB.GetCheckedStrings()
        for s in selected:
            removeList.append(s)
        if len(removeList) != 0:
            mac = removeList.pop()
            if mac != None:
                frame_seWSNView.OnSendRemovePerMac(mac)
        self.EndModal(wx.ID_OK)

    def OnAll(self, events):
        """Select all items in the checkbox list."""
        global choiceList

        self.removeListCB.SetCheckedStrings(choiceList)


    def OnCancel(self, events):
        """Do not update data but close dialog."""
        self.EndModal(wx.ID_CANCEL)
# end of class CommissionListDialog

openedFile = False
savedFile = False

class ConfigFileDialog(wx.Dialog):
    """Simple dialog to create and edit the commission list."""
    global frame_seWSNView
    global pageNetMon
    global joinList
    global commishList
    global openJoin
    global tmpcommishList
    global openedFile
    global savedFile
    def __init__(self, *args, **kwds):
        self.settings = kwds['settings']
        del kwds['settings']
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        cfd_tc_style = (wx.TE_MULTILINE | wx.TE_RICH) #| wx.TE_READONLY)
        self.configfileviewtxc = wx.TextCtrl(self, -1, "", style=cfd_tc_style, size=(-1,200))

        self.filenameEntry = wx.TextCtrl(self, -1, "list.txt")
        self.button_open = wx.Button(self, -1, "Open")
        self.button_save = wx.Button(self, -1, "Save")
        self.button_ok = wx.Button(self, -1, "OK")
        self.button_cancel = wx.Button(self, -1, "Cancel")
        self.checkbox_ojoin = wx.CheckBox(self, -1, "Open Join")
        self.checkbox_sendmodify = wx.CheckBox(self, -1, "Send Modify")

        self.__set_properties()
        self.__do_layout()
        self.__attach_events()

    def __set_properties(self):
        self.SetTitle("Commission List File Select")
        self.button_ok.SetDefault()

    def __do_layout(self):
        global commishList
        global openJoin
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Commission List File View/Edit"), wx.VERTICAL)
        sizer_4.Add(self.configfileviewtxc, 1, wx.GROW|wx.EXPAND|wx.ALL, 4)
        sizer_2.Add(sizer_4, 1, wx.GROW|wx.EXPAND, 0)
        sizer_3.Add(self.checkbox_ojoin, 0, wx.ALIGN_LEFT, 0)
        sizer_3.Add(self.checkbox_sendmodify, 0, wx.ALIGN_LEFT, 0)

        sizer_3.Add(self.button_ok, 0, 0, 0)
        sizer_3.Add(self.button_cancel, 0, 0, 0)
        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Commission List File Open/Save"), wx.HORIZONTAL)
        sizer_5.Add(self.filenameEntry, 1, wx.EXPAND|wx.ALL, 4)
        sizer_5.Add(self.button_open, 0, wx.ALL, 4)
        sizer_5.Add(self.button_save, 0, wx.ALL, 4)
        sizer_2.Add(sizer_5, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        sizer_2.Add(sizer_3, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()

        if not openJoin:
            for eachComm in commishList:
                if eachComm != '':
                    self.configfileviewtxc.AppendText(eachComm + "\r\n")

    def __attach_events(self):
        self.Bind(wx.EVT_BUTTON, self.OnOK, id = self.button_ok.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnSave, id = self.button_save.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnCancel, id = self.button_cancel.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnOpen, id = self.button_open.GetId())

    def OnOpen(self, events):
        """Update data with new values and close dialog."""
        global tmpcommishList
        global openedFile
        configFilename = self.filenameEntry.GetLineText(0)
        filename = None
        configFileDialog = wx.FileDialog(self, "Open Commission List", ".", configFilename, "Text files (*.txt)|*.txt", wx.FD_OPEN)
        if configFileDialog.ShowModal() == wx.ID_CANCEL:
            return
        else:
            filename = configFileDialog.GetPath()
        configFileDialog.Destroy()
        if filename is not None:
            openedFile = True
            f = open(filename, 'r')
            tmpcommishList[:] = []
            tmpcommishList = f.read().splitlines()
            self.configfileviewtxc.Clear()
            for eachComm in tmpcommishList:
                if eachComm != '':
                    self.configfileviewtxc.AppendText(eachComm + "\r\n")
            f.close()

    def OnSave(self, events):
        """Update data with new values and close dialog."""
        global tmpcommishList
        global savedFile
        commishFilename = self.filenameEntry.GetLineText(0)
        filename = None
        commishFileDialog = wx.FileDialog(self, "Save Commission List", ".", commishFilename, "Text files (*.txt)|*.txt", wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
        if commishFileDialog.ShowModal() == wx.ID_CANCEL:
            return
        else:
            filename = commishFileDialog.GetPath()
        commishFileDialog.Destroy()
        if filename is not None:
            with open(filename, 'w') as f:
                tmpcommishList[:] = []
                selected = []
                numItems = self.configfileviewtxc.GetNumberOfLines()
                for item in range(numItems):
                   if item != '':
                      selected.append(self.configfileviewtxc.GetLineText(item))
                      tmpcommishList.append(self.configfileviewtxc.GetLineText(item))
                for s in selected:
                    f.write(s+"\n")
                savedFile = True

    def OnOK(self, events):
        """Update data with new values and close dialog."""
        global frame_seWSNView
        global pageNetMon
        global commishList
        global openJoin
        global tmpcommishList
        global openedFile
        global savedFile
        if openedFile or savedFile:
            commishList[:] = []
            for eachComm in tmpcommishList:
                if eachComm != '':
                    commishList.append(eachComm)
        if self.checkbox_ojoin.GetValue():
            openJoin = True
            pageNetMon.tc_commish_list.Clear()
            pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
            for eachComm in commishList:
                if eachComm != '':
                    pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
        else:
            openJoin = False
            pageNetMon.tc_commish_list.Clear()
            pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
            for eachComm in commishList:
                if eachComm != '':
                    pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
            pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
        if self.checkbox_sendmodify.GetValue():
            frame_seWSNView.OnSendListModify(events)
            self.ResetCoord()
        self.EndModal(wx.ID_OK)

    def OnCancel(self, events):
        """Do not update data but close dialog."""
        self.EndModal(wx.ID_CANCEL)

    def ResetCoord(self):
        """Clear display data."""
        global pageNetMon
        global joinList
        global frame_seWSNView
        for item in joinList:
            item.Clear()
        joinList[0] = {'ieee_address':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
             'packageid':' ', 'deviceType':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
             'temp':' ', 'humid':' ',
             'port1type':' ', 'port2type':' ', 'port3type':' ',
             'port1val':' ', 'port2val':' ', 'port3val':' ',
             'port1err':' ', 'port2err':' ', 'port3err':' ',
             'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
             'control':' ', 'pkgtype':' ', 'filever':' ', 'bootldver':' ', 'parentmac':' ', 'hopcount':'ff', 'rxLQI':' ', 'txFailure':' ',
             'deviceUptime':'0', 'packetLoss':'0', 'txCounter':'0', 'shortAddress':'0000', 'workingMemory':'0'}

        pageNetMon.tree_ctrl.DeleteAllItems()
        pageNetMon.parentmactxc.Clear()
        pageNetMon.blversiontxc.Clear()
        pageNetMon.packageidtxc.Clear()
        pageNetMon.macaddrtxc.Clear()
        pageNetMon.skunumtxc.Clear()
        pageNetMon.sernumtxc.Clear()
        pageNetMon.mfgdatetxc.Clear()
        pageNetMon.hwvertxc.Clear()
        pageNetMon.batterytxc.Clear()
        pageNetMon.utctmtxc.Clear()
        pageNetMon.manidtxc.Clear()
        pageNetMon.statustxc.Clear()
        pageNetMon.devicetypetxc.Clear()
        pageNetMon.channeltxc.Clear()
        pageNetMon.hopcounttxc.Clear()
        pageNetMon.fwvertxc.Clear()
        pageNetMon.sdpvertxc.Clear()
        pageNetMon.transidtxc.Clear()
        pageNetMon.rssitxc.Clear()
        pageNetMon.temperaturetxc.Clear()
        pageNetMon.humiditytxc.Clear()
        pageNetMon.port1labeltxc.Clear()
        pageNetMon.port1typetxc.Clear()
        pageNetMon.port1valtxc.Clear()
        pageNetMon.port2labeltxc.Clear()
        pageNetMon.port2typetxc.Clear()
        pageNetMon.port2valtxc.Clear()
        pageNetMon.port3labeltxc.Clear()
        pageNetMon.port3typetxc.Clear()
        pageNetMon.port3valtxc.Clear()
        pageNetMon.spivertxc.Clear()
        pageNetMon.flagdatatxc.Clear()
        pageNetMon.controltxc.Clear()
        pageNetMon.pkgtypetxc.Clear()
        pageNetMon.filevertxc.Clear()
        frame_seWSNView.OnSendStatusReq(None)
# end of class ConfigFileDialog

class FeatureNotImplementedDialog(wx.Dialog):
    """Simple dialog to create and edit the commission list."""
    def __init__(self, *args, **kwds):
        self.settings = kwds['settings']
        del kwds['settings']
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.staticlabel = wx.StaticText(self, -1, "Feature Not Implemented.")
        self.button_ok = wx.Button(self, -1, "OK")

        self.__set_properties()
        self.__do_layout()
        self.__attach_events()

    def __set_properties(self):
        self.SetTitle("Feature Not Implemented")
        self.button_ok.SetDefault()

    def __do_layout(self):
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_3.Add(self.button_ok, 0, 0, 0)
        sizer_2.Add(self.staticlabel, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        sizer_2.Add(sizer_3, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()

    def __attach_events(self):
        self.Bind(wx.EVT_BUTTON, self.OnOK, id = self.button_ok.GetId())

    def OnOK(self, events):
        """Update data with new values and close dialog."""
        self.EndModal(wx.ID_OK)
# end of class FeatureNotImplementedDialog

class seWSNStatusbar(wx.Frame):
    def __init__(self, parent):
        statusbar = parent.CreateStatusBar()
        statusbar.SetStatusText("Not Connected")

class seWSNMenubar(wx.Frame):
    def __init__(self, parent):
        parent.seWSNView_menubar = wx.MenuBar()
        parent.SetMenuBar(parent.seWSNView_menubar)
        file_menu = wx.Menu()
        file_menu.Append(ID_FILE, "&File", "", wx.ITEM_NORMAL)
        file_menu.Append(ID_SAVE, "&Save", "", wx.ITEM_NORMAL)
        file_menu.Append(ID_SAVEAS, "S&ave As...", "", wx.ITEM_NORMAL)
        file_menu.AppendSeparator()
        file_menu.Append(ID_CLEAR, "C&lear", "", wx.ITEM_NORMAL)
        file_menu.AppendSeparator()
        file_menu.Append(ID_EXIT, "&Exit", "", wx.ITEM_NORMAL)
        parent.seWSNView_menubar.Append(file_menu, "&File")

        config_menu = wx.Menu()
        config_menu.Append(ID_SETTINGS, "&Port Settings...", "", wx.ITEM_NORMAL)
        config_menu.Append(ID_TERM, "&Terminal Settings...", "", wx.ITEM_NORMAL)
        config_menu.Append(ID_COM_LIST, "Commission &List Settings...", "", wx.ITEM_NORMAL)
        parent.seWSNView_menubar.Append(config_menu, "&Config")

        #Tim's new send packet item
        send_menu = wx.Menu()
        send_menu.Append(ID_SEND_HOTSHOT, "Get Serial Numbers", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_STATUSREQ, "Get Version Info", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_SJOIN_ACCEPT, "Get Production Date", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_REMOVE_NODE, "Get All Manufacturing Data", "", wx.ITEM_NORMAL)
        send_menu.AppendSeparator()
        send_menu.Append(ID_SEND_TIME_RESP, "Get Energy Totals", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_QNP_RESP, "Get Operation Stats", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_PE_RESP, "Get All Lifetime Data", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_RMT_CMD, "Send Remote C&ommand", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_COLDSHOT, "Send &ColdShot", "", wx.ITEM_NORMAL)
        #send_menu.Append(ID_SEND_RDNTHOTSHOT, "&Send RDNT HotShot", "", wx.ITEM_NORMAL)
        #send_menu.Append(ID_SEND_RDNTCOLDSHOT, "&Send RDNT ColdShot", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_PKGNOTIFY_USB, "&Send 1104 PKGNOTIFY", "", wx.ITEM_NORMAL)
        send_menu.AppendSeparator()
        send_menu.Append(ID_SEND_PKGNOTIFY_MINI, "&Send 1102 PKGNOTIFY", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_PKGNOTIFY_SP180, "&Send 1101 PKGNOTIFY", "", wx.ITEM_NORMAL)
        parent.seWSNView_menubar.Append(send_menu, "&Send")

        help_menu = wx.Menu()
        help_menu.Append(ID_HELP, "&Help", "", wx.ITEM_NORMAL)
        parent.seWSNView_menubar.Append(help_menu, "&Help")

class seWSNToolbar(wx.Frame):
    def __init__(self, parent):
        toolbar2 = parent.CreateToolBar(style=wx.TB_HORZ_TEXT)
        tool1 = toolbar2.AddSimpleTool(-1, wx.Bitmap('filenew.png'), "New", "Open Commission List File")
        parent.Bind(wx.EVT_MENU, parent.OnConfigFileSelect, tool1)
        tool2 = toolbar2.AddSimpleTool(-1, wx.Bitmap('filesave.png'), "Save", "Save Terminal Display to file")
        parent.Bind(wx.EVT_MENU, parent.OnSaveAs, tool2)
        tool6 = toolbar2.AddSimpleTool(-1, wx.Bitmap('filesaveall.png'), "Save All", "Save Terminal Display to file")
        parent.Bind(wx.EVT_MENU, parent.OnSaveAs, tool6)
        tool7 = toolbar2.AddSimpleTool(-1, wx.Bitmap('filesaveas.png'), "Save As", "Save Terminal Display to file")
        parent.Bind(wx.EVT_MENU, parent.OnSaveAs, tool7)
        tool13 = toolbar2.AddSimpleTool(-1, wx.Bitmap('view_sidetree.png'), "Commission List", "Create commission list from checklist")
        parent.Bind(wx.EVT_MENU, parent.OnCommissionList, tool13)
        tool16 = toolbar2.AddSimpleTool(-1, wx.Bitmap('editcut.png'), "Remove List", "Create remove list from checklist")
        parent.Bind(wx.EVT_MENU, parent.OnRemoveList, tool16)
        toolbar2.AddSeparator()
        tool8 = toolbar2.AddSimpleTool(-1, wx.Bitmap('history_clear.png'), "Clear", "Clears Terminal View")
        parent.Bind(wx.EVT_MENU, parent.OnClear, tool8)
        tool10 = toolbar2.AddSimpleTool(-1, wx.Bitmap('edit_16x16.png'), "Edit", "Open Commission List File for Editing")
        parent.Bind(wx.EVT_MENU, parent.OnConfigFileSelect, tool10)
        tool12 = toolbar2.AddSimpleTool(-1, wx.Bitmap('undo.png'), "Hot Shot", "Make connected device a Coordinator")
        parent.Bind(wx.EVT_MENU, parent.OnSendHotShot, tool12)
        toolbar2.AddSeparator()
        tool11 = toolbar2.AddSimpleTool(-1, wx.Bitmap('dbgpause.png'), "Pause", "Pause the Terminal display")
        parent.Bind(wx.EVT_MENU, parent.OnPause, tool11)
        tool3 = toolbar2.AddSimpleTool(-1, wx.Bitmap('dbgrun.png'), "Restart", "Restart the Terminal display")
        parent.Bind(wx.EVT_MENU, parent.OnPlay, tool3)
        tool15 = toolbar2.AddSimpleTool(-1, wx.Bitmap('view_tree.png'), "Topology", "Start Topology Map Viewer")
        parent.Bind(wx.EVT_MENU, parent.OnStartTopoView, tool15)
        tool4 = toolbar2.AddSimpleTool(-1, wx.Bitmap('exit.png'), "Exit", "Exit the Application")
        parent.Bind(wx.EVT_MENU, parent.OnExit, tool4)
        toolbar2.AddSeparator()
        tool5 = toolbar2.AddSimpleTool(-1, wx.Bitmap('fileopen.png'), "Open", "Open OTA .zigbee File")
        parent.Bind(wx.EVT_MENU, self.OnOpenOTAFile, tool5)
        self.OTAfile1txc = wx.TextCtrl(toolbar2, wx.ID_ANY, size=(400,-1))
        tool17 = toolbar2.AddControl(self.OTAfile1txc, label="")
        tool9 = toolbar2.AddSimpleTool(-1, wx.Bitmap('run.png'), "OTA", "Push File to ZC")
        parent.Bind(wx.EVT_MENU, parent.OnSendPKGNotify_USB, tool9)
        self.OTAswitchchoice = wx.Choice(toolbar2, wx.ID_ANY, choices=['Never', 'Now'])
        tool18 = toolbar2.AddControl(self.OTAswitchchoice, label="")
        self.OTAswitchchoice.SetSelection(0)
        toolbar2.AddSeparator()
        self.OTAprog1txc = wx.TextCtrl(toolbar2, wx.ID_ANY, size=(75,-1))
        tool14 = toolbar2.AddControl(self.OTAprog1txc, label="")
        toolbar2.AddSeparator()
        toolbar2.Realize()

    def OnOpenOTAFile(self, event=None):
        global gmaxsize
        global gtotalBlocks
        """Update data with new values and close dialog."""
        OTAfilename = None
        OTAFileDialog = wx.FileDialog(None, "Select OTA File", ".", "", "zigbee files (*.zigbee)|*.zigbee", wx.FD_OPEN)
        if OTAFileDialog.ShowModal() == wx.ID_CANCEL:
            return
        else:
            OTAfilename = OTAFileDialog.GetPath()
        OTAFileDialog.Destroy()
        if OTAfilename != None and OTAfilename != '':
            self.OTAfile1txc.Clear()
            self.OTAfile1txc.AppendText(OTAfilename)
            result_list = imageInfo(OTAfilename)
            gtotalBlocks = int(result_list[5])//gmaxsize #file size 
            if int(result_list[5])%gmaxsize != 0:
                gtotalBlocks += 1
            self.OTAprog1txc.Clear()
            self.OTAprog1txc.AppendText(str(gtotalBlocks))

            #return OTAfilename
        else:
            self.OTAfile1txc.Clear()
            self.OTAfile1txc.AppendText("No File Selected")
            #return

class PageNetworkMonitor(wx.Panel):
    def __init__(self, parent):
        tc_style = (wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH) # | wx.TE_DONTWRAP | wx.ST_NO_AUTORESIZE)
        sp_style = (wx.SP_3D|wx.SP_NO_XP_THEME)  #|wx.SP_LIVE_UPDATE
        tc_stat_style = (wx.TE_READONLY)

        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)

        nmSplitter = wx.SplitterWindow(self, id=wx.ID_ANY, style=sp_style)
        nmSplitter.SetMinimumPaneSize(250)

        # Network monitor tree view
        tree_pane = wx.Panel(nmSplitter, id=wx.ID_ANY)

        self.tree_ctrl = wx.TreeCtrl(tree_pane, wx.ID_ANY)

        p1sizer = wx.BoxSizer(wx.VERTICAL)
        p1sizer.Add(self.tree_ctrl, 1, wx.GROW, 0)
        tree_pane.SetSizerAndFit(p1sizer)

        # Network monitor status panel
        nmstat_pane = wx.Panel(nmSplitter, -1)

        statdevicesizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Device Data"), wx.VERTICAL)
        statnetworksizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Run-time Data"), wx.VERTICAL)
        statsensorsizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Summary Data"), wx.VERTICAL)

        statroguesizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Orphan List (Join Rejected)"), wx.VERTICAL)
        statcommsizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Commission List"), wx.VERTICAL)
        statorphsizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Rogue List (SDP ignored)"), wx.VERTICAL)

        self.tc_commish_list = wx.TextCtrl(nmstat_pane, wx.ID_ANY, "", style=tc_style)
        self.tc_rogue_list = wx.TextCtrl(nmstat_pane, wx.ID_ANY, "", style=tc_style)
        self.tc_orphan_list = wx.TextCtrl(nmstat_pane, wx.ID_ANY, "", style=tc_style)

        #Device Data Controls
        sernumsizer = wx.BoxSizer(wx.HORIZONTAL)
        sernumlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Serial #")
        sernumsizer.Add(sernumlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.sernumtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        sernumsizer.Add(self.sernumtxc, 1, 0, 0)
        invertsnsizer = wx.BoxSizer(wx.HORIZONTAL)
        invertsnlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Inverter SN")
        invertsnsizer.Add(invertsnlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.invertsntxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style) #, "", style=tc_stat_style)
        invertsnsizer.Add(self.invertsntxc, 1, 0, 0)
        proddatesizer = wx.BoxSizer(wx.HORIZONTAL)
        proddatelabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Production Date")
        proddatesizer.Add(proddatelabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.proddatetxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        proddatesizer.Add(self.proddatetxc, 1, 0, 0)
        fwversionsizer = wx.BoxSizer(wx.HORIZONTAL)
        fwversionlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Firmware Version")
        fwversionsizer.Add(fwversionlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.fwversiontxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        fwversionsizer.Add(self.fwversiontxc, 1, 0, 0)
        hwversizer = wx.BoxSizer(wx.HORIZONTAL)
        hwverlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "HW Version")
        hwversizer.Add(hwverlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.hwvertxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        hwversizer.Add(self.hwvertxc, 1, 0, 0)
        modnumsizer = wx.BoxSizer(wx.HORIZONTAL)
        modnumlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Model Number")
        modnumsizer.Add(modnumlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.modnumtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        modnumsizer.Add(self.modnumtxc, 1, 0, 0)
        manufacturesizer = wx.BoxSizer(wx.HORIZONTAL)
        manufacturelabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Manufacturer")
        manufacturesizer.Add(manufacturelabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.manufacturetxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        manufacturesizer.Add(self.manufacturetxc, 1, 0, 0)
        removesizer = wx.BoxSizer(wx.HORIZONTAL)
        self.removebutton = wx.Button(nmstat_pane, wx.ID_ANY, "Remove")
        self.statustxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        removesizer.Add(self.removebutton, 0, 0, 0)
        removesizer.Add(self.statustxc, 1, 0, 0)
        removemacsizer = wx.BoxSizer(wx.HORIZONTAL)
        self.notfoundcheckbox = wx.CheckBox(nmstat_pane, wx.ID_ANY, "Not Found Test")
        self.removemactxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=(wx.TE_RICH))
        removemacsizer.Add(self.notfoundcheckbox, 0, wx.ALL|wx.ALIGN_LEFT, 4)
        removemacsizer.Add(self.removemactxc, 1, 0, 0)
        sdptimersizer = wx.BoxSizer(wx.HORIZONTAL)
        self.sdptimergauge = wx.Gauge(nmstat_pane, wx.ID_ANY, range=185)
        self.sdptimertxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        sdptimersizer.Add(self.sdptimergauge, 0, wx.ALL|wx.ALIGN_LEFT, 8)
        sdptimersizer.Add(self.sdptimertxc, 1, wx.ALL|wx.ALIGN_LEFT, 4)
        
        statdevicesizer.Add(sernumsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(invertsnsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(proddatesizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(fwversionsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(hwversizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(modnumsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(manufacturesizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(removesizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(removemacsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(sdptimersizer, 0, wx.RIGHT|wx.EXPAND, 0)

        #Network Data Controls
        acinvoltsizer = wx.BoxSizer(wx.HORIZONTAL)
        acinvoltlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "AC Input Voltage")
        acinvoltsizer.Add(acinvoltlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.acinvolttxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        acinvoltsizer.Add(self.acinvolttxc, 1, 0, 0)
        acincurrsizer = wx.BoxSizer(wx.HORIZONTAL)
        acincurrlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "AC Input Current")
        acincurrsizer.Add(acincurrlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.acincurrtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        acincurrsizer.Add(self.acincurrtxc, 1, 0, 0)
        acinpowsizer = wx.BoxSizer(wx.HORIZONTAL)
        acinpowlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "AC Input Power")
        acinpowsizer.Add(acinpowlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.acinpowtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        acinpowsizer.Add(self.acinpowtxc, 1, 0, 0)
        pvinvoltsizer = wx.BoxSizer(wx.HORIZONTAL)
        pvinvoltlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "PV Input Voltage")
        pvinvoltsizer.Add(pvinvoltlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.pvinvolttxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        pvinvoltsizer.Add(self.pvinvolttxc, 1, 0, 0)
        pvincurrsizer = wx.BoxSizer(wx.HORIZONTAL)
        pvincurrlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "PV Input Current")
        pvincurrsizer.Add(pvincurrlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.pvincurrtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        pvincurrsizer.Add(self.pvincurrtxc, 1, 0, 0)
        pvinpowsizer = wx.BoxSizer(wx.HORIZONTAL)
        pvinpowlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "PV Input Power")
        pvinpowsizer.Add(pvinpowlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.pvinpowtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        pvinpowsizer.Add(self.pvinpowtxc, 1, 0, 0)
        batteryvoltsizer = wx.BoxSizer(wx.HORIZONTAL)
        batteryvoltlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Battery Voltage")
        batteryvoltsizer.Add(batteryvoltlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.batteryvolttxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        batteryvoltsizer.Add(self.batteryvolttxc, 1, 0, 0)
        batterysocsizer = wx.BoxSizer(wx.HORIZONTAL)
        batterysoclabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Battery SOC")
        batterysocsizer.Add(batterysoclabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.batterysoctxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        batterysocsizer.Add(self.batterysoctxc, 1, 0, 0)
        outfreqsizer = wx.BoxSizer(wx.HORIZONTAL)
        outfreqlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Output Frequency")
        outfreqsizer.Add(outfreqlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.outfreqtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        outfreqsizer.Add(self.outfreqtxc, 1, 0, 0)
        tempsizer = wx.BoxSizer(wx.HORIZONTAL)
        templabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Device Temperature")
        tempsizer.Add(templabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.temptxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        tempsizer.Add(self.temptxc, 1, 0, 0)
        utctmsizer = wx.BoxSizer(wx.HORIZONTAL)
        utctmlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "UTC Time  ")
        utctmsizer.Add(utctmlabel, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.utctmtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        utctmsizer.Add(self.utctmtxc, 1, 0, 0)

        statnetworksizer.Add(acinvoltsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(acincurrsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(acinpowsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(pvinvoltsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(pvincurrsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(pvinpowsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(batteryvoltsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(batterysocsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(outfreqsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(tempsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(utctmsizer, 0, wx.RIGHT|wx.EXPAND, 0)
       

        #Sensor Data Controls
        totalacinsizer = wx.BoxSizer(wx.HORIZONTAL)
        totalacinlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Total AC Input")
        totalacinsizer.Add(totalacinlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.totalacintxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        totalacinsizer.Add(self.totalacintxc, 1, 0, 0)
        totalpvinsizer = wx.BoxSizer(wx.HORIZONTAL)
        totalpvinlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Total PV Input")
        totalpvinsizer.Add(totalpvinlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.totalpvintxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        totalpvinsizer.Add(self.totalpvintxc, 1, 0, 0)
        totalacoutsizer = wx.BoxSizer(wx.HORIZONTAL)
        totalacoutlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Total AC Output")
        totalacoutsizer.Add(totalacoutlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.totalacouttxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        totalacoutsizer.Add(self.totalacouttxc, 1, 0, 0)
        batchgtotalsizer = wx.BoxSizer(wx.HORIZONTAL)
        batchgtotallabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Battery Charge Total")
        batchgtotalsizer.Add(batchgtotallabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.batchgtotaltxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        batchgtotalsizer.Add(self.batchgtotaltxc, 1, 0, 0)
        batdischgtotalsizer = wx.BoxSizer(wx.HORIZONTAL)
        batdischgtotallabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Battery Discharge Total")
        batdischgtotalsizer.Add(batdischgtotallabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.batdischgtotaltxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        batdischgtotalsizer.Add(self.batdischgtotaltxc, 1, 0, 0)
        usedenergytotalsizer = wx.BoxSizer(wx.HORIZONTAL)
        usedenergytotallabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Used Energy Total")
        usedenergytotalsizer.Add(usedenergytotallabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.usedenergytotaltxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        usedenergytotalsizer.Add(self.usedenergytotaltxc, 1, 0, 0)
        hourssizer = wx.BoxSizer(wx.HORIZONTAL)
        hourslabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Operation Hours")
        hourssizer.Add(hourslabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.hourstxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        hourssizer.Add(self.hourstxc, 1, 0, 0)
        cyclessizer = wx.BoxSizer(wx.HORIZONTAL)
        cycleslabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Charge Cycles")
        cyclessizer.Add(cycleslabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.cyclestxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        cyclessizer.Add(self.cyclestxc, 1, 0, 0)
        maxdailysizer = wx.BoxSizer(wx.HORIZONTAL)
        maxdailylabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Max Daily Production")
        maxdailysizer.Add(maxdailylabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.maxdailytxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        maxdailysizer.Add(self.maxdailytxc, 1, 0, 0)
    
        statsensorsizer.Add(totalacinsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(totalpvinsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(totalacoutsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(batchgtotalsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(batdischgtotalsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(usedenergytotalsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(hourssizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(cyclessizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(maxdailysizer, 0, wx.RIGHT|wx.EXPAND, 0)
       

        statcommsizer.Add(self.tc_commish_list, 1, wx.GROW, 0)
        statroguesizer.Add(self.tc_rogue_list, 1, wx.GROW, 0)
        statorphsizer.Add(self.tc_orphan_list, 1, wx.GROW, 0)

        statussizer = wx.BoxSizer(wx.HORIZONTAL)
        commsizer = wx.BoxSizer(wx.HORIZONTAL)

        statussizer.Add(statdevicesizer, 1, wx.EXPAND, 0)
        statussizer.Add(statnetworksizer, 1, wx.EXPAND, 0)
        statussizer.Add(statsensorsizer, 1, wx.EXPAND, 0)
        commsizer.Add(statcommsizer, 1, wx.EXPAND, 0)
        commsizer.Add(statroguesizer, 1, wx.EXPAND, 0)
        commsizer.Add(statorphsizer, 1, wx.EXPAND, 0)

        p2sizer = wx.BoxSizer(wx.VERTICAL)
        p2sizer.Add(statussizer, 1, wx.GROW|wx.ALL, 5)
        p2sizer.Add(commsizer, 1, wx.GROW|wx.ALL, 5)
        nmstat_pane.SetSizerAndFit(p2sizer)

        nmSplitter.SplitVertically(tree_pane, nmstat_pane, 1)

        spsizer = wx.BoxSizer(wx.VERTICAL)
        spsizer.Add(nmSplitter, 1, wx.EXPAND, 0)

        self.SetAutoLayout(1)
        self.SetSizerAndFit(spsizer)
        spsizer.SetSizeHints(self)
        self.Layout()
        self.Show()

class PageTerminalView(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        #sizer = wx.BoxSizer(wx.VERTICAL)
        self.text_ctrl_output = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.text_ctrl_output, 1, wx.EXPAND, 0)
        #self.SetAutoLayout(1)
        self.SetSizer(sizer)
        self.Layout()


class seWSNViewLayout(wx.Frame):
   pageTerminal = None
   pageNetMon = None
   pageMFG = None
   pageTopo = None
   tb = None
   global openJoin
   global gmaxsize
   global gtotalBlocks

   # constructor for the toplevel layout
   def __init__(self, *args, **kwds):
      global pageTerminal
      global pageNetMon
      global pageTopo
      global seWSNsb
      global statusbarframe
      global pageMFG
      global tb
      self.XAddr = ''
      self.serial = serial.Serial()
      self.serial.timeout = 0.5   #make sure that the alive event can be checked from time to time
      self.settings = TerminalSetup() #placeholder for the settings
      self.thread = None
      self.alive = threading.Event()

      kwds["style"] = wx.DEFAULT_FRAME_STYLE
      wx.Frame.__init__(self, *args, **kwds)
      seicon = wx.Icon('seIcon.ico', wx.BITMAP_TYPE_ICO, 16, 16)
      wx.Frame.SetIcon(self, seicon)

      # Bind the close event
      self.Bind(wx.EVT_CLOSE, self.OnClose)

      seWSNsb = seWSNStatusbar(self)
      statusbarframe = self
      # Menu Bar
      mb = seWSNMenubar(self)
      # Menu Bar end

      # Tool Bar
      tb = seWSNToolbar(self)
      # Tool Bar end

      # Notebook
      p = wx.Panel(self)
      nb = wx.Notebook(p)

      pageNetMon = PageNetworkMonitor(nb)
      pageTerminal = PageTerminalView(nb)

      nb.AddPage(pageNetMon, "Network Monitor")
      nb.AddPage(pageTerminal, "Terminal View")
      nbsizer = wx.BoxSizer()
      nbsizer.Add(nb, 1, wx.EXPAND)
      p.SetSizer(nbsizer)
      # Notebook end

      self.__set_properties()
      #self.__do_layout()
      self.__attach_events()          #register events

      #added for xbee interpreter
      self.Argus= XBeeBase(self.serial)

      self.OnConfigFileSelect(None)

      self.OnPortSettings(None)       #call setup dialog on startup, opens port
      # Allow application to run even without a serial port
      # if not self.alive.isSet():
      #     self.Close()
      
      #added for xbee interpreter
      #self.Argus= XBeeBase(self.serial)
      
      # Only call OnSendStatusReq if the serial port is open
      if self.is_port_open():
          self.OnSendStatusReq(None)

      self.timer = wx.Timer(self, TIMER_ID)
      self.Bind(wx.EVT_TIMER, self.UpdateGaugeDisplay)
      self.timer.Start(5000)

   def __set_properties(self):
      self.SetTitle("SE Wireless Development Tool")
      self.SetSize((1300, 900))

   def __attach_events(self):
      global pageNetMon
      #register events at the controls
      self.Bind(wx.EVT_MENU, self.OnClear, id = ID_CLEAR)
      self.Bind(wx.EVT_MENU, self.OnSaveAs, id = ID_SAVEAS)
      self.Bind(wx.EVT_MENU, self.OnExit, id = ID_EXIT)
      self.Bind(wx.EVT_MENU, self.OnPortSettings, id = ID_SETTINGS)
      self.Bind(wx.EVT_MENU, self.OnTermSettings, id = ID_TERM)
      self.Bind(wx.EVT_MENU, self.OnConfigFileSelect, id = ID_COM_LIST)
      self.Bind(wx.EVT_MENU, self.OnSendHotShot, id = ID_SEND_HOTSHOT)
      self.Bind(wx.EVT_MENU, self.OnSendStatusReq, id = ID_SEND_STATUSREQ)
      self.Bind(wx.EVT_MENU, self.OnSendSJoinAccept, id = ID_SEND_SJOIN_ACCEPT)
      self.Bind(wx.EVT_MENU, self.OnSendRemoveNode, id = ID_SEND_REMOVE_NODE)
      self.Bind(wx.EVT_MENU, self.OnSendTimeResponse, id = ID_SEND_TIME_RESP)
      self.Bind(wx.EVT_MENU, self.OnSendQNPResponse, id = ID_SEND_QNP_RESP)
      self.Bind(wx.EVT_MENU, self.OnSendPEResponse, id = ID_SEND_PE_RESP)
      self.Bind(wx.EVT_MENU, self.OnSendRMTCommand, id = ID_SEND_RMT_CMD)
      self.Bind(wx.EVT_MENU, self.OnSendColdShot, id = ID_SEND_COLDSHOT)
      #self.Bind(wx.EVT_MENU, self.OnSendRDNTHotShot, id = ID_SEND_RDNTHOTSHOT)
      #self.Bind(wx.EVT_MENU, self.OnSendRDNTColdShot, id = ID_SEND_RDNTCOLDSHOT)
      self.Bind(wx.EVT_MENU, self.OnSendPKGNotify_USB, id = ID_SEND_PKGNOTIFY_USB)
      self.Bind(wx.EVT_MENU, self.OnSendPKGNotify_MINI, id = ID_SEND_PKGNOTIFY_MINI)
      self.Bind(wx.EVT_MENU, self.OnSendPKGNotify_SP180, id = ID_SEND_PKGNOTIFY_SP180)
      self.Bind(wx.EVT_MENU, self.OnHelp, id = ID_HELP)
      pageTerminal.text_ctrl_output.Bind(wx.EVT_CHAR, self.OnKey)
      #pageNetMon.tc_commish_list.Bind(wx.EVT_CHAR, self.OnKey)
      pageNetMon.tree_ctrl.Bind(wx.EVT_TREE_SEL_CHANGED, self.UpdateStatusDisplay)
      #self.Bind(wx.EVT_BUTTON, self.OnSendRemoveNode, id = pageNetMon.removebutton.GetId())
      pageNetMon.removebutton.Bind(wx.EVT_BUTTON, self.OnSendRemoveNode, id = pageNetMon.removebutton.GetId())
      #pageTopo.topobutton.Bind(wx.EVT_BUTTON, self.OnStartTopoView, id = pageTopo.topobutton.GetId())
      self.Bind(EVT_SERIALRX, self.OnSerialRead)

   def checksum(self, s):
      return pack('B', sum(unpack(str(str(len(s))+"B"), s))%256)

   def debug_print(self, message, data=None):
      """Print debug information when verbose mode is enabled.
      
      Args:
          message: A string message to print
          data: Optional binary data to print in hex format
      """
      if DEBUG:
          print("DEBUG: {}".format(message))
          if data is not None:
              if isinstance(data, str):
                  data = data.encode()
              print("  HEX: {}".format(data.hex()))
              
   def StartThread(self):
      """Start the receiver thread"""
      self.thread = threading.Thread(target=self.ComPortArgusThread)
      self.thread.setDaemon(1)
      self.alive.set()
      self.thread.start()

   def StopThread(self):
      """Stop the receiver thread, wait util it's finished."""
      if self.thread is not None:
         self.alive.clear()          #clear alive event for thread
         self.thread.join()          #wait until thread has finished
         self.thread = None

   def is_port_open(self):
      """Check if the serial port is open and available."""
      try:
         return hasattr(self, 'serial') and self.serial and self.serial.is_open
      except:
         return False

   def safe_write(self, data):
      """Safely write data to the serial port with error handling."""
      if not self.is_port_open():
         wx.MessageBox("Serial port is not open", "Error", wx.OK | wx.ICON_ERROR)
         return False
      try:
         self.debug_print("Writing to serial port", data)
         self.serial.write(data)
         return True
      except Exception as e:
         wx.MessageBox("Error writing to serial port: {}".format(str(e)), "Error", wx.OK | wx.ICON_ERROR)
         return False

   def safe_read(self, size=1):
      """Safely read data from the serial port with error handling."""
      if not self.is_port_open():
         return None
      try:
         return self.serial.read(size)
      except Exception as e:
         wx.MessageBox("Error reading from serial port: {}".format(str(e)), "Error", wx.OK | wx.ICON_ERROR)
         return None

   def OnPortSettings(self, event=None):
      """Handle port settings with improved error handling."""
      try:
         dlg = wxSerialConfigDialog.SerialConfigDialog(self, -1, "", 
            show=wxSerialConfigDialog.SHOW_BAUDRATE|wxSerialConfigDialog.SHOW_FORMAT|wxSerialConfigDialog.SHOW_FLOW,
            serial=self.serial
         )
         result = dlg.ShowModal()
         if result == wx.ID_OK:
            if self.is_port_open():
               self.serial.close()
            try:
               self.serial.open()
               self.StartThread()
               self.SetTitle("SE Wireless Development Tool on %s [%s, %s%s%s%s%s]" % (
                  self.serial.portstr,
                  self.serial.baudrate,
                  self.serial.bytesize,
                  self.serial.parity,
                  self.serial.stopbits,
                  self.serial.rtscts and ' RTS/CTS' or '',
                  self.serial.xonxoff and ' Xon/Xoff' or '',
               ))
            except Exception as e:
               wx.MessageBox("Error opening serial port: {}".format(str(e)), "Error", wx.OK | wx.ICON_ERROR)
         dlg.Destroy()
      except Exception as e:
         wx.MessageBox("Error in port settings: {}".format(str(e)), "Error", wx.OK | wx.ICON_ERROR)

   def OnPause(self, event=None):
      global terminalPaused
      terminalPaused = True

   def OnPlay(self, event=None):
      global terminalBuffer
      global terminalPaused
      for eachLine in terminalBuffer:
         pageTerminal.text_ctrl_output.AppendText(eachLine)
      terminalPaused = False
      terminalBuffer[:] = []

   #def OnRefresh(self, event=None):
   #   global pageTopo
   #   pageTopo.browser.Reload()

   def OnStartTopoView(self, event=None):
      pid = subprocess.Popen(['python', '-m', 'SimpleHTTPServer', '80']).pid
      if sys.platform.startswith('win'):

         os.system("start firefox http://localhost")
      elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):

         os.system("firefox http://localhost")
      elif sys.platform.startswith('darwin'): #MacOS X

         os.system("safari http://localhost")
      else:

         raise EnvironmentError('Unsupported platform')

   def OnFeatureNotImp(self, event=None):
      """Feature not implemented. Show the settings dialog
         with the current commission list settings"""
      dialog = FeatureNotImplementedDialog(None, -1, "", settings=self.settings)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnOTAFileSelect(self, event=None):
      """Tool point OTA File Selector. Show the settings dialog
         with the current commission list settings"""
      dialog = OTAFileDialog(None, -1, "", settings=self.settings)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnConfigFileSelect(self, event=None):
      """Tool point Commission List Settings. Show the settings dialog
         with the current commission list settings"""
      dialog = ConfigFileDialog(None, -1, "", settings=self.settings)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnCommissionList(self, event):
      """Tool point Commission List Settings. Show the settings dialog
         with the current commission list settings"""
      dialog = CommissionListDialog(None, -1, "", settings=self.settings)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnRemoveList(self, event):
      """Tool point Remove List. Show the settings dialog
         with the current remove list options"""
      dialog = RemoveListDialog(None, -1, "", settings=self.settings)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnTermSettings(self, event):
      """Menu point Terminal Settings. Show the settings dialog
         with the current terminal settings"""
      dialog = TerminalSettingsDialog(None, -1, "", settings=self.settings)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnExit(self, event):
      """Menu point Exit"""
      # Just call OnClose to handle the exit
      self.Close()

   def OnClose(self, event):
      """Called on application shutdown."""
      global outfile
      global temperaturefile
      
      print("OnClose called")
      
      try:
         if outfile and not outfile.closed:
            outfile.close()
         if temperaturefile and not temperaturefile.closed:
            temperaturefile.close()
      except Exception as e:
         print("Error closing files: {}".format(e))
         
      try:
         if hasattr(self, 'timer') and self.timer:
            self.timer.Stop()
         if hasattr(self, 'thread') and self.thread:
            self.StopThread()
         if hasattr(self, 'serial') and self.serial:
            self.serial.close()
      except Exception as e:
         print("Error during cleanup: {}".format(e))
      
      # Allow the event to continue and close the window
      event.Skip()
      self.Destroy()
      
      # Force immediate exit
      import os
      os._exit(0)

   def OnSaveAs(self, event):
      """Save contents of output window."""
      filename = None
      dlg = wx.FileDialog(None, "Save Text As...", "log", "", "Text File|*.txt|All Files|*",  wx.SAVE)
      if dlg.ShowModal() ==  wx.ID_OK:
         filename = dlg.GetPath()
      dlg.Destroy()

      if filename is not None:
         #result = pageTerminal.text_ctrl_output.SaveFile(filename=filename, fileType=TEXT_TYPE_ANY)
         f = open(filename, 'w')
         text = pageTerminal.text_ctrl_output.GetValue()
         if type(text) == unicode:
            text = text.encode("latin1")    #hm, is that a good asumption?
         f.write(text)
         f.close()

   def OnClear(self, event):
      global pageTerminal
      global pageNetMon
      global orphanList
      global rogueList
      #global joinList
      """Clear contents of output window."""
      #pageTerminal.text_ctrl_output.Clear()
      #pageNetMon.tc_commish_list.Clear()
      pageNetMon.tc_orphan_list.Clear()
      pageNetMon.tc_rogue_list.Clear()
      """Clear display data."""
      orphanList[:] = []
      rogueList[:] = []
      #for item in joinList:
      #    item.Clear()
      #joinList[0] = {'ieee_address':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
      #     'packageid':' ', 'deviceType':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
      #     'temp':' ', 'humid':' ',
      #     'port1type':' ', 'port2type':' ', 'port3type':' ',
      #     'port1val':' ', 'port2val':' ', 'port3val':' ',
      #     'port1err':' ', 'port2err':' ', 'port3err':' ',
      #     'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
      #     'control':' ', 'pkgtype':' ', 'filever':' ', 'bootldver':' ', 'parentmac':' ', 'hopcount':'ff', 'rxLQI':' ', 'txFailure':' ',
      #     'deviceUptime':'0', 'packetLoss':'0', 'txCounter':'0', 'shortAddress':'0000', 'workingMemory':'0'}

      #pageNetMon.tree_ctrl.DeleteAllItems()
      #pageNetMon.parentmactxc.Clear()
      #pageNetMon.blversiontxc.Clear()
      #pageNetMon.packageidtxc.Clear()
      #pageNetMon.macaddrtxc.Clear()
      #pageNetMon.skunumtxc.Clear()
      #pageNetMon.sernumtxc.Clear()
      #pageNetMon.mfgdatetxc.Clear()
      #pageNetMon.hwvertxc.Clear()
      #pageNetMon.batterytxc.Clear()
      #pageNetMon.utctmtxc.Clear()
      #pageNetMon.manidtxc.Clear()
      #pageNetMon.statustxc.Clear()
      #pageNetMon.sdptimertxc.Clear()
      #pageNetMon.sdptimergauge.SetValue(0)
      #pageNetMon.devicetypetxc.Clear()
      #pageNetMon.channeltxc.Clear()
      #pageNetMon.fwvertxc.Clear()
      #pageNetMon.sdpvertxc.Clear()
      #pageNetMon.transidtxc.Clear()
      #pageNetMon.rssitxc.Clear()
      #pageNetMon.temperaturetxc.Clear()
      #pageNetMon.humiditytxc.Clear()
      #pageNetMon.port1typetxc.Clear()
      #pageNetMon.port1valtxc.Clear()
      #pageNetMon.port2typetxc.Clear()
      #pageNetMon.port2valtxc.Clear()
      #pageNetMon.port3typetxc.Clear()
      #pageNetMon.port3valtxc.Clear()
      #pageNetMon.spivertxc.Clear()
      #pageNetMon.flagdatatxc.Clear()
      #pageNetMon.controltxc.Clear()
      #pageNetMon.pkgtypetxc.Clear()
      #pageNetMon.filevertxc.Clear()
      #self.OnSendStatusReq(None)

   def UpdatePageTerminal(self, outputstr):
      global terminalBuffer
      global terminalPaused
      if terminalPaused:
         terminalBuffer.append(outputstr)
      else:
         pageTerminal.text_ctrl_output.AppendText(outputstr)

   def OnSendHotShot(self, event):
      """Send HotShot command with improved error handling."""
      HotShot = (0xFE, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x03)
      if self.safe_write(bytes(HotShot)):
         self.UpdatePageTerminal("HotShot command sent\n")

   def OnSendStatusReq(self, event):
      """Send Status Request command with improved error handling."""
      StatusReq = (0xFE, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x01, 0x84)
      if self.safe_write(bytes(StatusReq)):
         self.UpdatePageTerminal("Status Request command sent\n")

   def OnSendListModify(self, event):
      #Commission List Modified command
      ListMod = bytearray(b'\xFE\x01\x00\x00\x00\x00\x00\x00\x00\x00\x03\x01\x0E\x11')
      if self.safe_write(ListMod):
         self.UpdatePageTerminal("\n ====> Commission List Modified \n")
         self.UpdatePageTerminal("\r\n")

   def OnSendCriticalAck(self, event):
      global hostTransID
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE')  # header
      StatusReq.extend(b'\x03')  # command length
      StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00')
      StatusReq.extend(pack('B', int(hostTransID)%256))  # Host Trans ID
      StatusReq.extend(b'\x00')  # bits
      StatusReq.extend(b'\x80')  # command ID
      
      # Check if this is a CommandEvent (menu click) or SerialRxEvent (has data)
      if hasattr(event, 'data'):
         # It's a SerialRxEvent with data
         StatusReq.extend(pack('B', int(event.data['transID'].hex(), 16)%256))  # rx'd trans ID
      else:
         # It's a CommandEvent (menu click) - use default value
         StatusReq.extend(pack('B', 0))  # Default trans ID
      
      StatusReq.extend(b'\x01')  # OTW Ack
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> Critical Ack\n")
         self.UpdatePageTerminal("\n")
         self.UpdatePageTerminal(StatusReq.hex())
         self.UpdatePageTerminal("\r\n")
         hostTransID += 1

   def OnSendSJoinAccept(self, event):
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE')  # header
      StatusReq.extend(b'\x0a')  # command length
      StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00')
      StatusReq.extend(b'\x19')  # command ID
      StatusReq.extend(b'\x01')  # Join granted, 0x00 reject
      
      # Check if self.XAddr exists (set from SerialRxEvent)
      if hasattr(self, 'XAddr'):
         StatusReq.extend(self.XAddr)
      else:
         # Default value for XAddr if not set
         StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00')
      
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> SJoin Granted\n")
         self.UpdatePageTerminal("\r\n")

   def OnSendSJoinReject(self, event):
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE')  # header
      StatusReq.extend(b'\x0a')  # command length
      StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00')
      StatusReq.extend(b'\x19')  # command ID
      StatusReq.extend(b'\x00')  # Join rejected
      
      # Check if self.XAddr exists (set from SerialRxEvent)
      if hasattr(self, 'XAddr'):
         StatusReq.extend(self.XAddr)
      else:
         # Default value for XAddr if not set
         StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00')
      
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> SJoin Rejected\n")
         self.UpdatePageTerminal("\r\n")

   def OnSendTimeResponse(self, event):
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE')  # header
      StatusReq.extend(b'\x05')  # command length
      StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00')
      StatusReq.extend(b'\x1f')  # command ID
      epoch_bytes = int(time.time()).to_bytes(4, 'big')
      StatusReq.extend(epoch_bytes)
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> Time Request Responded\n")
         self.UpdatePageTerminal(StatusReq.hex())
         self.UpdatePageTerminal("\r\n")

   def OnSendPEResponse(self, event):
      global tb
      switchTime = False
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE\x12\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x1d')

      filename = tb.OTAfile1txc.GetLineText(0)
      if filename == None or filename == '':
         # Check if this is a CommandEvent (menu click) or SerialRxEvent (has data)
         if hasattr(event, 'data'):
            # It's a SerialRxEvent with data
            StatusReq.extend(pack('<H', int(event.data['PKGTYPE'], 16)))  # man ID
            pktpstr = bytes.fromhex(event.data['PKGTYPE'])
            StatusReq.extend(pktpstr)
            flvrstr = bytes.fromhex(event.data['FILEVER'])
            StatusReq.extend(flvrstr)
         else:
            # It's a CommandEvent (menu click) - use default values
            StatusReq.extend(pack('<H', 0xC4F4))  # Default Man ID (C4F4)
            StatusReq.extend(pack('<H', 0x1101))  # Default Package ID (0x1101)
            StatusReq.extend(pack('<I', 0x00000001))  # Default File Version
      else:
         result_list = imageInfo(filename)
         StatusReq.extend(pack('<H', result_list[1]))  # man ID
         StatusReq.extend(pack('<H', result_list[2]))  # package ID
         StatusReq.extend(pack('<I', result_list[3]))  # file version

      epoch_bytes = int(time.time()).to_bytes(4, 'big')
      StatusReq.extend(epoch_bytes)
      
      OTAswitchindex = tb.OTAswitchchoice.GetSelection()
      if OTAswitchindex != 'NOT_FOUND':
         OTAswitchtext = tb.OTAswitchchoice.GetString(OTAswitchindex)
         switchTime = OTAswitchtext == "Now"
      
      if switchTime:
         StatusReq.extend(b'\x00\x00\x00\x00')
      else:
         StatusReq.extend(b'\xff\xff\xff\xff')
      
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> Package End Request Responded\n")
         self.UpdatePageTerminal("\n")
         self.UpdatePageTerminal(StatusReq.hex())
         self.UpdatePageTerminal("\n")

   def OnSendRMTCommand(self, event):
      global pageNetMon
      global joinList
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE\x0D\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x20')
      
      # First check if the user has entered a MAC in the text field and wants to use it
      if pageNetMon.notfoundcheckbox.GetValue() and pageNetMon.removemactxc.GetLineLength(0) == 16:
         tempstr = pageNetMon.removemactxc.GetLineText(0)
         try:
            macstr = bytes.fromhex(tempstr)
         except ValueError:
            self.UpdatePageTerminal("\n ====> Error: Invalid MAC address format\n")
            return
      else:
         # Try to get the MAC from the selected tree item
         treeItem = pageNetMon.tree_ctrl.GetSelection()
         if not treeItem.IsOk():
            self.UpdatePageTerminal("\n ====> Error: No device selected\n")
            return
            
         treeItemText = pageNetMon.tree_ctrl.GetItemText(treeItem)
         selectedDeviceInList = next((item for item in joinList if item["ieee_address"]==treeItemText[3:]), None)
         
         if not selectedDeviceInList:
            self.UpdatePageTerminal("\n ====> Error: Selected device not found in device list\n")
            return
            
         try:
            macstr = bytes.fromhex(selectedDeviceInList['ieee_address'])
         except ValueError:
            self.UpdatePageTerminal("\n ====> Error: Invalid MAC address in device list\n")
            return
      
      StatusReq.extend(reversed(macstr))
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> RMT Command\n")
         self.UpdatePageTerminal("\n")
         self.UpdatePageTerminal(StatusReq.hex())
         self.UpdatePageTerminal("\r\n")

   def OnSendColdShot(self, event):
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x14')
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> Send Cold Shot\n")
         self.UpdatePageTerminal("\r\n")

   def OnSendRDNTHotShot(self, event):
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28')
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> Send RDNT Hot Shot\n")
         self.UpdatePageTerminal("\n")

   def OnSendRDNTColdShot(self, event):
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x29')
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> Send RDNT Cold Shot\n")
         self.UpdatePageTerminal("\n")

   def OnSendPKGNotify_USB(self, event):
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE')  # header
      StatusReq.extend(b'\x05')  # command length
      StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00')  # long and control
      StatusReq.extend(b'\x0a')  # command body
      StatusReq.extend(b'\xf4\xc4')  # Man ID
      StatusReq.extend(b'\x04\x11')  # PKGTYPE
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      inspect(StatusReq)
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> Send USB Dongle PKG Notify\n")
         self.UpdatePageTerminal("\n")

   def OnSendPKGNotify_MINI(self, event):
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE')  # header
      StatusReq.extend(b'\x05')  # command length
      StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00')  # long and control
      StatusReq.extend(b'\x0a')  # command body
      StatusReq.extend(b'\xf4\xc4')  # Man ID
      StatusReq.extend(b'\x02\x11')  # PKGTYPE
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      inspect(StatusReq)
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> Send MINI PKG Notify\n")
         self.UpdatePageTerminal("\n")

   def OnSendPKGNotify_SP180(self, event):
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE')  # header
      StatusReq.extend(b'\x05')  # command length
      StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00')  # long and control
      StatusReq.extend(b'\x0a')  # command body
      StatusReq.extend(b'\xf4\xc4')  # Man ID
      StatusReq.extend(b'\x01\x11')  # PKGTYPE
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      inspect(StatusReq)
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> Send SP180 PKG Notify\n")
         self.UpdatePageTerminal("\n")

   def OnSendPKGNotify(self, event):
      global tb
      global gmaxsize
      global gtotalBlocks
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE')  # header
      StatusReq.extend(b'\x05')  # command length
      StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00')  # long and control
      StatusReq.extend(b'\x0a')  # command body
      
      try:
          filename = tb.OTAfile1txc.GetLineText(0)
          if not filename or filename == '':
              # Handle the case where no file is selected
              self.UpdatePageTerminal("\n ====> Abort PKG Notify, No File Selected\n")
              self.UpdatePageTerminal("\n")   
              return
          
          result_list = imageInfo(filename)
          if not result_list:
              self.UpdatePageTerminal("\n ====> Error reading file information\n")
              self.UpdatePageTerminal("\n")
              return
              
          gtotalBlocks = int(result_list[5])//gmaxsize  # file size
          if int(result_list[5])%gmaxsize != 0:
              gtotalBlocks += 1
          tb.OTAprog1txc.Clear()
          tb.OTAprog1txc.AppendText(str(gtotalBlocks))
          
          StatusReq.extend(pack('<H', result_list[1]))  # man ID
          StatusReq.extend(pack('<H', result_list[2]))  # package ID
          StatusReq.extend(self.checksum(bytes(StatusReq)))
          
          self.debug_print("Sending PKG Notify", StatusReq)
          if self.safe_write(StatusReq):
              pktype = str(result_list[2])
              self.UpdatePageTerminal("\n ====> Send PKG Notify, Type = {}\n".format(pktype))
              self.UpdatePageTerminal("\n")   
              self.UpdatePageTerminal(StatusReq.hex())
              self.UpdatePageTerminal("\n")
      except Exception as e:
          self.UpdatePageTerminal("\n ====> Error in PKG Notify: {}\n".format(str(e)))
          self.UpdatePageTerminal("\n")

   def OnSendPKGBlockResponse(self, event, pktype, offset, maxblksize, version, filename):
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE')  # header
      StatusReq.extend(b'\x0f')  # command length
      StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00')
      StatusReq.extend(b'\x1c')  # command ID
      StatusReq.extend(b'\x01')  # control bits: 01 - get a file, 00 - no file
      StatusReq.extend(b'\xf4\xc4')  # man ID
      StatusReq.extend(pktype)
      StatusReq.extend(version)  # file version
      StatusReq.extend(offset)  # file offset
      StatusReq.extend(maxblksize)
      
      # Get file contents at offset
      offset_int = int.from_bytes(offset, 'big')
      maxblksize_int = int.from_bytes(maxblksize, 'big')
      file_contents = peek(offset_int, maxblksize_int, filename)
      StatusReq.extend(file_contents)
      
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      inspect(StatusReq)
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> PKG Block Request Responsed\n")
      self.UpdatePageTerminal("\n")
      self.UpdatePageTerminal(StatusReq.hex())
      self.UpdatePageTerminal("\n")


   def OnKey(self, event):
      """Key event handler. if the key is in the ASCII range, write it to the serial port.
         Newline handling and local echo is also done here."""
      code = event.GetKeyCode()
      if code < 256:  # is it printable?
         if code == 13:  # is it a newline? (check for CR which is the RETURN key)
            if self.settings.echo:  # do echo if needed
               self.UpdatePageTerminal('\n')
            if self.settings.newline == NEWLINE_CR:
               self.safe_write(b'\r')  # send CR
            elif self.settings.newline == NEWLINE_LF:
               self.safe_write(b'\n')  # send LF
            elif self.settings.newline == NEWLINE_CRLF:
               self.safe_write(b'\r\n')  # send CR+LF
         else:
            char = chr(code).encode()
            if self.settings.echo:  # do echo if needed
               pageTerminal.text_ctrl_output.WriteText(chr(code))
            self.safe_write(char)  # send the character
      else:
         print("Extra Key: {}".format(code))

   def UpdateGaugeDisplay(self, event):
      global pageNetMon
      global joinList
      for tmitem in joinList:
         if 'laptime' in tmitem:
            tmitem["laptime"] += 5
            if tmitem["laptime"] > 185 or tmitem["ieee_address"] not in commishList:
               theroot = pageNetMon.tree_ctrl.GetRootItem()
               if theroot.IsOk():
                  theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
                  while theitem.IsOk():
                     if pageNetMon.tree_ctrl.GetItemText(theitem)[3:] == tmitem["ieee_address"]:
                        pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.RED)
                        #removeNodeInformation(tmitem["ieee_address"])
                        break
                     else:
                        theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)
            else:
               theroot = pageNetMon.tree_ctrl.GetRootItem()
               theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
               while theitem.IsOk():
                  if pageNetMon.tree_ctrl.GetItemText(theitem)[3:] == tmitem["ieee_address"]:
                     pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.WHITE)
                     break
                  else:
                     theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)
      treeItem = pageNetMon.tree_ctrl.GetSelection()
      if treeItem.IsOk():
         treeItemText = pageNetMon.tree_ctrl.GetItemText(treeItem)
         selctedDeviceInList = next((item for item in joinList if item["ieee_address"]==treeItemText[3:]),None)
         if selctedDeviceInList != None:
            if selctedDeviceInList['laptime'] <= 185:
               pageNetMon.sdptimergauge.SetValue(selctedDeviceInList['laptime'])
               pageNetMon.sdptimertxc.SetBackgroundColour(wx.NullColour)
            #elif selctedDeviceInList['laptime'] > 185 and selctedDeviceInList['laptime'] <= 210:
               #pageNetMon.sdptimergauge.SetValue(185)
               #pageNetMon.sdptimertxc.SetStyle(wx.TextAttr(wx.NullColour, wx.YELLOW))
               #pageNetMon.sdptimertxc.SetBackgroundColour(wx.YELLOW)
            elif selctedDeviceInList['laptime'] > 185:
               pageNetMon.sdptimergauge.SetValue(185)
               #pageNetMon.sdptimertxc.SetStyle(wx.TestAttr(wx.NullColour, wx.RED))
               pageNetMon.sdptimertxc.SetBackgroundColour(wx.RED)
            pageNetMon.sdptimertxc.Clear()
            pageNetMon.sdptimertxc.AppendText(str(selctedDeviceInList['laptime']))

   def ADC_TempConversion(self, f_adc, dev_type, internal):
      tempVal = 0
      iTemp = 0
      f_adc = (float(f_adc)/1000)
      tempVal1 = 40.062 * f_adc * f_adc * f_adc * f_adc * f_adc
      tempVal2 = 194.44 * f_adc * f_adc * f_adc * f_adc
      tempVal3 = 372.73 * f_adc * f_adc * f_adc
      tempVal4 = 347.74 * f_adc * f_adc
      tempVal5 = 200.55 * f_adc
      #print(f_adc, tempVal1, tempVal2, tempVal3, tempVal4, tempVal5)
      tempVal = tempVal1 - tempVal2 + tempVal3 - tempVal4 + tempVal5 - 51.343
      iTemp = ( tempVal * 10)
      tempVal = (iTemp / 10.0) #adjust to 10ths precision
      if dev_type != "End Device":
         if internal == True:
            tempVal -= 2.0  #adjustment for self heating
      return tempVal*1.8+32

   def ADC_TempConversionSMT(self, f_adc):
      tempVal = 0
      iTemp = 0
      f_adc = (float(f_adc)/1000)
      tempVal1 = 34.918 * f_adc * f_adc * f_adc * f_adc * f_adc
      tempVal2 = 166.39 * f_adc * f_adc * f_adc * f_adc
      tempVal3 = 320.47 * f_adc * f_adc * f_adc
      tempVal4 = 307.7 * f_adc * f_adc
      tempVal5 = 196.92 * f_adc
      #print(f_adc, tempVal1, tempVal2, tempVal3, tempVal4, tempVal5)
      tempVal = tempVal1 - tempVal2 + tempVal3 - tempVal4 + tempVal5 - 59.212
      iTemp = ( tempVal * 10)
      tempVal = (iTemp / 10.0) #adjust to 10ths precision
      return tempVal*1.8+32

   def calcHumidity(self, adc, temp):
      h = ((float(adc)/2047) - 0.1515) / 0.00636
      h = h / (1.0546 - 0.00216*temp)
      if h >= 95:
         h = 95
      if h < 0:
         h = 0
      return h

   def UpdateStatusDisplay(self, event):
      global pageNetMon
      global joinList
      treeItem = pageNetMon.tree_ctrl.GetSelection()
      if treeItem.IsOk():
         treeItemText = pageNetMon.tree_ctrl.GetItemText(treeItem)
      else:
         pageNetMon.tree_ctrl.SelectItem(root, True)
         treeItem = pageNetMon.tree_ctrl.GetSelection()
      selctedDeviceInList = next((item for item in joinList if item["ieee_address"]==treeItemText[3:]),None)
      if selctedDeviceInList != None:
         pageNetMon.macaddrtxc.Clear()
         pageNetMon.macaddrtxc.AppendText(selctedDeviceInList['ieee_address'])
         pageNetMon.skunumtxc.Clear()
         pageNetMon.skunumtxc.AppendText(selctedDeviceInList['sku'])
         pageNetMon.sernumtxc.Clear()
         pageNetMon.sernumtxc.AppendText(selctedDeviceInList['serial'])
         pageNetMon.mfgdatetxc.Clear()
         pageNetMon.mfgdatetxc.AppendText(selctedDeviceInList['mfgdate'])
         pageNetMon.hwvertxc.Clear()
         pageNetMon.hwvertxc.AppendText(selctedDeviceInList['hwvers'])
         pageNetMon.batterytxc.Clear()
         pageNetMon.batterytxc.AppendText(selctedDeviceInList['battery'])
         pageNetMon.utctmtxc.Clear()
         pageNetMon.utctmtxc.AppendText(selctedDeviceInList['utctime'])
         pageNetMon.manidtxc.Clear()
         pageNetMon.manidtxc.AppendText(selctedDeviceInList['manid'])
         pageNetMon.statustxc.Clear()
         pageNetMon.statustxc.AppendText(selctedDeviceInList['status'])
         pageNetMon.sdptimertxc.Clear()
         pageNetMon.sdptimertxc.AppendText(str(selctedDeviceInList['laptime']))
         if selctedDeviceInList['laptime'] <= 185:
            pageNetMon.sdptimergauge.SetValue(selctedDeviceInList['laptime'])
            pageNetMon.sdptimertxc.SetBackgroundColour(wx.NullColour)
         #elif selctedDeviceInList['laptime'] > 185 and selctedDeviceInList['laptime'] < 210:
            #pageNetMon.sdptimergauge.SetValue(185)
            #pageNetMon.sdptimertxc.SetBackgroundColour(wx.YELLOW)
         elif selctedDeviceInList['laptime'] > 185:
            pageNetMon.sdptimergauge.SetValue(185)
            pageNetMon.sdptimertxc.SetBackgroundColour(wx.RED)
         #pageNetMon.sdptimergauge.SetValue(selctedDeviceInList['laptime'])
         pageNetMon.parentmactxc.Clear()
         pageNetMon.parentmactxc.AppendText(selctedDeviceInList['parentmac'])
         pageNetMon.blversiontxc.Clear()
         pageNetMon.blversiontxc.AppendText(selctedDeviceInList['bootldver'])
         pageNetMon.packageidtxc.Clear()
         pageNetMon.packageidtxc.AppendText(selctedDeviceInList['packageid'])
         pageNetMon.devicetypetxc.Clear()
         pageNetMon.devicetypetxc.AppendText(selctedDeviceInList['deviceType'])
         pageNetMon.channeltxc.Clear()
         pageNetMon.channeltxc.AppendText(selctedDeviceInList['chan'])
         pageNetMon.hopcounttxc.Clear()
         pageNetMon.hopcounttxc.AppendText(selctedDeviceInList['hopcount'])
         pageNetMon.fwvertxc.Clear()
         pageNetMon.fwvertxc.AppendText(selctedDeviceInList['fwvers'])
         pageNetMon.sdpvertxc.Clear()
         pageNetMon.sdpvertxc.AppendText(selctedDeviceInList['sdpvers'])
         pageNetMon.transidtxc.Clear()
         pageNetMon.transidtxc.AppendText(selctedDeviceInList['transid'])
         pageNetMon.rssitxc.Clear()
         pageNetMon.rssitxc.AppendText(selctedDeviceInList['rssi'])
         pageNetMon.temperaturetxc.Clear()
         if selctedDeviceInList['temp'] == None or selctedDeviceInList['temp'] == '' or selctedDeviceInList['temp'] == ' ':
            pageNetMon.temperaturetxc.AppendText(selctedDeviceInList['temp'])
            tempflt = 0
         else:
            if selctedDeviceInList['sku'] == "NBPD0180":
               tempflt = self.ADC_TempConversion(int(selctedDeviceInList['temp'],16), selctedDeviceInList['deviceType'], True)
            else:
               tempflt = self.ADC_TempConversionSMT(int(selctedDeviceInList['temp'],16))
            tempstr = "{:.1f}".format(tempflt)
            pageNetMon.temperaturetxc.AppendText(selctedDeviceInList['temp']+' ('+tempstr+')')
         pageNetMon.humiditytxc.Clear()
         if selctedDeviceInList['humid'] == None or selctedDeviceInList['humid'] == '' or selctedDeviceInList['humid'] == ' ':
            pageNetMon.humiditytxc.AppendText(selctedDeviceInList['humid'])
         else:
            humstr = "{:.1f}".format(self.calcHumidity(int(selctedDeviceInList['humid'],16), tempflt))
            pageNetMon.humiditytxc.AppendText(selctedDeviceInList['humid']+' ('+humstr+')')
         pageNetMon.port1typetxc.Clear()
         pageNetMon.port1typetxc.AppendText(selctedDeviceInList['port1type'])
         pageNetMon.port1valtxc.Clear()
         pageNetMon.port1labeltxc.Clear()
         if selctedDeviceInList['port1type'] == '00' or selctedDeviceInList['port1type'] == '01':
            tempstr = "{:.1f}".format(self.ADC_TempConversion(int(selctedDeviceInList['port1val'],16), selctedDeviceInList['deviceType'], False))
            pageNetMon.port1valtxc.AppendText(selctedDeviceInList['port1val']+' ('+tempstr+')')
            selctedDeviceInList['port1label'] = 'Temp'
            pageNetMon.port1labeltxc.AppendText(selctedDeviceInList['port1label'])
         elif selctedDeviceInList['port1type'] == '03':
            selctedDeviceInList['port1label'] = 'Door'
            pageNetMon.port1labeltxc.AppendText(selctedDeviceInList['port1label'])
            pageNetMon.port1valtxc.AppendText(selctedDeviceInList['port1val'])
         elif selctedDeviceInList['port1type'] == '07':
            selctedDeviceInList['port1label'] = 'Dry'
            pageNetMon.port1labeltxc.AppendText(selctedDeviceInList['port1label'])
            pageNetMon.port1valtxc.AppendText(selctedDeviceInList['port1val'])
         elif selctedDeviceInList['port1type'] == '0f':
            selctedDeviceInList['port1label'] = 'Spot'
            pageNetMon.port1labeltxc.AppendText(selctedDeviceInList['port1label'])
            pageNetMon.port1valtxc.AppendText(selctedDeviceInList['port1val'])
         else:
            selctedDeviceInList['port1label'] = 'N/A'
            pageNetMon.port1labeltxc.AppendText(selctedDeviceInList['port1label'])
            pageNetMon.port1valtxc.AppendText(selctedDeviceInList['port1val'])
         pageNetMon.port2typetxc.Clear()
         pageNetMon.port2typetxc.AppendText(selctedDeviceInList['port2type'])
         pageNetMon.port2valtxc.Clear()
         pageNetMon.port2labeltxc.Clear()
         if selctedDeviceInList['port2type'] == '00' or selctedDeviceInList['port2type'] == '01':
            tempstr = "{:.1f}".format(self.ADC_TempConversion(int(selctedDeviceInList['port2val'],16), selctedDeviceInList['deviceType'], False))
            pageNetMon.port2valtxc.AppendText(selctedDeviceInList['port2val']+' ('+tempstr+')')
            selctedDeviceInList['port2label'] = 'Temp'
            pageNetMon.port2labeltxc.AppendText(selctedDeviceInList['port2label'])
         elif selctedDeviceInList['port2type'] == '03':
            selctedDeviceInList['port2label'] = 'Door'
            pageNetMon.port2labeltxc.AppendText(selctedDeviceInList['port2label'])
            pageNetMon.port2valtxc.AppendText(selctedDeviceInList['port2val'])
         elif selctedDeviceInList['port2type'] == '07':
            selctedDeviceInList['port2label'] = 'Dry'
            pageNetMon.port2labeltxc.AppendText(selctedDeviceInList['port2label'])
            pageNetMon.port2valtxc.AppendText(selctedDeviceInList['port2val'])
         elif selctedDeviceInList['port2type'] == '0f':
            selctedDeviceInList['port2label'] = 'Spot'
            pageNetMon.port2labeltxc.AppendText(selctedDeviceInList['port2label'])
            pageNetMon.port2valtxc.AppendText(selctedDeviceInList['port2val'])
         else:
            selctedDeviceInList['port2label'] = 'N/A'
            pageNetMon.port2labeltxc.AppendText(selctedDeviceInList['port2label'])
            pageNetMon.port2valtxc.AppendText(selctedDeviceInList['port2val'])
         pageNetMon.port3typetxc.Clear()
         pageNetMon.port3typetxc.AppendText(selctedDeviceInList['port3type'])
         pageNetMon.port3valtxc.Clear()
         pageNetMon.port3labeltxc.Clear()
         if selctedDeviceInList['port3type'] == '00' or selctedDeviceInList['port3type'] == '01':
            tempstr = "{:.1f}".format(self.ADC_TempConversion(int(selctedDeviceInList['port3val'],16), selctedDeviceInList['deviceType'], False))
            pageNetMon.port3valtxc.AppendText(selctedDeviceInList['port3val']+' ('+tempstr+')')
            selctedDeviceInList['port3label'] = 'Temp'
            pageNetMon.port3labeltxc.AppendText(selctedDeviceInList['port3label'])
         elif selctedDeviceInList['port3type'] == '03':
            selctedDeviceInList['port3label'] = 'Door'
            pageNetMon.port3labeltxc.AppendText(selctedDeviceInList['port3label'])
            pageNetMon.port3valtxc.AppendText(selctedDeviceInList['port3val'])
         elif selctedDeviceInList['port3type'] == '07':
            selctedDeviceInList['port3label'] = 'Dry'
            pageNetMon.port3labeltxc.AppendText(selctedDeviceInList['port3label'])
            pageNetMon.port3valtxc.AppendText(selctedDeviceInList['port3val'])
         elif selctedDeviceInList['port3type'] == '0f':
            selctedDeviceInList['port3label'] = 'Spot'
            pageNetMon.port3labeltxc.AppendText(selctedDeviceInList['port3label'])
            pageNetMon.port3valtxc.AppendText(selctedDeviceInList['port3val'])
         else:
            selctedDeviceInList['port3label'] = 'N/A'
            pageNetMon.port3labeltxc.AppendText(selctedDeviceInList['port3label'])
            pageNetMon.port3valtxc.AppendText(selctedDeviceInList['port3val'])
         pageNetMon.spivertxc.Clear()
         pageNetMon.spivertxc.AppendText(selctedDeviceInList['spiver'])
         pageNetMon.flagdatatxc.Clear()
         pageNetMon.flagdatatxc.AppendText(selctedDeviceInList['flagdata'])
         pageNetMon.controltxc.Clear()
         pageNetMon.controltxc.AppendText(selctedDeviceInList['control'])
         pageNetMon.pkgtypetxc.Clear()
         pageNetMon.pkgtypetxc.AppendText(selctedDeviceInList['pkgtype'])
         pageNetMon.filevertxc.Clear()
         pageNetMon.filevertxc.AppendText(selctedDeviceInList['filever'])

   def addDictToList(self, event):
      global joinList
      global packageid_holder
      global ManID_holder
      global status_holder
      global pageNetMon
      global redisDB
      newdeviceRec = {}

      deviceInList = next((item for item in joinList if item["ieee_address"]==str(event.data['xA'][::-1].hex())),None)
      if deviceInList != None:
         deviceInList['sku'] = str(event.data['SKU'][::-1])
         deviceInList['serial'] = event.data['Serial'][::-1]
         mfgdatestr = str(event.data['Mfg_date'][::-1].hex())
         mfgdatecln = mfgdatestr[1]+mfgdatestr[3]+'/'+mfgdatestr[5]+mfgdatestr[7]+'/'+mfgdatestr[9]+mfgdatestr[11]+mfgdatestr[13]+mfgdatestr[15]
         deviceInList['mfgdate'] = mfgdatecln #event.data['Mfg_date'][::-1].hex()
         deviceInList['hwvers'] = event.data['HW_version'][::-1].hex()
         deviceInList['battery'] = str("%1.1f" % (3.45*int(event.data['battery'][::-1].hex(), 16)/2047))
         deviceInList['utctime'] = event.data['UTC_Time'][::-1].hex()+' ('+datetime.fromtimestamp(float(str(int(event.data['UTC_Time'][::-1].hex(),16)))).strftime('%Y-%m-%d %H:%M:%S')+')'
         #datetime.datetime.fromtimestamp(event.data['UTC_Time'][::-1]).strftime('%Y-%m-%d %H:%M:%S')
         deviceInList['manid'] = ManID_holder
         deviceInList['status'] = status_holder
         deviceInList['laptime'] = 0
         pageNetMon.sdptimertxc.SetBackgroundColour(wx.NullColour)
         deviceInList['packageid'] = packageid_holder
         v = int(event.data['deviceType'].hex(), 16)
         if v == 0:
            v = "Coordinator"
         elif v == 1:
            v = "Router"
         else:
            v = "End Device"
         deviceInList['deviceType'] = v
         deviceInList['chan'] = str(int(event.data['Channel_ID'].hex(), 16 ))
         deviceInList['fwvers'] = event.data['FW_version'][::-1].hex()
         deviceInList['sdpvers'] = event.data['SDP_version'].hex()
         deviceInList['transid'] = str(int(event.data['tranID'].hex(), 16))
         deviceInList['rssi'] = str(int(event.data['rssi'].hex(), 16) - 255)
         deviceInList['temp'] = event.data['int_temp'][::-1].hex()
         deviceInList['humid'] = event.data['int_humid'][::-1].hex()
         deviceInList['port1type'] = event.data['Port1'][::-1].hex()
         deviceInList['port2type'] = event.data['Port2'][::-1].hex()
         deviceInList['port3type'] = event.data['Port3'][::-1].hex()
         deviceInList['port1val'] = event.data['Port1_Reading'][::-1].hex()
         deviceInList['port2val'] = event.data['Port2_Reading'][::-1].hex()
         deviceInList['port3val'] = event.data['Port3_Reading'][::-1].hex()
         deviceInList['port1err'] = ' '
         deviceInList['port2err'] = ' '
         deviceInList['port3err'] = ' '
         deviceInList['ctrlbits'] = str(int(event.data['controlBit'].hex(), 16 ))
         tempstr = str(event.data['downLoadedVersion'].hex())
         spiverstr = tempstr[4]+tempstr[5]+tempstr[2]+tempstr[3]+tempstr[0]+tempstr[1]
         spiverint = str(int(spiverstr,16))
         deviceInList['spiver'] = spiverstr+' ('+spiverint+')'
         deviceInList['flagdata'] = event.data['flags'].hex()
      else:
         newdeviceRec['ieee_address'] = str(event.data['xA'][::-1].hex())
         newdeviceRec['sku'] = str(event.data['SKU'][::-1])
         newdeviceRec['serial'] = event.data['Serial'][::-1]
         mfgdatestr = str(event.data['Mfg_date'][::-1].hex())
         mfgdatecln = mfgdatestr[1]+mfgdatestr[3]+'/'+mfgdatestr[5]+mfgdatestr[7]+'/'+mfgdatestr[9]+mfgdatestr[11]+mfgdatestr[13]+mfgdatestr[15]
         newdeviceRec['mfgdate'] = mfgdatecln #event.data['Mfg_date'][::-1].hex()
         newdeviceRec['hwvers'] = event.data['HW_version'][::-1].hex()
         newdeviceRec['battery'] = str("%1.1f" % (3.45*int(event.data['battery'][::-1].hex(), 16)/2047))
         newdeviceRec['utctime'] = event.data['UTC_Time'][::-1].hex()+' ('+datetime.fromtimestamp(float(str(int(event.data['UTC_Time'][::-1].hex(),16)))).strftime('%Y-%m-%d %H:%M:%S')+')'
         newdeviceRec['manid'] = ManID_holder
         newdeviceRec['status'] = status_holder
         newdeviceRec['laptime'] = 0
         pageNetMon.sdptimertxc.SetBackgroundColour(wx.NullColour)
         newdeviceRec['packageid'] = packageid_holder
         v = int(event.data['deviceType'].hex(), 16)
         if v == 0:
            v = "Coordinator"
         elif v == 1:
            v = "Router"
         else:
            v = "End Device"
         newdeviceRec['deviceType'] = v
         newdeviceRec['chan'] = str(int(event.data['Channel_ID'].hex(), 16 ))
         newdeviceRec['fwvers'] = event.data['FW_version'][::-1].hex()
         newdeviceRec['sdpvers'] = event.data['SDP_version'].hex()
         newdeviceRec['transid'] = str(int(event.data['tranID'].hex(), 16))
         newdeviceRec['rssi'] = str(int(event.data['rssi'].hex(), 16) - 255)
         newdeviceRec['temp'] = event.data['int_temp'][::-1].hex()
         newdeviceRec['humid'] = event.data['int_humid'][::-1].hex()
         newdeviceRec['port1type'] = event.data['Port1'][::-1].hex()
         newdeviceRec['port2type'] = event.data['Port2'][::-1].hex()
         newdeviceRec['port3type'] = event.data['Port3'][::-1].hex()
         newdeviceRec['port1val'] = event.data['Port1_Reading'][::-1].hex()
         newdeviceRec['port2val'] = event.data['Port2_Reading'][::-1].hex()
         newdeviceRec['port3val'] = event.data['Port3_Reading'][::-1].hex()
         newdeviceRec['port1err'] = ' '
         newdeviceRec['port2err'] = ' '
         newdeviceRec['port3err'] = ' '
         newdeviceRec['ctrlbits'] = str(int(event.data['controlBit'].hex(), 16 ))
         newdeviceRec['parentmac'] = ' '
         newdeviceRec['bootldver'] = ' '
         newdeviceRec['hopcount'] = 'ff'
         newdeviceRec['deviceUptime'] = '0'
         newdeviceRec['packetLoss'] = '0'
         newdeviceRec['txCounter'] = '0'
         newdeviceRec['shortAddress'] = '0000'
         newdeviceRec['workingMemory'] = '0'
         tempstr = str(event.data['downLoadedVersion'].hex())
         spiverstr = tempstr[4]+tempstr[5]+tempstr[2]+tempstr[3]+tempstr[0]+tempstr[1]
         spiverint = str(int(spiverstr,16))
         newdeviceRec['spiver'] = spiverstr+' ('+spiverint+')'
         newdeviceRec['flagdata'] = event.data['flags'].hex()
         newdeviceRec['control'] = ' '  #control_holder
         newdeviceRec['pkgtype'] = ' '  #pkgtype_holder
         newdeviceRec['filever'] = ' '  #filever_holder
         joinList.append(newdeviceRec)

      #this is for the data to be pushed to the Redis DB. 
      #since after the above code, we definitely have this node in the list, now put it to DB.
      newdeviceRec = next((item for item in joinList if item["ieee_address"]==str(event.data['xA'][::-1].hex())),None)
      #redisDB.sadd('allSensors', newdeviceRec['ieee_address'])
      #redisDB.zadd(newdeviceRec['ieee_address'], time.time(), newdeviceRec) 

      jsonOUT = open('network.json','w')
      jsonOUT.write(json.dumps(networkJson, sort_keys=True, indent=2))
      jsonOUT.close()
      shutil.copyfile('network.json', 'data/network.json')

   def addMacToList(self, event):
      global joinList
      newdeviceRec = {'ieee_address':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
             'packageid':' ', 'deviceType':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
             'temp':' ', 'humid':' ',
             'port1type':' ', 'port2type':' ', 'port3type':' ',
             'port1val':' ', 'port2val':' ', 'port3val':' ',
             'port1err':' ', 'port2err':' ', 'port3err':' ',
             'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
             'control':' ', 'pkgtype':' ', 'filever':' ', 'bootldver':' ', 'parentmac':' ', 'hopcount':'ff', 'rxLQI':' ', 'txFailure':' ',
             'deviceUptime':'0', 'packetLoss':'0', 'txCounter':'0', 'shortAddress':'0000', 'workingMemory':'0'}

      deviceInList = next((item for item in joinList if item["ieee_address"]==str(event.data['XAddr'][::-1].hex())),None)
      if deviceInList == None:
         newdeviceRec['ieee_address'] = str(event.data['XAddr'][::-1].hex())
         joinList.append(newdeviceRec)

         jsonOUT = open('network.json','w')
         jsonOUT.write(json.dumps(networkJson, sort_keys=True, indent=2))
         jsonOUT.close()
         shutil.copyfile('network.json', 'data/network.json')

   def addCoordToList(self, event):
      global joinList
      for elems in joinList[0]:
         joinList[0][elems] = ' '
      joinList[0]['ieee_address'] = str(event.data['xA'][::-1].hex())
      joinList[0]['laptime'] = 0

      jsonOUT = open('network.json','w')
      jsonOUT.write(json.dumps(networkJson, sort_keys=True, indent=2))
      jsonOUT.close()
      shutil.copyfile('network.json', 'data/network.json')

   def updateDictInList(self, event, packageid_holder, control_holder, pkgtype_holder, filever_holder, ManID_holder):
      global joinList

      deviceInList = next((item for item in joinList if item["ieee_address"]==str(event.data['xA'][::-1].hex())),None)
      if deviceInList != None:
         deviceInList['packageid'] = packageid_holder
         deviceInList['manid'] = ManID_holder
         deviceInList['control'] = control_holder #event.data['CONTROL'].hex()
         deviceInList['pkgtype'] = pkgtype_holder #event.data['PKGTYPE'].hex()
         deviceInList['filever'] = filever_holder #event.data['FILEVER'].hex()

         jsonOUT = open('network.json','w')
         jsonOUT.write(json.dumps(networkJson, sort_keys=True, indent=2))
         jsonOUT.close()
         shutil.copyfile('network.json', 'data/network.json')

#----------------------------------------------------------------------
# This function will take a the new information from an NDP
# Update the current data structure with new information or add a new node.
#
#
   def updateNDPInList(self, deviceType, deviceUptime, ieee_address, packetLoss, txCounter, shortAddress, workingMemory, 
                       parentIEEE, linkRssi, hopCount, blversion, packageid, rxLqi, txFailure):
      global joinList
      global deviceLinks
      newdeviceRec = {'ieee_address':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
             'packageid':' ', 'deviceType':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
             'temp':' ', 'humid':' ',
             'port1type':' ', 'port2type':' ', 'port3type':' ',
             'port1val':' ', 'port2val':' ', 'port3val':' ',
             'port1err':' ', 'port2err':' ', 'port3err':' ',
             'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
             'control':' ', 'pkgtype':' ', 'filever':' ', 'bootldver':' ', 'parentmac':' ', 'hopcount':'ff', 'rxLQI':' ', 'txFailure':' ',
             'deviceUptime':'0', 'packetLoss':'0', 'txCounter':'0', 'shortAddress':'0000', 'workingMemory':'0'}

      newLink = {'ieee_address':0,'parent_ieee_address':' ','rssi':' '} 

      deviceInList = next((item for item in joinList if item["ieee_address"]==ieee_address), None)
      if deviceInList != None:
         deviceInList['parentmac'] = parentIEEE
         deviceInList['deviceUptime'] = deviceUptime
         deviceInList['packetLoss'] = packetLoss
         deviceInList['txCounter'] = txCounter
         deviceInList['shortAddress'] = shortAddress
         deviceInList['workingMemory'] = workingMemory
         deviceInList['hopcount'] = hopCount
         deviceInList['bootldver'] = blversion
         deviceInList['packageid'] = packageid
         deviceInList['rxLQI'] = rxLqi
         deviceInList['txFailure'] = txFailure
         LinkInList = next((item for item in deviceLinks if item["ieee_address"]==ieee_address), None)
         if LinkInList != None:
            LinkInList['parent_ieee_address'] = parentIEEE
            LinkInList['rssi'] = linkRssi
         else:
            newLink['ieee_address'] = ieee_address
            newLink['parent_ieee_address'] = parentIEEE
            newLink['rssi'] = linkRssi

            deviceLinks.append(newLink)

         ##make sure that link is to a valid node

         parentInList = next((item for item in joinList if item["ieee_address"]==parentIEEE), None)
         if parentInList == None:
            newdeviceRec['deviceType'] = "Disconnected"
            newdeviceRec['deviceUptime'] = "0"
            newdeviceRec['ieee_address'] = parentIEEE
            newdeviceRec['packetLoss'] = "ffff"
            newdeviceRec['txCounter'] = "ffff"
            newdeviceRec['shortAddress'] = "ffff"
            newdeviceRec['workingMemory'] = "ffff"
            newdeviceRec['hopcount'] = "ff"
            joinList.append(newdeviceRec)

         jsonOUT = open('network.json','w')
         jsonOUT.write(json.dumps(networkJson, sort_keys=True, indent=2))
         jsonOUT.close()
         shutil.copyfile('network.json', 'data/network.json')

   def removeNodeInformation(self, ieee_address):
      global joinList
      global deviceLinks
      global networkJson
      childList = []
      deviceInList = next((item for item in joinList if item["ieee_address"]==ieee_address), None)
      if deviceInList != None:
         joinList.remove(deviceInList)

      LinkInList = next((item for item in deviceLinks if item["ieee_address"]==ieee_address), None)
      if LinkInList != None:
         deviceLinks.remove(LinkInList)

      for item in deviceLinks[:]:
         if item["parent_ieee_address"]==ieee_address:
            childList.append(item["ieee_address"])
            deviceLinks.remove(item)

      for child in childList:
         for item in deviceLinks[:]:
            if item["parent_ieee_address"]==child:
               childList.append(item["ieee_address"])
               deviceLinks.remove(item)

      jsonOUT = open('network.json','w')
      jsonOUT.write(json.dumps(networkJson, sort_keys=True, indent=2))
      jsonOUT.close()
      shutil.copyfile('network.json', 'data/network.json')

   def format(self, d, tab=0):
      #s = ['{\n']
      s = ['']
      for k,v in d.items():
         if isinstance(v, dict):
            v = self.format(v, tab+1)
         else:
            if k=='transID':
               v = str(int(v.hex(), 16 ))
            if k=='controlBit':
               v = str(int(v.hex(), 16 ))
            elif k=='xA':
               v = v[::-1].hex()
            elif k=='SKU':
               v = v[::-1]
            elif k=='Serial':
               v = v[::-1]
            elif k=='Reboot_Reason':
               v = repr(v)
            elif k=='SDP_version':
               v = v.hex()
            elif k=='Mfg_date':
               v = v[::-1].hex()
            elif k=='UTC_Time':
               v = v[::-1].hex()
            elif k=='downLoadedVersion':
               v = v.hex()
            elif k=='tranID':
               v = v.hex()
            elif k=='flags':
               v = v.hex()
            elif k=='Channel_ID':
               v = str(int(v.hex(), 16 ))
            elif k=='rssi':
               v = int(v.hex(), 16) - 255
            elif k=='int_temp':
               v = v[::-1].hex()
            elif k=='int_humid':
               v = v[::-1].hex()
            elif k=='battery':
               v = int(v[::-1].hex(), 16)
            elif k=='FW_version':
               v = v[::-1].hex()
            elif k=='HW_version':
               v = v[::-1].hex()
            elif k=='Port1':
               v = v[::-1].hex()
            elif k=='Port2':
               v = v[::-1].hex()
            elif k=='Port3':
               v = v[::-1].hex()
            elif k=='Port1_Reading':
               v = v[::-1].hex()
            elif k=='Port2_Reading':
               v = v[::-1].hex()
            elif k=='Port3_Reading':
               v = v[::-1].hex()
            elif k=='XAddr':
               v = v[::-1].hex()
            elif k=='FILEVER':
               v = v[::-1].hex()
            elif k=='CONTROL':
               v = v[::-1].hex()
            elif k=='PKGTYPE':
               v = v[::-1].hex()
            elif k=='MANID':
               v = v[::-1].hex()
            elif k=='PANID':
               v = v[::-1].hex()
            elif k=='Security_key':
               v = v.hex()
            elif k=='deviceUpTime':
               v = int(v[::-1].hex(), 16)
            elif k=='ieee_address':
               v = v[::-1].hex()
               ndp_deviceIEEEAddr = v
            elif k=='parent_ieee_address':
               v = v[::-1].hex()
               ndp_parentIEEEaddr = v
            elif (k=='deviceType'):
               v = int(v.hex(), 16)
               if v == 0:
                  v = "Coordinator"
               elif v == 1:
                  v = "Router"
               elif v == 2:
                  v = "End Device"
               else:
                  v = "End Device"
               #ndp_deviceType = v
            elif k=='workingMemory':
               v = int(v[::-1].hex(), 16)
               ndp_workingMemory = v
            elif k=='packetLoss':
               v = int(v[::-1].hex(), 16)
               ndp_packetLoss = v
            elif k=='txCounter':
               v = int(v.hex(), 16)
               ndp_txCounter = v
            elif k=='txFailure':
               v = int(v[::-1].hex(), 16)
               ndp_txFailure = v
            elif k=='rxLQI':
               v = int(v.hex(), 16)
               ndp_rxLQI = v
            elif k=='parent_sA':
               v = "0x"+v[::-1].hex()
            elif k=='sA':
               v = "0x"+v[::-1].hex()
               ndp_shortAddress = v
            elif k=='bl_version':
               v = v.hex()
               ndp_blversion = v
            elif k=='hopCount':
               v = v.hex()
               ndp_hopcount = v
            elif k=='neighbors':
               v = v[::-1].hex()
            else: # this is the default function
               v = repr(v)
         s.append('%s%r: %s,\n' % ('  '*tab, k, v)) #itemilze all fields, good for debug
         #s.append('%s:' % (v)) #simplified display and debug info
      #s.append('%s}' % ('  '*tab))
      return ''.join(s)

   def OnSerialRead(self, event):
      global fileCounter
      global pageNetMon
      global commishList
      global orphanList
      global rogueList
      global removeList
      global openJoin
      global tmpcommishList
      global seWSNsb
      global root
      global ManID_holder
      global packageid_holder
      global status_holder
      global commishRedraw
      global temperaturefile
      global tb
      global gmaxsize
      global gtotalBlocks
      """Handle input from the serial port."""
      id = event.data['id']
      packageid_holder = id
      print(self.format(event.data))
      #text = str(event.data)
      text = self.format(event.data)
      if self.settings.unprintable:
         text = ''.join([(c >= ' ') and c or '<%d>' % ord(c)  for c in text])
      if id == 'PANID':
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
      elif id == 'STATUS':
         if event.data['Reboot_Reason'] == '"':
            event.data['Reboot_Reason'] = "Cold Shot"
         elif event.data['Reboot_Reason'] == '!':
            event.data['Reboot_Reason'] = "OTA Remote Command"
         elif event.data['Reboot_Reason'] == '#':
            event.data['Reboot_Reason'] = "OTW Remove Node"
         elif event.data['Reboot_Reason'] == b"\x24":
            event.data['Reboot_Reason'] = "Remove Node Success"
         elif event.data['Reboot_Reason'] == b"\x25":
            event.data['Reboot_Reason'] = "Remove Node Failed"
         elif event.data['Reboot_Reason'] == b"\x26":
            event.data['Reboot_Reason'] = "Node Not Found"
         elif event.data['Reboot_Reason'] == b"\x27":
            event.data['Reboot_Reason'] = "Remove Node List Full"
         elif event.data['Reboot_Reason'] == b"\x28":
            event.data['Reboot_Reason'] = "!CANNOT REMOVE ZC!"
         elif event.data['Reboot_Reason'] == b"\x19":
            event.data['Reboot_Reason'] = "Status OK"
         elif event.data['Reboot_Reason'] == b"\x16":
            event.data['Reboot_Reason'] = "Hot Shot Received"
         elif event.data['Reboot_Reason'] == b"\x17":
            event.data['Reboot_Reason'] = "ZC_ASYNC_HELLO_STATUS"
            tb.OTAswitchchoice.SetSelection(0)
         elif event.data['Reboot_Reason'] == b"\x30":
            event.data['Reboot_Reason'] = "Cannot Form Network"
         elif event.data['Reboot_Reason'] == b"\x20":
            event.data['Reboot_Reason'] = "OTW Remote Command"
         else:
            event.data['Reboot_Reason'] = "Unknown Code"+' '+event.data['Reboot_Reason'].hex()
         text = self.format(event.data)
         status_holder = event.data['Reboot_Reason']
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
         if openJoin:
            if joinList[0]['ieee_address'] == 0:
               self.addCoordToList(event)
               commishList.append(str(event.data['xA'][::-1].hex()))
               commishRedraw = True
               root = pageNetMon.tree_ctrl.AddRoot('ZC-'+str(event.data['xA'][::-1].hex()))
               pageNetMon.tree_ctrl.SelectItem(root, True)
               statusbarframe.SetStatusText('0'+" nodes connected to "+str(event.data['xA'][::-1].hex()))
         else: #not openJoin
            if str(event.data['xA'][::-1].hex()) in commishList:
               if joinList[0]['ieee_address'] == 0:
                  self.addCoordToList(event)
                  root = pageNetMon.tree_ctrl.AddRoot('ZC-'+str(event.data['xA'][::-1].hex()))
                  pageNetMon.tree_ctrl.SelectItem(root, True)
                  statusbarframe.SetStatusText('0'+" nodes connected to "+str(event.data['xA'][::-1].hex()))
            else:
               #this is the coordinator
               if joinList[0]['ieee_address'] == 0:
                  self.addCoordToList(event)
                  root = pageNetMon.tree_ctrl.AddRoot('ZC-'+str(event.data['xA'][::-1].hex()))
                  pageNetMon.tree_ctrl.SelectItem(root, True)
                  statusbarframe.SetStatusText('0'+" nodes connected to "+str(event.data['xA'][::-1].hex())+", NOT IN COMMISSOIN LIST!")
         joinList[0]['status'] = status_holder+' '+str(event.data['Serial'][7::-1].hex())
         status_node_mac = str(event.data['Serial'][7::-1].hex())
         xtreeItem = pageNetMon.tree_ctrl.GetSelection()
         xtreeItemText = pageNetMon.tree_ctrl.GetItemText(xtreeItem)
         selctedDeviceInList = next((item for item in joinList if item["ieee_address"]==xtreeItemText[3:]),None)
         if selctedDeviceInList != None:
            selctedDeviceInList['status'] = status_holder+' '+str(event.data['Serial'][7::-1].hex())
         if xtreeItemText[3:] != status_node_mac:
            if status_holder == "Remove Node Success":
               theroot = pageNetMon.tree_ctrl.GetRootItem()
               theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
               while theitem.IsOk():
                  if pageNetMon.tree_ctrl.GetItemText(theitem)[3:] == status_node_mac:
                     pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.RED)
                     self.removeNodeInformation(status_node_mac)
                     pageNetMon.tree_ctrl.Delete(theitem)
                     for mac in commishList:
                        if status_node_mac == mac:
                           commishList.remove(mac)
                           commishRedraw = True
                     break
                  theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)
               if len(removeList) != 0:
                  mac = removeList.pop()
                  if mac != None:
                     self.OnSendRemovePerMac(mac)
                     #removeList.remove(mac)
         else:
            if status_holder == "Remove Node Success":
               #remove from commission list
               pageNetMon.tree_ctrl.SetItemBackgroundColour(xtreeItem, wx.RED)
               self.removeNodeInformation(xtreeItemText[3:])
               pageNetMon.tree_ctrl.Delete(xtreeItem)
               for mac in commishList:
                  if xtreeItemText[3:] == mac:
                     commishList.remove(mac)
                     commishRedraw = True
               if len(removeList) != 0:
                  mac = removeList.pop()
                  if mac != None:
                     self.OnSendRemovePerMac(mac)
                     #removeList.remove(mac)
         if not openJoin:
            pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
         if commishRedraw:
            commishRedraw = False
            pageNetMon.tc_commish_list.Clear()
            for eachComm in commishList:
               if eachComm != '':
                  pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
         #if not openJoin:
         pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
         status_holder = ' '
         self.UpdateStatusDisplay(None)
      elif id == 'SJOIN_REQ':
         self.XAddr = event.data['XAddr']
         if not openJoin:
            if str(event.data['XAddr'][::-1].hex()) in commishList:
               #if there is no coordinator
               if joinList[0]['ieee_address'] == 0:
                  #if this is the coordinator
                  if str(event.data['xA'][::-1].hex()) == str(event.data['XAddr'][::-1].hex()):
                     self.OnSendSJoinAccept(id)
                     text += "SEND SJOIN ACCEPT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     self.addCoordToList(event)
                     root = pageNetMon.tree_ctrl.AddRoot('ZC-'+str(event.data['XAddr'][::-1].hex()))
                     pageNetMon.tree_ctrl.SelectItem(root, True)
                     statusbarframe.SetStatusText('0'+" nodes connected to "+joinList[0]['ieee_address'])
                  else:
                     self.OnSendSJoinReject(id)
                     text += "SEND SJOIN REJECT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     if str(event.data['XAddr'][::-1].hex()) not in rogueList:
                        rogueList.append(str(event.data['XAddr'][::-1].hex()))
                        pageNetMon.tc_rogue_list.Clear()
                        for eachrogue in rogueList:
                           pageNetMon.tc_rogue_list.AppendText(eachrogue + "\r\n")
               else:
                  self.OnSendSJoinAccept(id)
                  text += "SEND SJOIN ACCEPT"
                  self.UpdatePageTerminal("\r\n")
                  self.UpdatePageTerminal(text)
                  self.UpdatePageTerminal("\r\n")
                  sdeviceInList = next((item for item in joinList if item["ieee_address"]==str(event.data['XAddr'][::-1].hex())),None)
                  self.addMacToList(event)  #Adds XAddr to list
                  if sdeviceInList == None:
                     oldroot = pageNetMon.tree_ctrl.GetRootItem()
                     item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'XX-'+str(event.data['XAddr'][::-1].hex()))
                     if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                        pageNetMon.tree_ctrl.Expand(oldroot)
                  else:
                     theroot = pageNetMon.tree_ctrl.GetRootItem()
                     theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
                     while theitem.IsOk():
                        if pageNetMon.tree_ctrl.GetItemText(theitem)[3:] == sdeviceInList["ieee_address"]:
                           pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.WHITE)
                           break
                        theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)
                  statusbarframe.SetStatusText(str(len(joinList)-1)+" nodes connected to "+joinList[0]['ieee_address'])

            else:
               #if there is no coordinator
               if joinList[0]['ieee_address'] == 0:
                  #if this is the coordinator
                  if str(event.data['xA'][::-1].hex()) == str(event.data['XAddr'][::-1].hex()):
                     commishList.append(str(event.data['XAddr'][::-1].hex()))
                     self.OnSendSJoinAccept(id)
                     text += "SEND SJOIN ACCEPT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     self.addCoordToList(event)
                     root = pageNetMon.tree_ctrl.AddRoot('ZC-'+str(event.data['XAddr'][::-1].hex()))
                     pageNetMon.tree_ctrl.SelectItem(root, True)
                     statusbarframe.SetStatusText('0'+" nodes connected to "+str(event.data['xA'][::-1].hex())+", NOT IN COMMISSOIN LIST!")
                     pageNetMon.tc_commish_list.Clear()
                     pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
                     for eachComm in commishList:
                        if eachComm != '':
                           pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
                     pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
                  else:
                     self.OnSendSJoinReject(id)
                     text += "SEND SJOIN REJECT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     if str(event.data['XAddr'][::-1].hex()) not in rogueList:
                        rogueList.append(str(event.data['XAddr'][::-1].hex()))
                        pageNetMon.tc_rogue_list.Clear()
                        for eachrogue in rogueList:
                           pageNetMon.tc_rogue_list.AppendText(eachrogue + "\r\n")
               else:
                  self.OnSendSJoinReject(id)
                  text += "SEND SJOIN REJECT"
                  self.UpdatePageTerminal("\r\n")
                  self.UpdatePageTerminal(text)
                  self.UpdatePageTerminal("\r\n")
                  if str(event.data['XAddr'][::-1].hex()) not in rogueList:
                     rogueList.append(str(event.data['XAddr'][::-1].hex()))
                     pageNetMon.tc_rogue_list.Clear()
                     for eachrogue in rogueList:
                        pageNetMon.tc_rogue_list.AppendText(eachrogue + "\r\n")

         else: #openJoin
            if str(event.data['XAddr'][::-1].hex()) not in commishList:
               commishList.append(str(event.data['XAddr'][::-1].hex()))
               if joinList[0]['ieee_address'] == 0:
                  if str(event.data['xA'][::-1].hex()) == str(event.data['XAddr'][::-1].hex()):
                     self.OnSendSJoinAccept(id)
                     text += "SEND SJOIN ACCEPT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     self.addCoordToList(event)
                     root = pageNetMon.tree_ctrl.AddRoot('ZC-'+str(event.data['XAddr'][::-1].hex()))
                     pageNetMon.tree_ctrl.SelectItem(root, True)
                     statusbarframe.SetStatusText('0'+" nodes connected to "+joinList[0]['ieee_address'])
                  else:
                     self.OnSendSJoinReject(id)
                     text += "SEND SJOIN REJECT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     if str(event.data['XAddr'][::-1].hex()) not in rogueList:
                        rogueList.append(str(event.data['XAddr'][::-1].hex()))
                        pageNetMon.tc_rogue_list.Clear()
                        for eachrogue in rogueList:
                           pageNetMon.tc_rogue_list.AppendText(eachrogue + "\r\n")

               else:
                  self.OnSendSJoinAccept(id)
                  text += "SEND SJOIN ACCEPT"
                  self.UpdatePageTerminal("\r\n")
                  self.UpdatePageTerminal(text)
                  self.UpdatePageTerminal("\r\n")
                  sdeviceInList = next((item for item in joinList if item["ieee_address"]==str(event.data['XAddr'][::-1].hex())),None)
                  self.addMacToList(event)  #Adds XAddr to list
                  if sdeviceInList == None:
                     oldroot = pageNetMon.tree_ctrl.GetRootItem()
                     item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'XX-'+str(event.data['XAddr'][::-1].hex()))
                     statusbarframe.SetStatusText(str(len(joinList)-1)+" nodes connected to "+joinList[0]['ieee_address'])
                     if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                        pageNetMon.tree_ctrl.Expand(oldroot)
                  else:
                     theroot = pageNetMon.tree_ctrl.GetRootItem()
                     theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
                     while theitem.IsOk():
                        if pageNetMon.tree_ctrl.GetItemText(theitem)[3:] == sdeviceInList["ieee_address"]:
                           pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.WHITE)
                           break
                        theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)
               pageNetMon.tc_commish_list.Clear()
               for eachComm in commishList:
                  if eachComm != '':
                     pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
            else:
               if joinList[0]['ieee_address'] == 0:
                  if str(event.data['xA'][::-1].hex()) == str(event.data['XAddr'][::-1].hex()):
                     self.OnSendSJoinAccept(id)
                     text += "SEND SJOIN ACCEPT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     self.addCoordToList(event)
                     root = pageNetMon.tree_ctrl.AddRoot('ZC-'+str(event.data['XAddr'][::-1].hex()))
                     pageNetMon.tree_ctrl.SelectItem(root, True)
                     statusbarframe.SetStatusText('0'+" nodes connected to "+joinList[0]['ieee_address'])
               else:
                  self.OnSendSJoinAccept(id)
                  text += "SEND SJOIN ACCEPT"
                  self.UpdatePageTerminal("\r\n")
                  self.UpdatePageTerminal(text)
                  self.UpdatePageTerminal("\r\n")                                    
      elif id == 'Query_Next_Package_REQ':
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
         self.OnSendQNPResponse(event)
         text = "SEND QNP Response"
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")

         ManID_holder = str(event.data['MANID'][::-1].hex())
         control_holder = str(event.data['CONTROL'].hex())
         pkgtype_temp = str(event.data['PKGTYPE'].hex())
         pkgtype_holder = pkgtype_temp[2]+pkgtype_temp[3]+pkgtype_temp[0]+pkgtype_temp[1]
         tempstr = str(event.data['FILEVER'].hex())
         fileverstr = tempstr[6]+tempstr[7]+tempstr[4]+tempstr[5]+tempstr[2]+tempstr[3]+tempstr[0]+tempstr[1]
         filever_holder = fileverstr #str(event.data['FILEVER'].hex())
         self.updateDictInList(event, packageid_holder, control_holder, pkgtype_holder, filever_holder, ManID_holder)
         xtreeItem = pageNetMon.tree_ctrl.GetSelection()
         if xtreeItem.IsOk():
            xtreeItemText = pageNetMon.tree_ctrl.GetItemText(xtreeItem)
            if xtreeItemText[3:] == str(event.data['xA'][::-1].hex()):
               self.UpdateStatusDisplay(event)

      elif id == 'Package_Block_REQ':
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
         ManID_holder = str(event.data['MANID'][::-1].hex())
         control_holder = str(event.data['CONTROL'].hex())
         pkgtype_holder = str(event.data['PKGTYPE'].hex())
         tempstr = str(event.data['FILEVER'].hex())
         pktype = event.data['PKGTYPE'] #just this part. 
         offset = event.data['OFFSET']
         imaxsize = event.data['MAX_BLOCK_SIZE']
         if int(str(event.data['MAX_BLOCK_SIZE'].hex()),16) > gmaxsize:
            gmaxsize = int(str(event.data['MAX_BLOCK_SIZE'].hex()),16)
         version = event.data['FILEVER']
         otafilestr = tb.OTAfile1txc.GetLineText(0)
         if otafilestr != None and otafilestr != '':
            gtotalBlocks -= 1
            tb.OTAprog1txc.Clear()
            tb.OTAprog1txc.AppendText(str(gtotalBlocks))

            self.OnSendPKGBlockResponse(id, pktype, offset, imaxsize, version, otafilestr)
            text = "SEND PKG Block Response"
         else:
             text = "PKG Block Response not sent"
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
         fileverstr = tempstr[6]+tempstr[7]+tempstr[4]+tempstr[5]+tempstr[2]+tempstr[3]+tempstr[0]+tempstr[1]
         filever_holder = fileverstr #str(event.data['FILEVER'].hex())
         self.updateDictInList(event, packageid_holder, control_holder, pkgtype_holder, filever_holder, ManID_holder)
         xtreeItem = pageNetMon.tree_ctrl.GetSelection()
         if xtreeItem.IsOk():
            xtreeItemText = pageNetMon.tree_ctrl.GetItemText(xtreeItem)
            if xtreeItemText[3:] == str(event.data['xA'][::-1].hex()):
               self.UpdateStatusDisplay(event)
      elif id == 'Package_End_REQ':
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
         ManID_holder = str(event.data['MANID'][::-1].hex())
         control_holder = str(event.data['CONTROL'].hex())
         pkgtype_holder = str(event.data['PKGTYPE'].hex())
         self.OnSendPEResponse(event)
         tempstr = str(event.data['FILEVER'].hex())
         fileverstr = tempstr[6]+tempstr[7]+tempstr[4]+tempstr[5]+tempstr[2]+tempstr[3]+tempstr[0]+tempstr[1]
         filever_holder = fileverstr #str(event.data['FILEVER'].hex())
         self.updateDictInList(event, packageid_holder, control_holder, pkgtype_holder, filever_holder, ManID_holder)
         xtreeItem = pageNetMon.tree_ctrl.GetSelection()
         if xtreeItem.IsOk():
            xtreeItemText = pageNetMon.tree_ctrl.GetItemText(xtreeItem)
            if xtreeItemText[3:] == str(event.data['xA'][::-1].hex()):
               self.UpdateStatusDisplay(event)
      elif id == 'TIME_REQ':
         self.OnSendTimeResponse(id)
         text = "SEND TIME_REQ Response"
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
      elif id == 'SDP':
         self.UpdatePageTerminal("\r\n")
         s = str(datetime.now())
         self.UpdatePageTerminal(s)
         self.UpdatePageTerminal("----")
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("----")
         self.UpdatePageTerminal(str(int(event.data['transID'].hex(), 16)))
         self.UpdatePageTerminal("----   ")
         self.UpdatePageTerminal(str("%1.1f" % (3.45*int(event.data['battery'][::-1].hex(), 16)/2047)))
         self.UpdatePageTerminal(" Volt")
         self.UpdatePageTerminal("---    ")
         self.UpdatePageTerminal(str(int(event.data['rssi'].hex(), 16) - 255))
         self.UpdatePageTerminal(" db")
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")

         if event.data['SKU'] == 'NBPD0180':
            dt = int(event.data['deviceType'].hex(), 16)
            if dt == 0:
               dt = "Coordinator"
            elif dt == 1:
               dt = "Router"
            else:
               dt = "End Device"
            tempflt2 = self.ADC_TempConversion(int(event.data['int_temp'][::-1].hex(), 16), dt, True)
         else:
            tempflt2 = self.ADC_TempConversionSMT(int(event.data['int_temp'][::-1].hex(), 16))
         tempstr2 = "{:.1f}".format(tempflt2)
         batterystr = str("%1.1f" % (3.45*int(event.data['battery'][::-1].hex(), 16)/2047))
         temperaturefile.write(str(event.data['xA'][::-1].hex())+", "+tempstr2+", "+batterystr+", "+str(event.data['UTC_Time'][::-1].hex())+"\n")
         #temperaturefile.write(str(event.data['xA'][::-1].hex())+", "+tempstr2+", "+str(event.data['UTC_Time'][::-1].hex())+"\n")
         #temperaturefile.write(str(event.data['xA'][::-1].hex())+", "+tempstr2+", "+str(event.data['UTC_Time'][::-1].hex())+"\n")
         #temperaturefile.write(str(event.data['xA'][::-1].hex())+", "+tempstr2+", "+str(event.data['UTC_Time'][::-1].hex())+"\n")
         #temperaturefile.write(str(event.data['xA'][::-1].hex())+", "+tempstr2+", "+str(event.data['UTC_Time'][::-1].hex())+"\n")
         #temperaturefile.write(str(event.data['xA'][::-1].hex())+", "+tempstr2+", "+str(event.data['UTC_Time'][::-1].hex())+"\n")

         if joinList[0]['ieee_address'] != 0:
            if not openJoin:
               if str(event.data['xA'][::-1].hex()) in commishList:
                  if int(event.data['controlBit'].hex(), 16 ) & 0x01:
                     self.OnSendCriticalAck(event)
                  sdeviceInList = next((item for item in joinList if item["ieee_address"]==str(event.data['xA'][::-1].hex())),None)
                  self.addDictToList(event)  #Adds or updates xA to list
                  if sdeviceInList == None:
                     oldroot = pageNetMon.tree_ctrl.GetRootItem()
                     if int(event.data['deviceType'].hex(), 16) == 1:
                        item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'ZR-'+str(event.data['xA'][::-1].hex()))
                     elif int(event.data['deviceType'].hex(), 16) == 2:
                        item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'ED-'+str(event.data['xA'][::-1].hex()))
                     if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                        pageNetMon.tree_ctrl.Expand(oldroot)
                  else:
                     theroot = pageNetMon.tree_ctrl.GetRootItem()
                     if pageNetMon.tree_ctrl.GetItemText(theroot)[3:] == sdeviceInList["ieee_address"]:
                        pageNetMon.tree_ctrl.SetItemBackgroundColour(theroot, wx.WHITE)
                     else:
                        theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
                        while theitem.IsOk():
                           if pageNetMon.tree_ctrl.GetItemText(theitem)[3:] == sdeviceInList["ieee_address"]:
                              if pageNetMon.tree_ctrl.GetItemText(theitem)[:2] == 'XX':
                                 if int(event.data['deviceType'].hex(), 16) == 1:
                                    pageNetMon.tree_ctrl.SetItemText(theitem, 'ZR-'+sdeviceInList["ieee_address"])
                                 elif int(event.data['deviceType'].hex(), 16) == 2:
                                    pageNetMon.tree_ctrl.SetItemText(theitem, 'ED-'+sdeviceInList["ieee_address"])
                              pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.WHITE)
                              break
                           theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)
                        if not theitem.IsOk():
                           oldroot = pageNetMon.tree_ctrl.GetRootItem()
                           if int(event.data['deviceType'].hex(), 16) == 1:
                              item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'ZR-'+str(event.data['xA'][::-1].hex()))
                           elif int(event.data['deviceType'].hex(), 16) == 2:
                              item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'ED-'+str(event.data['xA'][::-1].hex()))
                           if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                              pageNetMon.tree_ctrl.Expand(oldroot)
                           
                  statusbarframe.SetStatusText(str(len(joinList)-1)+" nodes connected to "+joinList[0]['ieee_address'])
               else:
                  theroot = pageNetMon.tree_ctrl.GetRootItem()
                  if pageNetMon.tree_ctrl.GetItemText(theroot) == str(event.data['xA'][::-1].hex()):
                     pageNetMon.tree_ctrl.SetItemBackgroundColour(theroot, wx.WHITE)
                     commishList.append(str(event.data['xA'][::-1].hex()))
                     pageNetMon.tc_commish_list.Clear()
                     pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
                     for eachComm in commishList:
                        if eachComm != '':
                           pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
                     pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
                     sdeviceInList = next((item for item in joinList if item["ieee_address"]==str(event.data['xA'][::-1].hex())),None)
                     self.addDictToList(event)  #Adds or updates xA to list
                  else:
                     if str(event.data['xA'][::-1].hex()) not in orphanList:
                        orphanList.append(str(event.data['xA'][::-1].hex()))
                        pageNetMon.tc_orphan_list.Clear()
                        for eachOrph in orphanList:
                           pageNetMon.tc_orphan_list.AppendText(eachOrph + "\r\n")
            else:  #open join
               if int(event.data['controlBit'].hex(), 16 ) & 0x01:
                  self.OnSendCriticalAck(event)
               if joinList[0]['ieee_address'] == 0:
                  if int(event.data['deviceType'].hex(), 16) == 0:   #Coordinator
                     self.addCoordToList(event)
                     root = pageNetMon.tree_ctrl.AddRoot('ZC-'+str(event.data['xA'][::-1].hex()))
                     pageNetMon.tree_ctrl.SelectItem(root, True)
                     statusbarframe.SetStatusText('0'+" nodes connected to "+joinList[0]['ieee_address'])
                     if str(event.data['xA'][::-1].hex()) not in commishList:
                        commishList.append(str(event.data['xA'][::-1].hex()))
                        pageNetMon.tc_commish_list.Clear()
                        for eachComm in commishList:
                           if eachComm != '':
                              pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
                  elif str(event.data['xA'][::-1].hex()) not in orphanList:
                     orphanList.append(str(event.data['xA'][::-1].hex()))
                     pageNetMon.tc_orphan_list.Clear()
                     for eachOrph in orphanList:
                        pageNetMon.tc_orphan_list.AppendText(eachOrph + "\r\n")
               else:
                  if str(event.data['xA'][::-1].hex()) not in commishList:
                     commishList.append(str(event.data['xA'][::-1].hex()))
                     sdeviceInList = next((item for item in joinList if item["ieee_address"]==str(event.data['xA'][::-1].hex())),None)
                     self.addDictToList(event)  #Adds or updates xA to list
                     if sdeviceInList == None:
                        oldroot = pageNetMon.tree_ctrl.GetRootItem()
                        if oldroot.IsOk():
                           if int(event.data['deviceType'].hex(), 16) == 1:
                              item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'ZR-'+str(event.data['xA'][::-1].hex()))
                           elif int(event.data['deviceType'].hex(), 16) == 2:
                              item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'ED-'+str(event.data['xA'][::-1].hex()))
                           if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                              pageNetMon.tree_ctrl.Expand(oldroot)
                     else:
                        theroot = pageNetMon.tree_ctrl.GetRootItem()
                        if theroot.IsOk():
                           if pageNetMon.tree_ctrl.GetItemText(theroot)[3:] == sdeviceInList["ieee_address"]:
                              pageNetMon.tree_ctrl.SetItemBackgroundColour(theroot, wx.WHITE)
                           else:
                              theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
                              while theitem.IsOk():
                                 if pageNetMon.tree_ctrl.GetItemText(theitem)[3:] == sdeviceInList["ieee_address"]:
                                    if pageNetMon.tree_ctrl.GetItemText(theitem)[:2] == 'XX':
                                       if int(event.data['deviceType'].hex(), 16) == 1:
                                          pageNetMon.tree_ctrl.SetItemText(theitem, 'ZR-'+sdeviceInList["ieee_address"])
                                       elif int(event.data['deviceType'].hex(), 16) == 2:
                                          pageNetMon.tree_ctrl.SetItemText(theitem, 'ED-'+sdeviceInList["ieee_address"])
                                    pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.WHITE)
                                    break
                                 theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)
                              if not theitem.IsOk():
                                 oldroot = pageNetMon.tree_ctrl.GetRootItem()
                                 if int(event.data['deviceType'].hex(), 16) == 1:
                                    item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'ZR-'+str(event.data['xA'][::-1].hex()))
                                 elif int(event.data['deviceType'].hex(), 16) == 2:
                                    item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'ED-'+str(event.data['xA'][::-1].hex()))
                                 if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                                    pageNetMon.tree_ctrl.Expand(oldroot)

                        else:
                           if int(event.data['deviceType'].hex(), 16) == 0:
                              root = pageNetMon.tree_ctrl.AddRoot('ZC-'+sdeviceInList["ieee_address"])
                              pageNetMon.tree_ctrl.SelectItem(root, True)

                     statusbarframe.SetStatusText(str(len(joinList)-1)+" nodes connected to "+joinList[0]['ieee_address'])
                     pageNetMon.tc_commish_list.Clear()
                     for eachComm in commishList:
                        if eachComm != '':
                           pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
                  else:
                     sdeviceInList = next((item for item in joinList if item["ieee_address"]==str(event.data['xA'][::-1].hex())),None)
                     self.addDictToList(event)  #Adds or updates xA to list
                     if sdeviceInList == None:
                        oldroot = pageNetMon.tree_ctrl.GetRootItem()
                        if int(event.data['deviceType'].hex(), 16) == 1:
                           item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'ZR-'+str(event.data['xA'][::-1].hex()))
                        elif int(event.data['deviceType'].hex(), 16) == 2:
                           item = pageNetMon.tree_ctrl.AppendItem(oldroot, 'ED-'+str(event.data['xA'][::-1].hex()))
                        statusbarframe.SetStatusText(str(len(joinList)-1)+" nodes connected to "+joinList[0]['ieee_address'])
                        if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                           pageNetMon.tree_ctrl.Expand(oldroot)

                     else:
                        theroot = pageNetMon.tree_ctrl.GetRootItem()
                        if pageNetMon.tree_ctrl.GetItemText(theroot)[3:] == sdeviceInList["ieee_address"]:
                           pageNetMon.tree_ctrl.SetItemBackgroundColour(theroot, wx.WHITE)
                        else:
                           theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
                           while theitem.IsOk():
                              if pageNetMon.tree_ctrl.GetItemText(theitem)[3:] == sdeviceInList["ieee_address"]:
                                 if pageNetMon.tree_ctrl.GetItemText(theitem)[:2] == 'XX':
                                    if int(event.data['deviceType'].hex(), 16) == 1:
                                       pageNetMon.tree_ctrl.SetItemText(theitem, 'ZR-'+sdeviceInList["ieee_address"])
                                    elif int(event.data['deviceType'].hex(), 16) == 2:
                                       pageNetMon.tree_ctrl.SetItemText(theitem, 'ED-'+sdeviceInList["ieee_address"])
                                 pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.WHITE)
                                 break
                              theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)

         xtreeItem = pageNetMon.tree_ctrl.GetSelection()
         if xtreeItem.IsOk():
            xtreeItemText = pageNetMon.tree_ctrl.GetItemText(xtreeItem)
            if xtreeItemText[3:] == str(event.data['xA'][::-1].hex()):
               self.UpdateStatusDisplay(event)

      elif id == 'NDP':
         s = str(datetime.now())

         self.UpdatePageTerminal(s)
         self.UpdatePageTerminal("----")
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("----")
         self.UpdatePageTerminal(str(int(event.data['transID'].hex(), 16)))
         self.UpdatePageTerminal("----   ")
         self.UpdatePageTerminal(str(int(event.data['rxLQI'].hex(), 16)))
         self.UpdatePageTerminal(" db")
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")

         #----------------------------------------

         ndp_txFailure = str(event.data['txFailure'].encode('hex'))
         ndp_deviceUptime = str(event.data['deviceUpTime'][::-1].encode('hex'))
         ndp_deviceIEEEAddr = str(event.data['ieee_address'][::-1].encode('hex'))
         ndp_packetLoss = str(event.data['packetLoss'][::-1].encode('hex'))
         ndp_txCounter = str(event.data['txCounter'][::-1].encode('hex'))
         ndp_shortAddress = str(event.data['sA'][::-1].encode('hex'))
         ndp_workingMemory = str(event.data['workingMemory'][::-1].encode('hex'))
         ndp_parentIEEEaddr = str(event.data['parent_ieee_address'][::-1].encode('hex'))
         ndp_rxLQI = str(int(event.data['rxLQI'].hex(), 16))
         ndp_blversion = str(event.data['bl_version'].hex())[:6]
         ndp_hopCount = str(event.data['hopCount'].hex())

         if joinList[0]['ieee_address'] != 0:
            ndeviceInList = next((item for item in joinList if item["ieee_address"]==ndp_deviceIEEEAddr),None)
            if ndeviceInList != None:
               self.updateNDPInList(ndeviceInList['deviceType'], ndp_deviceUptime, ndp_deviceIEEEAddr, ndp_packetLoss, ndp_txCounter,
                                    ndp_shortAddress, ndp_workingMemory, ndp_parentIEEEaddr, ndeviceInList['rssi'], ndp_hopCount,
                                    ndp_blversion, packageid_holder, ndp_rxLQI, ndp_txFailure)
               ntreeItem = pageNetMon.tree_ctrl.GetSelection()
               if ntreeItem.IsOk():
                  ntreeItemText = pageNetMon.tree_ctrl.GetItemText(ntreeItem)
                  if ntreeItemText[3:] == ndp_deviceIEEEAddr:
                     self.UpdateStatusDisplay(event)

      else:
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")

   def ComPortArgusThread(self):
      # thread that will handle the serial traffic using xbee intrepreter.
      while self.alive.isSet():
         try:
            print("start XBee interpreter")
            text = self.Argus.wait_read_frame()
            print(text)
         except KeyboardInterrupt:
            break
         event = SerialRxEvent(self.GetId(), text)
         self.GetEventHandler().AddPendingEvent(event)

   def ComPortThread(self):
      """Thread that handles serial port reading with improved error handling."""
      while self.thread:
         if self.is_port_open():
            data = self.safe_read()
            if data:
               evt = SerialRxEvent(self.GetId(), data)
               wx.PostEvent(self, evt)
         time.sleep(0.01)  # Small delay to prevent CPU hogging

   def OnHelp(self, event):
      """Menu point Help menu. Show the help dialog"""
      message = "Version Information:\n\nseWSNView.py      : 0.0.3.01\nCompany Name   : Schneider Electric\nComments            : Engineering Release\nLegal Copyright    : Copyright (C) 2014"
      dialog = wx.MessageDialog(self, message, caption="Help About", style = wx.OK, pos=wx.DefaultPosition)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnSendQNPResponse(self, event):
      global tb
      StatusReq = bytearray()
      StatusReq.extend(b'\xFE')  # header
      StatusReq.extend(b'\x0e')  # command length
      StatusReq.extend(b'\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00')
      StatusReq.extend(b'\x1b')  # command ID
      
      filename = tb.OTAfile1txc.GetLineText(0)
      if filename is None or filename == '':
         StatusReq.extend(b'\x00')  # control bits: 01 - get a file, 00 - no file
         StatusReq.extend(b'\xf4\xc4')  # man ID
         
         # Check if this is a CommandEvent (menu click) or SerialRxEvent (has data)
         if hasattr(event, 'data') and 'PKGTYPE' in event.data and 'FILEVER' in event.data:
            # It's a SerialRxEvent with data
            pktpstr = bytes.fromhex(event.data['PKGTYPE']) if isinstance(event.data['PKGTYPE'], str) else event.data['PKGTYPE']
            StatusReq.extend(pktpstr)
            flvrstr = bytes.fromhex(event.data['FILEVER']) if isinstance(event.data['FILEVER'], str) else event.data['FILEVER']
            StatusReq.extend(flvrstr)
         else:
            # It's a CommandEvent (menu click) - use default values
            StatusReq.extend(b'\x01\x11')  # Default package type
            StatusReq.extend(b'\x01\x00\x00\x00')  # Default file version
            
         StatusReq.extend(b'\x00\x5c\xea\x02')  # file length
      else:
         StatusReq.extend(b'\x01')  # control bits: 01 - get a file, 00 - no file
         result_list = imageInfo(filename)
         StatusReq.extend(pack('<H', result_list[1]))  # man ID
         StatusReq.extend(pack('<H', result_list[2]))  # package ID
         StatusReq.extend(pack('<I', result_list[3]))  # file version
         StatusReq.extend(pack('<I', result_list[5]))  # file size
      StatusReq.extend(self.checksum(bytes(StatusReq)))
      inspect(StatusReq)
      if self.safe_write(StatusReq):
         self.UpdatePageTerminal("\n ====> QNP Request Responded\n")
         self.UpdatePageTerminal("\n")
         self.UpdatePageTerminal(StatusReq.hex())
         self.UpdatePageTerminal("\n")

   def OnSendRemoveNode(self, event):
      """Placeholder for Remove Node menu action. Implement functionality as needed."""
      wx.MessageBox("Remove Node functionality not yet implemented.", "Info", wx.OK | wx.ICON_INFORMATION)

# end of class seWSNViewLayout

class MyApp(wx.App):
    def OnInit(self):
        self.frame = seWSNViewLayout(None, -1, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
