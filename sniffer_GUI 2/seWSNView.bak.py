#!/usr/bin/env python
# basic UI generated by wxGlade 0.3.1 on Fri Oct 03 23:23:45 2003
# Project Leader: Tim Ren
# Original Developer: Tim Ren
# Additional Development: Bret Orner, Sean Lantry
#

import wx
import wxSerialConfigDialog
import serial
import threading
import os
import sys
from base import XBeeBase
from struct import *
from datetime import *
import json
import time
from threading import Timer

outfile = None

ndp_deviceType =''
ndp_deviceUptime = ''
ndp_deviceIEEEAddr = ''
ndp_packetLoss = ''
ndp_retryCounter = ''
ndp_shortAddress = ''
ndp_workingMemory = ''
ndp_parentIEEEaddr = ''
ndp_deviceRssi = ''

fileCounter = 0

deviceMatrix = [{'deviceType':'0', 'deviceUptime':'0', 'ieee_address':'00c0b700008c83a7', 'packetLoss':'0', 'retryCounter':'0', 'shortAddress':'0000', 'workingMemory':'0'}]

deviceLinks = []

networkJson = {'links':deviceLinks, 'nodes':deviceMatrix}

joinList = [{'mac':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
             'packageid':' ', 'devtype':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
             'temp':' ', 'humid':' ',
             'port1type':' ', 'port2type':' ', 'port3type':' ',
             'port1val':' ', 'port2val':' ', 'port3val':' ',
             'port1err':' ', 'port2err':' ', 'port3err':' ',
             'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
             'control':' ', 'pkgtype':' ', 'filever':' '}]

hostTransID = 0
commishList = []
orphanList = []
rogueList = []
tmpcommishList = []
packageid_holder = ' '
ManID_holder = ' '
status_holder = ' '
control_holder = ' ' #event.data['CONTROL'].hex()
pkgtype_holder = ' ' #event.data['PKGTYPE'].hex()
filever_holder = ' ' #event.data['FILEVER'].hex()
openJoin = True
terminalBuffer = []
terminalPaused = False

#----------------------------------------------------------------------
# This function will take a the new information from an NDP
# Update the current data structure with new information or add a new node.
#
#

def addNewNodeInformation(deviceType, deviceUptime,ieee_address, packetLoss,retryCounter, shortAddress,workingMemory, parentIEEE, linkRssi):
    newDeviceNode = {'deviceType':deviceType, 'deviceUptime':deviceUptime,'ieee_address':ieee_address, 'packetLoss':packetLoss,'retryCounter':retryCounter, 'shortAddress':shortAddress,'workingMemory':workingMemory}

    index = 0
    indexInQuestion = -1
    for k in deviceMatrix:
        if k['ieee_address'] == ieee_address:
            indexInQuestion = index
            break
        index = index + 1

    if indexInQuestion >= 0:
        del deviceMatrix[indexInQuestion]
    deviceMatrix.append(newDeviceNode)

    newLink = {'ieee_address':ieee_address,'parent_ieee_address':parentIEEE,'rssi':linkRssi}
    Index2 = 0
    indexInQuestion2 = -1
    for j in deviceLinks:
        if j['ieee_address'] == ieee_address:
            indexInQuestion2 = Index2
            break
        Index2 = Index2 + 1

    if indexInQuestion2 >= 0:
        del deviceLinks[indexInQuestion2]

    deviceLinks.append(newLink)

    ##make sure that link is to a valid node

    found = False
    for k in deviceMatrix:
        if k['ieee_address'] == parentIEEE:
            found = True
            break

    if found:
        pass
    else:
        print(30*'*'+'UNKNOWN LINK'+30*'*')
        print(newLink)
        newDeviceNode = {'deviceType':"3", 'deviceUptime':"0",'ieee_address':parentIEEE, 'packetLoss':"ffff",'retryCounter':"ffff", 'shortAddress':"ffff",'workingMemory':"ffff"}
        deviceMatrix.append(newDeviceNode)

#----------------------------------------------------------------------
# Create an own event type, so that GUI updates can be delegated
# this is required as on some platforms only the main thread can
# access the GUI without crashing. wxMutexGuiEnter/wxMutexGuiLeave
# could be used too, but an event is more elegant.

SERIALRX = wx.NewEventType()
# bind to serial data receive events
EVT_SERIALRX = wx.PyEventBinder(SERIALRX, 0)
def checksum(s):
    return pack('B', sum(unpack(str(str(len(s))+"B"), s))%256)

def format(d, tab=0):
    #s = ['{\n']
    s = ['']
    for k,v in d.items():
        if isinstance(v, dict):
            v = format(v, tab+1)
        else:
            if k=='transID':
                v = str(int(v.hex(), 16 ))
            if k=='controlBit':
                v = str(int(v.hex(), 16 ))
            elif k=='xA':
                v = v[::-1].hex()
            elif k=='SKU':
                v = v[::-1]
            elif k=='Serial':
                v = v[::-1]
            elif k=='Reboot_Reason':
                v = repr(v)
            elif k=='SDP_version':
                v = v.hex()
            elif k=='Mfg_date':
                v = v[::-1].hex()
            elif k=='UTC_Time':
                v = v[::-1].hex()
            elif k=='downLoadedVersion':
                v = v.hex()
            elif k=='tranID':
                v = v.hex()
            elif k=='flags':
                v = v.hex()
            elif k=='Channel_ID':
                v = str(int(v.hex(), 16 ))
            elif k=='Device_type':
                v = v.hex()
            elif k=='rssi':
                v = int(v.hex(), 16) - 255
            elif k=='int_temp':
                v = int(v[::-1].hex(), 16)
            elif k=='int_humid':
                v = int(v[::-1].hex(), 16)
            elif k=='battery':
                v = int(v[::-1].hex(), 16)
            elif k=='FW_version':
                v = v[::-1].hex()
            elif k=='HW_version':
                v = v[::-1].hex()
            elif k=='Port1':
                v = v[::-1].hex()
            elif k=='Port2':
                v = v[::-1].hex()
            elif k=='Port3':
                v = v[::-1].hex()
            elif k=='Port1_Reading':
                v = v[::-1].hex()
            elif k=='Port2_Reading':
                v = v[::-1].hex()
            elif k=='Port3_Reading':
                v = v[::-1].hex()
            elif k=='XAddr':
                v = v[::-1].hex()
            elif k=='FILEVER':
                v = v[::-1].hex()
            elif k=='CONTROL':
                v = v[::-1].hex()
            elif k=='PKGTYPE':
                v = v[::-1].hex()
            elif k=='MANID':
                v = v[::-1].hex()
            elif k=='PANID':
                v = v[::-1].hex()
            elif k=='Security_key':
                v = v.hex()
            elif k=='deviceUpTime':
                v = int(v[::-1].hex(), 16)
            elif k=='ieee_address':
                v = v[::-1].hex()
                ndp_deviceIEEEAddr = v
            elif k=='parent_ieee_address':
                v = v[::-1].hex()
                ndp_parentIEEEaddr = v
            elif k=='deviceType':
                v = int(v.hex(), 16)
                if v == 0:
                    v = "Coodinator"
                elif v == 1:
                    v = "Router"
                else:
                    v = "End Device"
                ndp_deviceType = v
            elif k=='workingMemory':
                v = int(v[::-1].hex(), 16)
                ndp_workingMemory = v
            elif k=='packetLoss':
                v = int(v[::-1].hex(), 16)
                ndp_packetLoss = v
            elif k=='retryCount':
                v = int(v[::-1].hex(), 16)
                ndp_retryCounter = v
            elif k=='parent_sA':
                v = "0x"+v[::-1].hex()
            elif k=='sA':
                v = "0x"+v[::-1].hex()
                ndp_shortAddress = v
            else: # this is the default function
                v = repr(v)
        s.append('%s%r: %s,\n' % ('  '*tab, k, v)) #itemilze all fields, good for debug
        #s.append('%s:' % (v)) #simplified display and debug info
    #s.append('%s}' % ('  '*tab))
    return ''.join(s)
#-----------------------------------------------------------
class RepeatedTimer(object):
    def __init__(self, interval, function, *args, **kwargs):
        self._timer      = None
        self.interval    = interval
        self.function    = function
        self.args        = args
        self.kwargs      = kwargs
        self.is_running  = False
        self.start()

    def _run(self):
        self.is_running = False
        self.start()
        self.function(*self.args, **self.kwargs)

    def start(self):
        if not self.is_running:
            self._timer = Timer(self.interval, self._run)
            self._timer.start()
            self.is_running = True

    def stop(self):
        self._timer.cancel()
        self.is_running = False

#-------------------------------------------------------------

class SerialRxEvent(wx.PyCommandEvent):
    eventType = SERIALRX
    def __init__(self, windowID, data):
        wx.PyCommandEvent.__init__(self, self.eventType, windowID)
        self.data = data

    def Clone(self):
        self.__class__(self.GetId(), self.data)

#----------------------------------------------------------------------

ID_FILE        = wx.NewId()
ID_CLEAR        = wx.NewId()
ID_SAVE        = wx.NewId()
ID_SAVEAS       = wx.NewId()
ID_SETTINGS     = wx.NewId()
ID_TERM         = wx.NewId()
ID_COM_LIST     = wx.NewId()
ID_EXIT         = wx.NewId()
ID_HELP         = wx.NewId()
ID_SEND_HOTSHOT	= wx.NewId()
ID_SEND_STATUSREQ = wx.NewId()
ID_SEND_SJOIN_ACCEPT = wx.NewId()
ID_SEND_REMOVE_NODE = wx.NewId()
ID_SEND_TIME_RESP = wx.NewId()
ID_SEND_QNP_RESP = wx.NewId()
ID_SEND_PE_RESP = wx.NewId()
ID_SEND_RMT_CMD = wx.NewId()
ID_SEND_COLDSHOT = wx.NewId()

NEWLINE_CR      = 0
NEWLINE_LF      = 1
NEWLINE_CRLF    = 2

class TerminalSetup:
    """Placeholder for various terminal settings. Used to pass the
       options to the TerminalSettingsDialog."""
    def __init__(self):
        self.echo = False
        self.unprintable = False
        self.newline = NEWLINE_CRLF

class TerminalSettingsDialog(wx.Dialog):
    """Simple dialog with common terminal settings like echo, newline mode."""

    def __init__(self, *args, **kwds):
        self.settings = kwds['settings']
        del kwds['settings']
        # begin wxGlade: TerminalSettingsDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.checkbox_echo = wx.CheckBox(self, -1, "Local Echo")
        self.checkbox_unprintable = wx.CheckBox(self, -1, "Show unprintable characters")
        self.radio_box_newline = wx.RadioBox(self, -1, "Newline Handling", choices=["CR only", "LF only", "CR+LF"], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
        self.button_ok = wx.Button(self, -1, "OK")
        self.button_cancel = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.__attach_events()
        self.checkbox_echo.SetValue(self.settings.echo)
        self.checkbox_unprintable.SetValue(self.settings.unprintable)
        self.radio_box_newline.SetSelection(self.settings.newline)

    def __set_properties(self):
        # begin wxGlade: TerminalSettingsDialog.__set_properties
        self.SetTitle("Terminal Settings")
        self.radio_box_newline.SetSelection(0)
        self.button_ok.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: TerminalSettingsDialog.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Input/Output"), wx.VERTICAL)
        sizer_4.Add(self.checkbox_echo, 0, wx.ALL, 4)
        sizer_4.Add(self.checkbox_unprintable, 0, wx.ALL, 4)
        sizer_4.Add(self.radio_box_newline, 0, 0, 0)
        sizer_2.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_3.Add(self.button_ok, 0, 0, 0)
        sizer_3.Add(self.button_cancel, 0, 0, 0)
        sizer_2.Add(sizer_3, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def __attach_events(self):
        self.Bind(wx.EVT_BUTTON, self.OnOK, id = self.button_ok.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnCancel, id = self.button_cancel.GetId())

    def OnOK(self, events):
        """Update data with new values and close dialog."""
        self.settings.echo = self.checkbox_echo.GetValue()
        self.settings.unprintable = self.checkbox_unprintable.GetValue()
        self.settings.newline = self.radio_box_newline.GetSelection()
        self.EndModal(wx.ID_OK)

    def OnCancel(self, events):
        """Do not update data but close dialog."""
        self.EndModal(wx.ID_CANCEL)

# end of class TerminalSettingsDialog

class CommissionListDialog(wx.Dialog):
    """Simple dialog to create a commission list from a checklist."""
    global frame_seWSNView
    global pageNetMon
    global joinList
    global commishList
    global openJoin
    def __init__(self, *args, **kwds):
        self.settings = kwds['settings']
        del kwds['settings']
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        choiceList = []

        for item in joinList:
            choiceList.append(item['mac'])
        self.commishListCB = wx.CheckListBox(self, -1, choices=choiceList)

        self.filenameEntry = wx.TextCtrl(self, -1, "list.txt")
        self.button_browse = wx.Button(self, -1, "Save")
        self.button_ok = wx.Button(self, -1, "OK")
        self.button_cancel = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.__attach_events()

    def __set_properties(self):
        self.SetTitle("Commission List Add/Edit")
        #self.radio_box_newline.SetSelection(0)
        self.button_ok.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: TerminalSettingsDialog.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Available Devices"), wx.VERTICAL)
        sizer_4.Add(self.commishListCB, 1, wx.GROW|wx.EXPAND|wx.ALL, 4)
        #sizer_4.Add(self.checkbox_unprintable, 0, wx.ALL, 4)
        #sizer_4.Add(self.radio_box_newline, 0, 0, 0)
        sizer_2.Add(sizer_4, 1, wx.GROW|wx.EXPAND, 0)
        sizer_3.Add(self.button_ok, 0, 0, 0)
        sizer_3.Add(self.button_cancel, 0, 0, 0)
        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Commission List Filename"), wx.HORIZONTAL)
        sizer_5.Add(self.filenameEntry, 1, wx.EXPAND|wx.ALL, 4)
        sizer_5.Add(self.button_browse, 0, wx.ALL, 4)
        sizer_2.Add(sizer_5, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        sizer_2.Add(sizer_3, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()
        # end wxGlade

    def __attach_events(self):
        self.Bind(wx.EVT_BUTTON, self.OnOK, id = self.button_ok.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnCancel, id = self.button_cancel.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnSave, id = self.button_browse.GetId())

    def OnSave(self, events):
        """Update data with new values and close dialog."""
        global commishList
        commishFilename = self.filenameEntry.GetLineText(0)
        filename = None
        commishFileDialog = wx.FileDialog(self, "Save Commission List", ".", commishFilename, "Text files (*.txt)|*.txt", wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
        if commishFileDialog.ShowModal() == wx.ID_CANCEL:
            return
        else:
            filename = commishFileDialog.GetPath()
        commishFileDialog.Destroy()
        if filename is not None:
            f = file(filename, 'w')
            #for it in commishList:
            #    commishList.remove(it)
            commishList[:] = []
            selected = self.commishListCB.GetCheckedStrings()
            for s in selected:
                f.write(s+"\n")
                #commishList = []
                commishList.append(s)
                #pageNetMon.tc_orphan_list.AppendText(s+"\r\n")
            f.close()

    def OnOK(self, events):
        """Update data with new values and close dialog."""
        global pageNetMon
        global commishList
        global openJoin
        pageNetMon.tc_commish_list.Clear()
        pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
        for eachComm in commishList:
            if eachComm != '':
                pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
        openJoin = False
        pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
        frame_seWSNView.OnSendListModify(events)
        self.ResetCoord()
        self.EndModal(wx.ID_OK)

    def OnCancel(self, events):
        """Do not update data but close dialog."""
        self.EndModal(wx.ID_CANCEL)

    def ResetCoord(self):
        """Clear display data."""
        global joinList
        global pageNetMon
        global frame_seWSNView
        for item in joinList:
            item.clear()
        joinList[0] = {'mac':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
             'packageid':' ', 'devtype':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
             'temp':' ', 'humid':' ',
             'port1type':' ', 'port2type':' ', 'port3type':' ',
             'port1val':' ', 'port2val':' ', 'port3val':' ',
             'port1err':' ', 'port2err':' ', 'port3err':' ',
             'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
             'control':' ', 'pkgtype':' ', 'filever':' '}

        pageNetMon.tree_ctrl.DeleteAllItems()
        pageNetMon.packageidtxc.Clear()
        pageNetMon.macaddrtxc.Clear()
        pageNetMon.skunumtxc.Clear()
        pageNetMon.sernumtxc.Clear()
        pageNetMon.mfgdatetxc.Clear()
        pageNetMon.hwvertxc.Clear()
        pageNetMon.batterytxc.Clear()
        pageNetMon.utctmtxc.Clear()
        pageNetMon.manidtxc.Clear()
        pageNetMon.statustxc.Clear()
        pageNetMon.devicetypetxc.Clear()
        pageNetMon.channeltxc.Clear()
        pageNetMon.fwvertxc.Clear()
        pageNetMon.sdpvertxc.Clear()
        pageNetMon.transidtxc.Clear()
        pageNetMon.rssitxc.Clear()
        pageNetMon.temperaturetxc.Clear()
        pageNetMon.humiditytxc.Clear()
        pageNetMon.port1typetxc.Clear()
        pageNetMon.port1valtxc.Clear()
        pageNetMon.port2typetxc.Clear()
        pageNetMon.port2valtxc.Clear()
        pageNetMon.port3typetxc.Clear()
        pageNetMon.port3valtxc.Clear()
        pageNetMon.spivertxc.Clear()
        pageNetMon.flagdatatxc.Clear()
        pageNetMon.controltxc.Clear()
        pageNetMon.pkgtypetxc.Clear()
        pageNetMon.filevertxc.Clear()
        frame_seWSNView.OnSendStatusReq(None)
# end of class CommissionListDialog

openedFile = False
savedFile = False

class ConfigFileDialog(wx.Dialog):
    """Simple dialog to create and edit the commission list."""
    global frame_seWSNView
    global pageNetMon
    global joinList
    global commishList
    global openJoin
    global tmpcommishList
    global openedFile
    global savedFile
    def __init__(self, *args, **kwds):
        self.settings = kwds['settings']
        del kwds['settings']
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        cfd_tc_style = (wx.TE_MULTILINE | wx.TE_RICH) #| wx.TE_READONLY)
        self.configfileviewtxc = wx.TextCtrl(self, -1, "", style=cfd_tc_style, size=(-1,200))

        self.filenameEntry = wx.TextCtrl(self, -1, "list.txt")
        self.button_open = wx.Button(self, -1, "Open")
        self.button_save = wx.Button(self, -1, "Save")
        self.button_ok = wx.Button(self, -1, "OK")
        self.button_cancel = wx.Button(self, -1, "Cancel")
        self.checkbox_ojoin = wx.CheckBox(self, -1, "Open Join")
        self.checkbox_sendmodify = wx.CheckBox(self, -1, "Send Modify")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.__attach_events()

    def __set_properties(self):
        self.SetTitle("Commission List File Select")
        #self.radio_box_newline.SetSelection(0)
        self.button_ok.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: TerminalSettingsDialog.__do_layout
        global commishList
        global openJoin
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Commission List File View/Edit"), wx.VERTICAL)
        sizer_4.Add(self.configfileviewtxc, 1, wx.GROW|wx.EXPAND|wx.ALL, 4)
        sizer_2.Add(sizer_4, 1, wx.GROW|wx.EXPAND, 0)
        sizer_3.Add(self.checkbox_ojoin, 0, wx.ALIGN_LEFT, 0)
        sizer_3.Add(self.checkbox_sendmodify, 0, wx.ALIGN_LEFT, 0)

        sizer_3.Add(self.button_ok, 0, 0, 0)
        sizer_3.Add(self.button_cancel, 0, 0, 0)
        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Commission List File Open/Save"), wx.HORIZONTAL)
        sizer_5.Add(self.filenameEntry, 1, wx.EXPAND|wx.ALL, 4)
        sizer_5.Add(self.button_open, 0, wx.ALL, 4)
        sizer_5.Add(self.button_save, 0, wx.ALL, 4)
        sizer_2.Add(sizer_5, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        sizer_2.Add(sizer_3, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()

        if not openJoin:
            for eachComm in commishList:
                if eachComm != '':
                    self.configfileviewtxc.AppendText(eachComm + "\r\n")

        # end wxGlade

    def __attach_events(self):
        self.Bind(wx.EVT_BUTTON, self.OnOK, id = self.button_ok.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnSave, id = self.button_save.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnCancel, id = self.button_cancel.GetId())
        self.Bind(wx.EVT_BUTTON, self.OnOpen, id = self.button_open.GetId())

    def OnOpen(self, events):
        """Update data with new values and close dialog."""
        global tmpcommishList
        global openedFile
        configFilename = self.filenameEntry.GetLineText(0)
        filename = None
        configFileDialog = wx.FileDialog(self, "Open Commission List", ".", configFilename, "Text files (*.txt)|*.txt", wx.FD_OPEN)
        if configFileDialog.ShowModal() == wx.ID_CANCEL:
            return
        else:
            filename = configFileDialog.GetPath()
        configFileDialog.Destroy()
        if filename is not None:
            openedFile = True
            f = file(filename, 'r')
            tmpcommishList[:] = []
            tmpcommishList = f.read().splitlines()
            self.configfileviewtxc.Clear()
            for eachComm in tmpcommishList:
                if eachComm != '':
                    self.configfileviewtxc.AppendText(eachComm + "\r\n")
            f.close()

    def OnSave(self, events):
        """Update data with new values and close dialog."""
        global tmpcommishList
        global savedFile
        commishFilename = self.filenameEntry.GetLineText(0)
        filename = None
        commishFileDialog = wx.FileDialog(self, "Save Commission List", ".", commishFilename, "Text files (*.txt)|*.txt", wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
        if commishFileDialog.ShowModal() == wx.ID_CANCEL:
            return
        else:
            filename = commishFileDialog.GetPath()
        commishFileDialog.Destroy()
        if filename is not None:
            f = file(filename, 'w')
            #for it in tmpcommishList:
            #    tmpcommishList.remove(it)
            tmpcommishList[:] = []
            selected = []
            numItems = self.configfileviewtxc.GetNumberOfLines()
            for item in range(numItems):
               if item != '':
                  selected.append(self.configfileviewtxc.GetLineText(item))
                  tmpcommishList.append(self.configfileviewtxc.GetLineText(item))
            for s in selected:
                f.write(s+"\n")
            savedFile = True
            f.close()

    def OnOK(self, events):
        """Update data with new values and close dialog."""
        global frame_seWSNView
        global pageNetMon
        global commishList
        global openJoin
        global tmpcommishList
        global openedFile
        global savedFile
        if openedFile or savedFile:
            #for it in commishList:
            #    commishList.remove(it)
            commishList[:] = []
            for eachComm in tmpcommishList:
                if eachComm != '':
                    commishList.append(eachComm)
        if self.checkbox_ojoin.GetValue():
            openJoin = True
        else:
            openJoin = False
            pageNetMon.tc_commish_list.Clear()
            pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
            for eachComm in commishList:
                if eachComm != '':
                    pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
            pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
        if self.checkbox_sendmodify.GetValue():
            frame_seWSNView.OnSendListModify(events)
            self.ResetCoord()
        self.EndModal(wx.ID_OK)

    def OnCancel(self, events):
        """Do not update data but close dialog."""
        self.EndModal(wx.ID_CANCEL)

    def ResetCoord(self):
        """Clear display data."""
        global pageNetMon
        global joinList
        global frame_seWSNView
        for item in joinList:
            item.clear()
        joinList[0] = {'mac':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
             'packageid':' ', 'devtype':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
             'temp':' ', 'humid':' ',
             'port1type':' ', 'port2type':' ', 'port3type':' ',
             'port1val':' ', 'port2val':' ', 'port3val':' ',
             'port1err':' ', 'port2err':' ', 'port3err':' ',
             'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
             'control':' ', 'pkgtype':' ', 'filever':' '}

        pageNetMon.tree_ctrl.DeleteAllItems()
        pageNetMon.packageidtxc.Clear()
        pageNetMon.macaddrtxc.Clear()
        pageNetMon.skunumtxc.Clear()
        pageNetMon.sernumtxc.Clear()
        pageNetMon.mfgdatetxc.Clear()
        pageNetMon.hwvertxc.Clear()
        pageNetMon.batterytxc.Clear()
        pageNetMon.utctmtxc.Clear()
        pageNetMon.manidtxc.Clear()
        pageNetMon.statustxc.Clear()
        pageNetMon.devicetypetxc.Clear()
        pageNetMon.channeltxc.Clear()
        pageNetMon.fwvertxc.Clear()
        pageNetMon.sdpvertxc.Clear()
        pageNetMon.transidtxc.Clear()
        pageNetMon.rssitxc.Clear()
        pageNetMon.temperaturetxc.Clear()
        pageNetMon.humiditytxc.Clear()
        pageNetMon.port1typetxc.Clear()
        pageNetMon.port1valtxc.Clear()
        pageNetMon.port2typetxc.Clear()
        pageNetMon.port2valtxc.Clear()
        pageNetMon.port3typetxc.Clear()
        pageNetMon.port3valtxc.Clear()
        pageNetMon.spivertxc.Clear()
        pageNetMon.flagdatatxc.Clear()
        pageNetMon.controltxc.Clear()
        pageNetMon.pkgtypetxc.Clear()
        pageNetMon.filevertxc.Clear()
        frame_seWSNView.OnSendStatusReq(None)
# end of class ConfigFileDialog

class FeatureNotImplementedDialog(wx.Dialog):
    """Simple dialog to create and edit the commission list."""
    def __init__(self, *args, **kwds):
        self.settings = kwds['settings']
        del kwds['settings']
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE|wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.staticlabel = wx.StaticText(self, -1, "Feature Not Implemented.")
        self.button_ok = wx.Button(self, -1, "OK")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade
        self.__attach_events()

    def __set_properties(self):
        self.SetTitle("Feature Not Implemented")
        #self.radio_box_newline.SetSelection(0)
        self.button_ok.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: TerminalSettingsDialog.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)

        sizer_3.Add(self.button_ok, 0, 0, 0)
        sizer_2.Add(self.staticlabel, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        sizer_2.Add(sizer_3, 0, wx.ALL|wx.ALIGN_RIGHT, 4)
        self.SetAutoLayout(1)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()

        # end wxGlade

    def __attach_events(self):
        self.Bind(wx.EVT_BUTTON, self.OnOK, id = self.button_ok.GetId())

    def OnOK(self, events):
        """Update data with new values and close dialog."""
        self.EndModal(wx.ID_OK)
# end of class FeatureNotImplementedDialog

class seWSNStatusbar(wx.Frame):
    def __init__(self, parent):
        statusbar = parent.CreateStatusBar()
        statusbar.SetStatusText("Not Connected")


class seWSNMenubar(wx.Frame):
    def __init__(self, parent):
        parent.seWSNView_menubar = wx.MenuBar()
        parent.SetMenuBar(parent.seWSNView_menubar)
        file_menu = wx.Menu()
        file_menu.Append(ID_FILE, "&File", "", wx.ITEM_NORMAL)
        file_menu.Append(ID_SAVE, "&Save", "", wx.ITEM_NORMAL)
        file_menu.Append(ID_SAVEAS, "S&ave As...", "", wx.ITEM_NORMAL)
        file_menu.AppendSeparator()
        file_menu.Append(ID_CLEAR, "C&lear", "", wx.ITEM_NORMAL)
        file_menu.AppendSeparator()
        file_menu.Append(ID_EXIT, "&Exit", "", wx.ITEM_NORMAL)
        parent.seWSNView_menubar.Append(file_menu, "&File")

        config_menu = wx.Menu()
        config_menu.Append(ID_SETTINGS, "&Port Settings...", "", wx.ITEM_NORMAL)
        config_menu.Append(ID_TERM, "&Terminal Settings...", "", wx.ITEM_NORMAL)
        config_menu.Append(ID_COM_LIST, "Commission &List Settings...", "", wx.ITEM_NORMAL)
        parent.seWSNView_menubar.Append(config_menu, "&Config")

        #Tim's new send packet item
        send_menu = wx.Menu()
        send_menu.Append(ID_SEND_HOTSHOT, "Send &HotShot", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_STATUSREQ, "Send Status &Request", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_SJOIN_ACCEPT, "Send S&Join Accept", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_REMOVE_NODE, "Send &Remove Node", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_TIME_RESP, "Send &Time Request Resp", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_QNP_RESP, "Send &QNP Resp", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_PE_RESP, "Send &PE Resp", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_RMT_CMD, "Send Remote C&ommand", "", wx.ITEM_NORMAL)
        send_menu.Append(ID_SEND_COLDSHOT, "Send &ColdShot", "", wx.ITEM_NORMAL)
        parent.seWSNView_menubar.Append(send_menu, "&Send")

        help_menu = wx.Menu()
        help_menu.Append(ID_HELP, "&Help", "", wx.ITEM_NORMAL)
        parent.seWSNView_menubar.Append(help_menu, "&Help")

class seWSNToolbar(wx.Frame):
    def __init__(self, parent):
        toolbar2 = parent.CreateToolBar(style=wx.TB_HORZ_TEXT)
        #toolbar2 = wx.ToolBar(self, -1, style=wx.TB_TEXT)
        tool1 = toolbar2.AddSimpleTool(-1, wx.Bitmap('filenew.png'), "New", "Open Commission List File")
        parent.Bind(wx.EVT_MENU, parent.OnConfigFileSelect, tool1)
        tool5 = toolbar2.AddSimpleTool(-1, wx.Bitmap('fileopen.png'), "Open", "Open Commission List File")
        parent.Bind(wx.EVT_MENU, parent.OnConfigFileSelect, tool5)
        tool2 = toolbar2.AddSimpleTool(-1, wx.Bitmap('filesave.png'), "Save", "Save Terminal Display to file")
        parent.Bind(wx.EVT_MENU, parent.OnSaveAs, tool2)
        tool6 = toolbar2.AddSimpleTool(-1, wx.Bitmap('filesaveall.png'), "Save All", "Save Terminal Display to file")
        parent.Bind(wx.EVT_MENU, parent.OnSaveAs, tool6)
        tool7 = toolbar2.AddSimpleTool(-1, wx.Bitmap('filesaveas.png'), "Save As", "Save Terminal Display to file")
        parent.Bind(wx.EVT_MENU, parent.OnSaveAs, tool7)
        tool13 = toolbar2.AddSimpleTool(-1, wx.Bitmap('view_tree.png'), "Commission List", "Create commission list from checklist")
        parent.Bind(wx.EVT_MENU, parent.OnCommissionList, tool13)
        toolbar2.AddSeparator()
        tool8 = toolbar2.AddSimpleTool(-1, wx.Bitmap('history_clear.png'), "Clear", "Clears Terminal View")
        parent.Bind(wx.EVT_MENU, parent.OnClear, tool8)
        tool9 = toolbar2.AddSimpleTool(-1, wx.Bitmap('run.png'), "Settings", "Edit Settings")
        parent.Bind(wx.EVT_MENU, parent.OnFeatureNotImp, tool9)
        tool10 = toolbar2.AddSimpleTool(-1, wx.Bitmap('edit_16x16.png'), "Edit", "Open Commission List File for Editing")
        parent.Bind(wx.EVT_MENU, parent.OnConfigFileSelect, tool10)
        tool12 = toolbar2.AddSimpleTool(-1, wx.Bitmap('undo.png'), "Hot Shot", "Make connected device a Coordinator")
        parent.Bind(wx.EVT_MENU, parent.OnSendHotShot, tool12)
        toolbar2.AddSeparator()
        tool11 = toolbar2.AddSimpleTool(-1, wx.Bitmap('dbgpause.png'), "Pause", "Pause the Terminal display")
        parent.Bind(wx.EVT_MENU, parent.OnPause, tool11)
        tool3 = toolbar2.AddSimpleTool(-1, wx.Bitmap('dbgrun.png'), "Restart", "Restart the Terminal display")
        parent.Bind(wx.EVT_MENU, parent.OnPlay, tool3)
        tool4 = toolbar2.AddSimpleTool(-1, wx.Bitmap('exit.png'), "Exit", "Exit the Application")
        parent.Bind(wx.EVT_MENU, parent.OnExit, tool4)
        toolbar2.AddSeparator()
        toolbar2.Realize()

class PageNetworkMonitor(wx.Panel):
    def __init__(self, parent):
        tc_style = (wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH) # | wx.TE_DONTWRAP | wx.ST_NO_AUTORESIZE)
        sp_style = (wx.SP_3D|wx.SP_NO_XP_THEME)  #|wx.SP_LIVE_UPDATE
        tc_stat_style = (wx.TE_READONLY)

        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)

        nmSplitter = wx.SplitterWindow(self, id=wx.ID_ANY, style=sp_style)
        nmSplitter.SetMinimumPaneSize(250)

        # Network monitor tree view
        tree_pane = wx.Panel(nmSplitter, id=wx.ID_ANY)

        self.tree_ctrl = wx.TreeCtrl(tree_pane, wx.ID_ANY)

        p1sizer = wx.BoxSizer(wx.VERTICAL)
        p1sizer.Add(self.tree_ctrl, 1, wx.GROW, 0)
        tree_pane.SetSizerAndFit(p1sizer)

        # Network monitor status panel
        nmstat_pane = wx.Panel(nmSplitter, -1)

        statdevicesizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Device Data"), wx.VERTICAL)
        statnetworksizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Network Data"), wx.VERTICAL)
        statsensorsizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Sensor Data"), wx.VERTICAL)

        statroguesizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Orphan List (Join Rejected)"), wx.VERTICAL)
        statcommsizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Commission List"), wx.VERTICAL)
        statorphsizer = wx.StaticBoxSizer(wx.StaticBox(nmstat_pane, wx.ID_ANY, "Rogue List (SDP ignored)"), wx.VERTICAL)

        self.tc_commish_list = wx.TextCtrl(nmstat_pane, wx.ID_ANY, "", style=tc_style)
        self.tc_rogue_list = wx.TextCtrl(nmstat_pane, wx.ID_ANY, "", style=tc_style)
        self.tc_orphan_list = wx.TextCtrl(nmstat_pane, wx.ID_ANY, "", style=tc_style)

        #Device Data Controls
        macaddrsizer = wx.BoxSizer(wx.HORIZONTAL)
        macaddrlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "MAC Address")
        macaddrsizer.Add(macaddrlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.macaddrtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style) #, "", style=tc_stat_style)
        macaddrsizer.Add(self.macaddrtxc, 1, 0, 0)
        skunumsizer = wx.BoxSizer(wx.HORIZONTAL)
        skunumlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "SKU #")
        skunumsizer.Add(skunumlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.skunumtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        skunumsizer.Add(self.skunumtxc, 1, 0, 0)
        sernumsizer = wx.BoxSizer(wx.HORIZONTAL)
        sernumlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Serial #")
        sernumsizer.Add(sernumlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.sernumtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        sernumsizer.Add(self.sernumtxc, 1, 0, 0)
        mfgdatesizer = wx.BoxSizer(wx.HORIZONTAL)
        mfgdatelabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "MFG Date")
        mfgdatesizer.Add(mfgdatelabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.mfgdatetxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        mfgdatesizer.Add(self.mfgdatetxc, 1, 0, 0)
        hwversizer = wx.BoxSizer(wx.HORIZONTAL)
        hwverlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "HW Version")
        hwversizer.Add(hwverlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.hwvertxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        hwversizer.Add(self.hwvertxc, 1, 0, 0)
        batterysizer = wx.BoxSizer(wx.HORIZONTAL)
        batterylabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Battery")
        batterysizer.Add(batterylabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.batterytxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        batterysizer.Add(self.batterytxc, 1, 0, 0)
        utctmsizer = wx.BoxSizer(wx.HORIZONTAL)
        utctmlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "UTC Time")
        utctmsizer.Add(utctmlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.utctmtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        utctmsizer.Add(self.utctmtxc, 1, 0, 0)
        manidsizer = wx.BoxSizer(wx.HORIZONTAL)
        manidlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "MAN ID")
        manidsizer.Add(manidlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.manidtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        manidsizer.Add(self.manidtxc, 1, 0, 0)
        removesizer = wx.BoxSizer(wx.HORIZONTAL)
        self.removebutton = wx.Button(nmstat_pane, wx.ID_ANY, "Remove")
        self.statustxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        #parent.Bind(wx.EVT_MENU, seWSNViewLayout.OnSendRemoveNode, self.removebutton)
        removesizer.Add(self.removebutton, 0, 0, 0)
        removesizer.Add(self.statustxc, 1, 0, 0)
        #self.removebutton.Bind(wx.EVT_BUTTON, self.OnRemove)
        removemacsizer = wx.BoxSizer(wx.HORIZONTAL)
        self.notfoundcheckbox = wx.CheckBox(nmstat_pane, wx.ID_ANY, "Not Found Test")
        self.removemactxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=(wx.TE_RICH))
        removemacsizer.Add(self.notfoundcheckbox, 0, wx.ALL|wx.ALIGN_LEFT, 4)
        removemacsizer.Add(self.removemactxc, 1, 0, 0)
        sdptimersizer = wx.BoxSizer(wx.HORIZONTAL)
        self.sdptimergauge = wx.Gauge(nmstat_pane, wx.ID_ANY, range=185)
        self.sdptimertxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        sdptimersizer.Add(self.sdptimergauge, 0, wx.ALL|wx.ALIGN_LEFT, 8)
        sdptimersizer.Add(self.sdptimertxc, 1, wx.ALL|wx.ALIGN_LEFT, 4)

        statdevicesizer.Add(macaddrsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(skunumsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(sernumsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(mfgdatesizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(hwversizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(batterysizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(utctmsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(manidsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(removesizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(removemacsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statdevicesizer.Add(sdptimersizer, 0, wx.RIGHT|wx.EXPAND, 0)

        #Network Data Controls
        packageidsizer = wx.BoxSizer(wx.HORIZONTAL)
        packageidlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Package ID")
        packageidsizer.Add(packageidlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.packageidtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        packageidsizer.Add(self.packageidtxc, 1, 0, 0)
        devicetypesizer = wx.BoxSizer(wx.HORIZONTAL)
        devicetypelabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Device Type")
        devicetypesizer.Add(devicetypelabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.devicetypetxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        devicetypesizer.Add(self.devicetypetxc, 1, 0, 0)
        channelsizer = wx.BoxSizer(wx.HORIZONTAL)
        channellabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Channel")
        channelsizer.Add(channellabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.channeltxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        channelsizer.Add(self.channeltxc, 1, 0, 0)
        fwversizer = wx.BoxSizer(wx.HORIZONTAL)
        fwverlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "FW Version")
        fwversizer.Add(fwverlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.fwvertxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        fwversizer.Add(self.fwvertxc, 1, 0, 0)
        sdpversizer = wx.BoxSizer(wx.HORIZONTAL)
        sdpverlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "SDP Version")
        sdpversizer.Add(sdpverlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.sdpvertxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        sdpversizer.Add(self.sdpvertxc, 1, 0, 0)
        transidsizer = wx.BoxSizer(wx.HORIZONTAL)
        transidlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Transaction ID")
        transidsizer.Add(transidlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.transidtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        transidsizer.Add(self.transidtxc, 1, 0, 0)
        rssisizer = wx.BoxSizer(wx.HORIZONTAL)
        rssilabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "RSSI")
        rssisizer.Add(rssilabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.rssitxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        rssisizer.Add(self.rssitxc, 1, 0, 0)
        spiversizer = wx.BoxSizer(wx.HORIZONTAL)
        spiverlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "SPI Version")
        spiversizer.Add(spiverlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.spivertxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        spiversizer.Add(self.spivertxc, 1, 0, 0)
        flagdatasizer = wx.BoxSizer(wx.HORIZONTAL)
        flagdatalabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Flag Data")
        flagdatasizer.Add(flagdatalabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.flagdatatxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        flagdatasizer.Add(self.flagdatatxc, 1, 0, 0)
        controlsizer = wx.BoxSizer(wx.HORIZONTAL)
        controllabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "CONTROL")
        controlsizer.Add(controllabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.controltxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        controlsizer.Add(self.controltxc, 1, 0, 0)
        pkgtypesizer = wx.BoxSizer(wx.HORIZONTAL)
        pkgtypelabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Package Type")
        pkgtypesizer.Add(pkgtypelabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.pkgtypetxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        pkgtypesizer.Add(self.pkgtypetxc, 1, 0, 0)
        fileversizer = wx.BoxSizer(wx.HORIZONTAL)
        fileverlabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "File Version")
        fileversizer.Add(fileverlabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.filevertxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        fileversizer.Add(self.filevertxc, 1, 0, 0)

        statnetworksizer.Add(packageidsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(devicetypesizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(channelsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(fwversizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(sdpversizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(transidsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(rssisizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(spiversizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(flagdatasizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(controlsizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(pkgtypesizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statnetworksizer.Add(fileversizer, 0, wx.RIGHT|wx.EXPAND, 0)

        #Sensor Data Controls
        temperaturesizer = wx.BoxSizer(wx.HORIZONTAL)
        temperaturelabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Temperature")
        temperaturesizer.Add(temperaturelabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.temperaturetxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        temperaturesizer.Add(self.temperaturetxc, 1, 0, 0)
        humiditysizer = wx.BoxSizer(wx.HORIZONTAL)
        humiditylabel = wx.StaticText(nmstat_pane, wx.ID_ANY, "Humidity")
        humiditysizer.Add(humiditylabel, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.humiditytxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        humiditysizer.Add(self.humiditytxc, 1, 0, 0)
        port1sizer = wx.BoxSizer(wx.HORIZONTAL)
        port1label = wx.StaticText(nmstat_pane, wx.ID_ANY, "Port 1")
        port1sizer.Add(port1label, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.port1typetxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, size=(40,-1), style=tc_stat_style)
        self.port1valtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        port1sizer.Add(self.port1typetxc, 0, 0, 0)
        port1sizer.Add(self.port1valtxc, 1, 0, 0)
        port2sizer = wx.BoxSizer(wx.HORIZONTAL)
        port2label = wx.StaticText(nmstat_pane, wx.ID_ANY, "Port 2")
        port2sizer.Add(port2label, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.port2typetxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, size=(40,-1), style=tc_stat_style)
        self.port2valtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        port2sizer.Add(self.port2typetxc, 0, 0, 0)
        port2sizer.Add(self.port2valtxc, 1, 0, 0)
        port3sizer = wx.BoxSizer(wx.HORIZONTAL)
        port3label = wx.StaticText(nmstat_pane, wx.ID_ANY, "Port 3")
        port3sizer.Add(port3label, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        self.port3typetxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, size=(40,-1), style=tc_stat_style)
        self.port3valtxc = wx.TextCtrl(nmstat_pane, wx.ID_ANY, style=tc_stat_style)
        port3sizer.Add(self.port3typetxc, 0, 0, 0)
        port3sizer.Add(self.port3valtxc, 1, 0, 0)
        statsensorsizer.Add(temperaturesizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(humiditysizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(port1sizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(port2sizer, 0, wx.RIGHT|wx.EXPAND, 0)
        statsensorsizer.Add(port3sizer, 0, wx.RIGHT|wx.EXPAND, 0)

        statcommsizer.Add(self.tc_commish_list, 1, wx.GROW, 0)
        statroguesizer.Add(self.tc_rogue_list, 1, wx.GROW, 0)
        statorphsizer.Add(self.tc_orphan_list, 1, wx.GROW, 0)

        statussizer = wx.BoxSizer(wx.HORIZONTAL)
        commsizer = wx.BoxSizer(wx.HORIZONTAL)

        statussizer.Add(statdevicesizer, 1, wx.EXPAND, 0)
        statussizer.Add(statnetworksizer, 1, wx.EXPAND, 0)
        statussizer.Add(statsensorsizer, 1, wx.EXPAND, 0)
        commsizer.Add(statcommsizer, 1, wx.EXPAND, 0)
        commsizer.Add(statroguesizer, 1, wx.EXPAND, 0)
        commsizer.Add(statorphsizer, 1, wx.EXPAND, 0)

        p2sizer = wx.BoxSizer(wx.VERTICAL)
        p2sizer.Add(statussizer, 1, wx.GROW|wx.ALL, 5)
        p2sizer.Add(commsizer, 1, wx.GROW|wx.ALL, 5)
        nmstat_pane.SetSizerAndFit(p2sizer)

        nmSplitter.SplitVertically(tree_pane, nmstat_pane, 1)

        spsizer = wx.BoxSizer(wx.VERTICAL)
        spsizer.Add(nmSplitter, 1, wx.EXPAND, 0)

        self.SetAutoLayout(1)
        self.SetSizerAndFit(spsizer)
        spsizer.SetSizeHints(self)
        self.Layout()
        self.Show()

    #def OnRemove(self, events):
    #    """Remove device from commission list and network tables."""
    #    global frame_seWSNView
    #    frame_seWSNView.OnSendRemoveNode(None)

class PageTerminalView(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent=parent, id=wx.ID_ANY)
        #sizer = wx.BoxSizer(wx.VERTICAL)
        self.text_ctrl_output = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.text_ctrl_output, 1, wx.EXPAND, 0)
        #self.SetAutoLayout(1)
        self.SetSizer(sizer)
        self.Layout()

class PageManufacturingTest(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        #t = wx.StaticText(self, -1, "This is a MFG Test object", (20,20))
        self.mfg_txc = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.mfg_txc, 1, wx.EXPAND, 0)
        self.SetSizer(sizer)
        self.Layout()

class PageIntendedEmission(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        t = wx.StaticText(self, -1, "This is the Intended Emission Test object", (20,20))
        self.Layout()
        #self.Show()

class PageTopologyMap(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        t = wx.StaticText(self, -1, "This is a Topology object", (20,20))
        self.Layout()
        #self.Show()

class seWSNViewLayout(wx.Frame):
   pageTerminal = None
   pageNetMon = None
   pageMFG = None
   global openJoin

   # constructor for the toplevel layout
   def __init__(self, *args, **kwds):
      global pageTerminal
      global pageNetMon
      global seWSNsb
      global statusbarframe
      global pageMFG
      self.XAddr = ''
      self.serial = serial.Serial()
      self.serial.timeout = 0.5   #make sure that the alive event can be checked from time to time
      self.settings = TerminalSetup() #placeholder for the settings
      self.thread = None
      self.alive = threading.Event()

      kwds["style"] = wx.DEFAULT_FRAME_STYLE
      wx.Frame.__init__(self, *args, **kwds)
      seicon = wx.Icon('seIcon.ico', wx.BITMAP_TYPE_ICO, 16, 16)
      wx.Frame.SetIcon(self, seicon)

      seWSNsb = seWSNStatusbar(self)
      statusbarframe = self
      # Menu Bar
      mb = seWSNMenubar(self)
      # Menu Bar end

      # Tool Bar
      tb = seWSNToolbar(self)
      # Tool Bar end

      # Notebook
      p = wx.Panel(self)
      nb = wx.Notebook(p)

      pageNetMon = PageNetworkMonitor(nb)
      pageTerminal = PageTerminalView(nb)
      pageMFG = PageManufacturingTest(nb)
      pageFCC = PageIntendedEmission(nb)
      pageTopo = PageTopologyMap(nb)

      nb.AddPage(pageNetMon, "Network Monitor")
      nb.AddPage(pageTerminal, "Terminal View")
      nb.AddPage(pageMFG, "MFG Test")
      nb.AddPage(pageFCC, "Intended Emission")
      nb.AddPage(pageTopo, "Topology Map")
      nbsizer = wx.BoxSizer()
      nbsizer.Add(nb, 1, wx.EXPAND)
      p.SetSizer(nbsizer)
      # Notebook end

      self.__set_properties()
      #self.__do_layout()
      # end wxGlade
      self.__attach_events()          #register events

      #added for xbee interpreter
      self.Argus= XBeeBase(self.serial)

      self.OnConfigFileSelect(None)

      self.OnPortSettings(None)       #call setup dialog on startup, opens port
      if not self.alive.isSet():
          self.Close()
      #added for xbee interpreter
      #self.Argus= XBeeBase(self.serial)
      self.OnSendStatusReq(None)

      rt = RepeatedTimer(5, self.UpdateGaugeDisplay, None)


   def __set_properties(self):
      # begin wxGlade: TerminalFrame.__set_properties
      self.SetTitle("SE Wireless Development Tool")
      self.SetSize((1300, 900))
      # end wxGlade

   #def __do_layout(self):
   #   # begin wxGlade: TerminalFrame.__do_layout
   #   sizer_1 = wx.BoxSizer(wx.VERTICAL)
   #   sizer_1.Add(self.text_ctrl_output, 1, wx.EXPAND, 0)
   #   self.SetAutoLayout(1)
   #   self.SetSizer(sizer_1)
   #   self.Layout()
      # end wxGlade

   def __attach_events(self):
      global pageNetMon
      #register events at the controls
      self.Bind(wx.EVT_MENU, self.OnClear, id = ID_CLEAR)
      self.Bind(wx.EVT_MENU, self.OnSaveAs, id = ID_SAVEAS)
      self.Bind(wx.EVT_MENU, self.OnExit, id = ID_EXIT)
      self.Bind(wx.EVT_MENU, self.OnPortSettings, id = ID_SETTINGS)
      self.Bind(wx.EVT_MENU, self.OnTermSettings, id = ID_TERM)
      self.Bind(wx.EVT_MENU, self.OnConfigFileSelect, id = ID_COM_LIST)
      self.Bind(wx.EVT_MENU, self.OnSendHotShot, id = ID_SEND_HOTSHOT)
      self.Bind(wx.EVT_MENU, self.OnSendStatusReq, id = ID_SEND_STATUSREQ)
      self.Bind(wx.EVT_MENU, self.OnSendSJoinAccept, id = ID_SEND_SJOIN_ACCEPT)
      self.Bind(wx.EVT_MENU, self.OnSendRemoveNode, id = ID_SEND_REMOVE_NODE)
      self.Bind(wx.EVT_MENU, self.OnSendTimeResponse, id = ID_SEND_TIME_RESP)
      self.Bind(wx.EVT_MENU, self.OnSendQNPResponse, id = ID_SEND_QNP_RESP)
      self.Bind(wx.EVT_MENU, self.OnSendPEResponse, id = ID_SEND_PE_RESP)
      self.Bind(wx.EVT_MENU, self.OnSendRMTCommand, id = ID_SEND_RMT_CMD)
      self.Bind(wx.EVT_MENU, self.OnSendColdShot, id = ID_SEND_COLDSHOT)
      self.Bind(wx.EVT_MENU, self.OnHelp, id = ID_HELP)
      pageTerminal.text_ctrl_output.Bind(wx.EVT_CHAR, self.OnKey)
      #pageNetMon.tc_commish_list.Bind(wx.EVT_CHAR, self.OnKey)
      pageNetMon.tree_ctrl.Bind(wx.EVT_TREE_SEL_CHANGED, self.UpdateStatusDisplay)
      #self.Bind(wx.EVT_BUTTON, self.OnSendRemoveNode, id = pageNetMon.removebutton.GetId())
      pageNetMon.removebutton.Bind(wx.EVT_BUTTON, self.OnSendRemoveNode, id = pageNetMon.removebutton.GetId())
      self.Bind(EVT_SERIALRX, self.OnSerialRead)
      self.Bind(wx.EVT_CLOSE, self.OnClose)

   def StartThread(self):
      """Start the receiver thread"""
      self.thread = threading.Thread(target=self.ComPortArgusThread)
      self.thread.setDaemon(1)
      self.alive.set()
      self.thread.start()

   def StopThread(self):
      """Stop the receiver thread, wait util it's finished."""
      if self.thread is not None:
         self.alive.clear()          #clear alive event for thread
         self.thread.join()          #wait until thread has finished
         self.thread = None

   def OnPortSettings(self, event=None):
      """Show the portsettings dialog. The reader thread is stopped for the
         settings change."""
      if event is not None:           #will be none when called on startup
         self.StopThread()
         self.serial.close()
      ok = False
      while not ok:
         dialog_serial_cfg = wxSerialConfigDialog.SerialConfigDialog(None, -1, "",
            show=wxSerialConfigDialog.SHOW_BAUDRATE|wxSerialConfigDialog.SHOW_FORMAT|wxSerialConfigDialog.SHOW_FLOW,
            serial=self.serial
         )
         result = dialog_serial_cfg.ShowModal()
         dialog_serial_cfg.Destroy()
         #open port if not called on startup, open it on startup and OK too
         if result == wx.ID_OK or event is not None:
            try:
               self.serial.open()
            except serial.SerialException, e:
               dlg = wx.MessageDialog(None, str(e), "Serial Port Error", wx.OK | wx.ICON_ERROR)
               dlg.ShowModal()
               dlg.Destroy()
            else:
               self.StartThread()
               self.SetTitle("SE Wireless Development Tool on %s [%s, %s%s%s%s%s]" % (
                  self.serial.portstr,
                  self.serial.baudrate,
                  self.serial.bytesize,
                  self.serial.parity,
                  self.serial.stopbits,
                  self.serial.rtscts and ' RTS/CTS' or '',
                  self.serial.xonxoff and ' Xon/Xoff' or '',
                  )
               )
               ok = True
         else:
             #on startup, dialog aborted
             self.alive.clear()
             ok = True

   def OnPause(self, event=None):
      global terminalPaused
      terminalPaused = True

   def OnPlay(self, event=None):
      global terminalBuffer
      global terminalPaused
      for eachLine in terminalBuffer:
         pageTerminal.text_ctrl_output.AppendText(eachLine)
      terminalPaused = False
      terminalBuffer[:] = []

   def OnFeatureNotImp(self, event=None):
      """Feature not implemented. Show the settings dialog
         with the current commission list settings"""
      dialog = FeatureNotImplementedDialog(None, -1, "", settings=self.settings)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnConfigFileSelect(self, event=None):
      """Tool point Commission List Settings. Show the settings dialog
         with the current commission list settings"""
      dialog = ConfigFileDialog(None, -1, "", settings=self.settings)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnCommissionList(self, event):
      """Tool point Commission List Settings. Show the settings dialog
         with the current commission list settings"""
      dialog = CommissionListDialog(None, -1, "", settings=self.settings)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnTermSettings(self, event):
      """Menu point Terminal Settings. Show the settings dialog
         with the current terminal settings"""
      dialog = TerminalSettingsDialog(None, -1, "", settings=self.settings)
      result = dialog.ShowModal()
      dialog.Destroy()

   def OnExit(self, event):
      """Menu point Exit"""
      global outfile
      outfile.close()
      self.StopThread()               #stop reader thread
      self.serial.close()             #cleanup
      self.Close()
      self.Destroy()                  #close windows, exit app
      sys.exit(1)
      #os._exit(1)

   def OnClose(self, event):
      """Called on application shutdown."""
      global outfile
      outfile.close()
      self.StopThread()               #stop reader thread
      self.serial.close()             #cleanup
      self.Destroy()                  #close windows, exit app
      sys.exit(1)
      #os._exit(1)

   def OnSaveAs(self, event):
      """Save contents of output window."""
      filename = None
      dlg = wx.FileDialog(None, "Save Text As...", ".", "", "Text File|*.txt|All Files|*",  wx.SAVE)
      if dlg.ShowModal() ==  wx.ID_OK:
         filename = dlg.GetPath()
      dlg.Destroy()

      if filename is not None:
         #result = pageTerminal.text_ctrl_output.SaveFile(filename=filename, fileType=TEXT_TYPE_ANY)
         f = file(filename, 'w')
         text = pageTerminal.text_ctrl_output.GetValue()
         if type(text) == unicode:
            text = text.encode("latin1")    #hm, is that a good asumption?
         f.write(text)
         f.close()

   def OnClear(self, event):
      """Clear contents of output window."""
      pageTerminal.text_ctrl_output.Clear()
      #pageNetMon.tc_commish_list.Clear()
      #pageNetMon.tc_orphan_list.Clear()
      """Clear display data."""
      global pageNetMon
      global joinList
      for item in joinList:
          item.clear()
      joinList[0] = {'mac':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
           'packageid':' ', 'devtype':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
           'temp':' ', 'humid':' ',
           'port1type':' ', 'port2type':' ', 'port3type':' ',
           'port1val':' ', 'port2val':' ', 'port3val':' ',
           'port1err':' ', 'port2err':' ', 'port3err':' ',
           'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
           'control':' ', 'pkgtype':' ', 'filever':' '}

      pageNetMon.tree_ctrl.DeleteAllItems()
      pageNetMon.packageidtxc.Clear()
      pageNetMon.macaddrtxc.Clear()
      pageNetMon.skunumtxc.Clear()
      pageNetMon.sernumtxc.Clear()
      pageNetMon.mfgdatetxc.Clear()
      pageNetMon.hwvertxc.Clear()
      pageNetMon.batterytxc.Clear()
      pageNetMon.utctmtxc.Clear()
      pageNetMon.manidtxc.Clear()
      pageNetMon.statustxc.Clear()
      pageNetMon.sdptimertxc.Clear()
      pageNetMon.sdptimergauge.SetValue(0)
      pageNetMon.devicetypetxc.Clear()
      pageNetMon.channeltxc.Clear()
      pageNetMon.fwvertxc.Clear()
      pageNetMon.sdpvertxc.Clear()
      pageNetMon.transidtxc.Clear()
      pageNetMon.rssitxc.Clear()
      pageNetMon.temperaturetxc.Clear()
      pageNetMon.humiditytxc.Clear()
      pageNetMon.port1typetxc.Clear()
      pageNetMon.port1valtxc.Clear()
      pageNetMon.port2typetxc.Clear()
      pageNetMon.port2valtxc.Clear()
      pageNetMon.port3typetxc.Clear()
      pageNetMon.port3valtxc.Clear()
      pageNetMon.spivertxc.Clear()
      pageNetMon.flagdatatxc.Clear()
      pageNetMon.controltxc.Clear()
      pageNetMon.pkgtypetxc.Clear()
      pageNetMon.filevertxc.Clear()
      self.OnSendStatusReq(None)

   def UpdatePageTerminal(self, outputstr):
      global terminalBuffer
      global terminalPaused
      if terminalPaused:
         terminalBuffer.append(outputstr)
      else:
         pageTerminal.text_ctrl_output.AppendText(outputstr)

   def OnSendHotShot(self, event):
      #HotShot = (0xFE, 0x01, 0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x04, 0x03)
      HotShot = "\xFE\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x03"
      self.serial.write(HotShot)
      self.UpdatePageTerminal("\n ====> Hot Shot \n")
      self.UpdatePageTerminal("\r\n")

   def OnSendListModify(self, event):
      #Commission List Modified command
      ListMod = "\xFE\x01\x00\x00\x00\x00\x00\x00\x00\x00\x03\x01\x0E\x11"
      self.serial.write(ListMod)
      self.UpdatePageTerminal("\n ====> Commission List Modified \n")
      self.UpdatePageTerminal("\r\n")

   def OnSendCriticalAck(self, event):
      #StatusReq = "\xFE\x03\x00\x00\x00\x00\x00\x00\x00\x00\xhh\x00\x80\xHH\x01\xcs"
      global hostTransID
      StatusReq = "\xFE"
      StatusReq += "\x03" #command length
      StatusReq += "\x00\x00\x00\x00\x00\x00\x00\x00"
      StatusReq += pack('B', int(hostTransID)%256) #Host Trans ID
      StatusReq += "\x00" #bits
      StatusReq += "\x80" #command ID
      StatusReq += pack('B', int(event.data['transID'].hex(), 16)%256) #rx'd trans ID
      StatusReq += "\x01" #OTW Ack
      StatusReq += checksum(StatusReq)
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> Critical Ack\n")
      self.UpdatePageTerminal("\n")
      self.UpdatePageTerminal(StatusReq.hex())
      self.UpdatePageTerminal("\r\n")
      hostTransID += 1

   def OnSendStatusReq(self, event):
      StatusReq = "\xFE\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01"
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> Status Request\n")
      self.UpdatePageTerminal("\r\n")

   def OnSendRemoveNode(self, event):
      #StatusReq = "\xFE\x09\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x23\x00\x00\x00\x00\x00\x00\x00\x00\xcs"
      global pageNetMon
      global joinList
      global hostTransID
      treeItem = pageNetMon.tree_ctrl.GetSelection()
      treeItemText = pageNetMon.tree_ctrl.GetItemText(treeItem)
      selctedDeviceInList = next((item for item in joinList if item["mac"]==treeItemText),None)

      StatusReq = "\xFE"
      StatusReq += "\x09" #command length
      StatusReq += "\x00\x00\x00\x00\x00\x00\x00\x00" #XAddr of coordinator
      StatusReq += pack('B', int(hostTransID)%256) #host trans ID
      StatusReq += "\x01" #OTW Ack
      StatusReq += "\x23" #Command ID

      if selctedDeviceInList['devtype'] == "Router":
         v = 2
      elif selctedDeviceInList['devtype'] == "End Device":
         v = 2
      else:
         v = "\xFF"
      StatusReq += pack('B', int(v)%256) #Device Type
      if pageNetMon.notfoundcheckbox.GetValue() and pageNetMon.removemactxc.GetLineLength(0) == 16:
         tempstr = pageNetMon.removemactxc.GetLineText(0)
         macstr = tempstr.decode('hex')
      else:
         macstr = selctedDeviceInList['mac'].decode('hex')
      for b in reversed(macstr):
         StatusReq += pack('B', int(b.hex(), 16)%256)
      StatusReq += checksum(StatusReq)
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> Remove Node\n")
      self.UpdatePageTerminal("\n")
      self.UpdatePageTerminal(StatusReq.hex())
      self.UpdatePageTerminal("\r\n")
      hostTransID += 1

   def OnSendSJoinAccept(self, event):
      #StatusReq = "\xFE\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x19\x01\x1f\xcd\x2e\x02\x00\xb7\xc0\x00\xb6"
      StatusReq = "\xFE"
      StatusReq += "\x0a" #command length
      StatusReq += "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"
      StatusReq += "\x19" #command ID
      StatusReq += "\x01" #Join granted, 0x00 reject
      #StatusReq += "\xa4\x83\x8c\x00\x00\xb7\xc0\x00"
      #now we need to get the IEEE mac from the request and send it back.
      StatusReq += self.XAddr
      StatusReq += checksum(StatusReq)
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> SJoin Granted\n")
      self.UpdatePageTerminal("\r\n")

   def OnSendSJoinReject(self, event):
      #StatusReq = "\xFE\x0a\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x19\x01\x1f\xcd\x2e\x02\x00\xb7\xc0\x00\xb6"
      StatusReq = "\xFE"
      StatusReq += "\x0a" #command length
      StatusReq += "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"
      StatusReq += "\x19" #command ID
      StatusReq += "\x00" #Join granted, 0x00 reject
      #StatusReq += "\xa4\x83\x8c\x00\x00\xb7\xc0\x00"
      #now we need to get the IEEE mac from the request and send it back.
      StatusReq += self.XAddr
      StatusReq += checksum(StatusReq)
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> SJoin Rejected\n")
      self.UpdatePageTerminal("\r\n")

   def OnSendTimeResponse(self, event):
      #StatusReq = "\xFE\x05\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x1f\x1a\x91\x2f\x67\x64"
      StatusReq = "\xFE"
      StatusReq += "\x05" #command length
      StatusReq += "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"
      StatusReq += "\x1f" #command ID
      StatusReq += "\x1a\x91\x2f\x67"
      StatusReq += checksum(StatusReq)
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> Time Request Responded\n")
      self.UpdatePageTerminal(StatusReq.hex())
      self.UpdatePageTerminal("\r\n")

   def OnSendPEResponse(self, event):
      StatusReq = "\xFE\x12\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x1d\x04\xf4\xc4\x04\x11\x01\x00\x01\x00\x1a\xc3\x4a\xbb\xff\xff\xff\xff"
      StatusReq += checksum(StatusReq)
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> Package End Request Responded\n")
      self.UpdatePageTerminal("\r\n")

   def OnSendRMTCommand(self, event):
      global pageNetMon
      global joinList
      treeItem = pageNetMon.tree_ctrl.GetSelection()
      treeItemText = pageNetMon.tree_ctrl.GetItemText(treeItem)
      selctedDeviceInList = next((item for item in joinList if item["mac"]==treeItemText),None)

      StatusReq = "\xFE\x0D\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x20"
      if pageNetMon.notfoundcheckbox.GetValue() and pageNetMon.removemactxc.GetLineLength(0) == 16:
         tempstr = pageNetMon.removemactxc.GetLineText(0)
         macstr = tempstr.decode('hex')
      else:
         macstr = selctedDeviceInList['mac'].decode('hex')
      for b in reversed(macstr):
         StatusReq += pack('B', int(b.hex(), 16)%256)
      StatusReq += "\x09\x31\x32\x33\x34\x35\x36\x37\x38\x39" #this is the body of remote cmmand, length + contents
      StatusReq += checksum(StatusReq)
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> OTA Remote Command Issued\n")
      self.UpdatePageTerminal("\r\n")

   def OnSendColdShot(self, event):
      StatusReq = "\xFE\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x14"
      StatusReq += checksum(StatusReq)
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> Send Cold Shot\n")
      self.UpdatePageTerminal("\r\n")

   def OnSendQNPResponse(self, event):
      #StatusReq = "\xFE\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x1b\x01\xf4\xc4\x04\x11\x01\x00\x01\x00\x5c\xea\x02\x00"
      StatusReq = "\xFE"
      StatusReq += "\x0e" #command length
      StatusReq += "\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00"
      StatusReq += "\x1b" #command ID
      StatusReq += "\x00" #control bits: 01 - get a file, 00 - no file.
      StatusReq += "\xf4\xc4" #man ID
      pktpstr = event.data['PKGTYPE']
      for b in pktpstr:
         StatusReq += pack('B', int(b.hex(), 16)%256)
      #StatusReq += "\x04\x11" #package ID
      flvrstr = event.data['FILEVER']
      for b in flvrstr:
         StatusReq += pack('B', int(b.hex(), 16)%256)
      #StatusReq += "\x39\x1f\x01\x00" #file version
      StatusReq += "\x00\x5c\xea\x02" #file length
      StatusReq += checksum(StatusReq)
      self.serial.write(StatusReq)
      self.UpdatePageTerminal("\n ====> QNP Request Responsed\n")
      self.UpdatePageTerminal("\n")
      self.UpdatePageTerminal(StatusReq.hex())
      self.UpdatePageTerminal("\r\n")


   def OnKey(self, event):
      """Key event handler. if the key is in the ASCII range, write it to the serial port.
         Newline handling and local echo is also done here."""
      code = event.GetKeyCode()
      if code < 256:                          #is it printable?
         if code == 13:                      #is it a newline? (check for CR which is the RETURN key)
            if self.settings.echo:          #do echo if needed
               self.UpdatePageTerminal('\n')
            if self.settings.newline == NEWLINE_CR:
               self.serial.write('\r')     #send CR
            elif self.settings.newline == NEWLINE_LF:
               self.serial.write('\n')     #send LF
            elif self.settings.newline == NEWLINE_CRLF:
               self.serial.write('\r\n')   #send CR+LF
         else:
            char = chr(code)
            if self.settings.echo:          #do echo if needed
               pageTerminal.text_ctrl_output.WriteText(char)
            self.serial.write(char)         #send the charcater
      else:
         print("Extra Key:"), code

   def UpdateGaugeDisplay(self, event):
      global pageNetMon
      global joinList
      for tmitem in joinList:
         tmitem["laptime"] += 5
      treeItem = pageNetMon.tree_ctrl.GetSelection()
      treeItemText = pageNetMon.tree_ctrl.GetItemText(treeItem)
      selctedDeviceInList = next((item for item in joinList if item["mac"]==treeItemText),None)
      if selctedDeviceInList != None:
         if selctedDeviceInList['laptime'] < 185:
            pageNetMon.sdptimergauge.SetValue(selctedDeviceInList['laptime'])
         elif selctedDeviceInList['laptime'] > 185 and selctedDeviceInList['laptime'] < 210:
            pageNetMon.sdptimergauge.SetValue(185)
            #pageNetMon.sdptimertxc.SetStyle(wx.TextAttr(wx.NullColour, wx.YELLOW))
            pageNetMon.sdptimertxc.SetBackgroundColour(wx.YELLOW)
         elif selctedDeviceInList['laptime'] > 210:
            pageNetMon.sdptimergauge.SetValue(185)
            #pageNetMon.sdptimertxc.SetStyle(wx.TestAttr(wx.NullColour, wx.RED))
            pageNetMon.sdptimertxc.SetBackgroundColour(wx.RED)
         pageNetMon.sdptimertxc.Clear()
         pageNetMon.sdptimertxc.AppendText(str(selctedDeviceInList['laptime']))

   def UpdateStatusDisplay(self, event):
      global pageNetMon
      global joinList
      treeItem = pageNetMon.tree_ctrl.GetSelection()
      treeItemText = pageNetMon.tree_ctrl.GetItemText(treeItem)
      selctedDeviceInList = next((item for item in joinList if item["mac"]==treeItemText),None)
      if selctedDeviceInList != None:
         pageNetMon.macaddrtxc.Clear()
         pageNetMon.macaddrtxc.AppendText(selctedDeviceInList['mac'])
         pageNetMon.skunumtxc.Clear()
         pageNetMon.skunumtxc.AppendText(selctedDeviceInList['sku'])
         pageNetMon.sernumtxc.Clear()
         pageNetMon.sernumtxc.AppendText(selctedDeviceInList['serial'])
         pageNetMon.mfgdatetxc.Clear()
         pageNetMon.mfgdatetxc.AppendText(selctedDeviceInList['mfgdate'])
         pageNetMon.hwvertxc.Clear()
         pageNetMon.hwvertxc.AppendText(selctedDeviceInList['hwvers'])
         pageNetMon.batterytxc.Clear()
         pageNetMon.batterytxc.AppendText(selctedDeviceInList['battery'])
         pageNetMon.utctmtxc.Clear()
         pageNetMon.utctmtxc.AppendText(selctedDeviceInList['utctime'])
         pageNetMon.manidtxc.Clear()
         pageNetMon.manidtxc.AppendText(selctedDeviceInList['manid'])
         pageNetMon.statustxc.Clear()
         pageNetMon.statustxc.AppendText(selctedDeviceInList['status'])
         pageNetMon.sdptimertxc.Clear()
         pageNetMon.sdptimertxc.AppendText(str(selctedDeviceInList['laptime']))
         if selctedDeviceInList['laptime'] < 185:
            pageNetMon.sdptimergauge.SetValue(selctedDeviceInList['laptime'])
            pageNetMon.sdptimertxc.SetBackgroundColour(wx.NullColour)
         elif selctedDeviceInList['laptime'] > 185 and selctedDeviceInList['laptime'] < 210:
            pageNetMon.sdptimergauge.SetValue(185)
            pageNetMon.sdptimertxc.SetBackgroundColour(wx.YELLOW)
         elif selctedDeviceInList['laptime'] > 210:
            pageNetMon.sdptimergauge.SetValue(185)
            pageNetMon.sdptimertxc.SetBackgroundColour(wx.RED)
         #pageNetMon.sdptimergauge.SetValue(selctedDeviceInList['laptime'])
         pageNetMon.packageidtxc.Clear()
         pageNetMon.packageidtxc.AppendText(selctedDeviceInList['packageid'])
         pageNetMon.devicetypetxc.Clear()
         pageNetMon.devicetypetxc.AppendText(selctedDeviceInList['devtype'])
         pageNetMon.channeltxc.Clear()
         pageNetMon.channeltxc.AppendText(selctedDeviceInList['chan'])
         pageNetMon.fwvertxc.Clear()
         pageNetMon.fwvertxc.AppendText(selctedDeviceInList['fwvers'])
         pageNetMon.sdpvertxc.Clear()
         pageNetMon.sdpvertxc.AppendText(selctedDeviceInList['sdpvers'])
         pageNetMon.transidtxc.Clear()
         pageNetMon.transidtxc.AppendText(selctedDeviceInList['transid'])
         pageNetMon.rssitxc.Clear()
         pageNetMon.rssitxc.AppendText(selctedDeviceInList['rssi'])
         pageNetMon.temperaturetxc.Clear()
         pageNetMon.temperaturetxc.AppendText(selctedDeviceInList['temp'])
         pageNetMon.humiditytxc.Clear()
         pageNetMon.humiditytxc.AppendText(selctedDeviceInList['humid'])
         pageNetMon.port1typetxc.Clear()
         pageNetMon.port1typetxc.AppendText(selctedDeviceInList['port1type'])
         pageNetMon.port1valtxc.Clear()
         pageNetMon.port1valtxc.AppendText(selctedDeviceInList['port1val'])
         pageNetMon.port2typetxc.Clear()
         pageNetMon.port2typetxc.AppendText(selctedDeviceInList['port2type'])
         pageNetMon.port2valtxc.Clear()
         pageNetMon.port2valtxc.AppendText(selctedDeviceInList['port2val'])
         pageNetMon.port3typetxc.Clear()
         pageNetMon.port3typetxc.AppendText(selctedDeviceInList['port3type'])
         pageNetMon.port3valtxc.Clear()
         pageNetMon.port3valtxc.AppendText(selctedDeviceInList['port3val'])
         pageNetMon.spivertxc.Clear()
         pageNetMon.spivertxc.AppendText(selctedDeviceInList['spiver'])
         pageNetMon.flagdatatxc.Clear()
         pageNetMon.flagdatatxc.AppendText(selctedDeviceInList['flagdata'])
         pageNetMon.controltxc.Clear()
         pageNetMon.controltxc.AppendText(selctedDeviceInList['control'])
         pageNetMon.pkgtypetxc.Clear()
         pageNetMon.pkgtypetxc.AppendText(selctedDeviceInList['pkgtype'])
         pageNetMon.filevertxc.Clear()
         pageNetMon.filevertxc.AppendText(selctedDeviceInList['filever'])

   def addDictToList(self, event):
      global joinList
      global packageid_holder
      global control_holder
      global pkgtype_holder
      global filever_holder
      global ManID_holder
      global status_holder
      global pageNetMon
      newdeviceRec = {}

      deviceInList = next((item for item in joinList if item["mac"]==str(event.data['xA'][::-1].hex())),None)
      if deviceInList != None:
         deviceInList['sku'] = str(event.data['SKU'][::-1])
         deviceInList['serial'] = event.data['Serial'][::-1]
         mfgdatestr = str(event.data['Mfg_date'][::-1].hex())
         mfgdatecln = mfgdatestr[1]+mfgdatestr[3]+'/'+mfgdatestr[5]+mfgdatestr[7]+'/'+mfgdatestr[9]+mfgdatestr[11]+mfgdatestr[13]+mfgdatestr[15]
         deviceInList['mfgdate'] = mfgdatecln #event.data['Mfg_date'][::-1].hex()
         deviceInList['hwvers'] = event.data['HW_version'][::-1].hex()
         deviceInList['battery'] = str("%1.1f" % (3.45*int(event.data['battery'][::-1].hex(), 16)/2047))
         deviceInList['utctime'] = event.data['UTC_Time'][::-1].hex()
         deviceInList['manid'] = ManID_holder
         deviceInList['status'] = status_holder
         deviceInList['laptime'] = 0
         #pageNetMon.sdptimertxc.SetStyle(wx.TextAttr(wx.NullColour, wx.LIGHT_GREY))
         pageNetMon.sdptimertxc.SetBackgroundColour(wx.NullColour)
         deviceInList['packageid'] = packageid_holder
         v = int(event.data['Device_type'].hex(), 16)
         if v == 0:
            v = "Coodinator"
         elif v == 1:
            v = "Router"
         else:
            v = "End Device"
         deviceInList['devtype'] = v
         deviceInList['chan'] = str(int(event.data['Channel_ID'].hex(), 16 ))
         deviceInList['fwvers'] = event.data['FW_version'][::-1].hex()
         deviceInList['sdpvers'] = event.data['SDP_version'].hex()
         deviceInList['transid'] = str(int(event.data['tranID'].hex(), 16))
         deviceInList['rssi'] = str(int(event.data['rssi'].hex(), 16) - 255)
         deviceInList['temp'] = str(int(event.data['int_temp'][::-1].hex(), 16))
         deviceInList['humid'] = str(int(event.data['int_humid'][::-1].hex(), 16))
         deviceInList['port1type'] = event.data['Port1'][::-1].hex()
         deviceInList['port2type'] = event.data['Port2'][::-1].hex()
         deviceInList['port3type'] = event.data['Port3'][::-1].hex()
         deviceInList['port1val'] = event.data['Port1_Reading'][::-1].hex()
         deviceInList['port2val'] = event.data['Port2_Reading'][::-1].hex()
         deviceInList['port3val'] = event.data['Port3_Reading'][::-1].hex()
         deviceInList['port1err'] = ' '
         deviceInList['port2err'] = ' '
         deviceInList['port3err'] = ' '
         deviceInList['ctrlbits'] = str(int(event.data['controlBit'].hex(), 16 ))
         tempstr = str(event.data['downLoadedVersion'].hex())
         spiverstr = tempstr[4]+tempstr[5]+tempstr[2]+tempstr[3]+tempstr[0]+tempstr[1]
         spiverint = str(int(spiverstr,16))
         deviceInList['spiver'] = spiverstr+' ('+spiverint+')'
         deviceInList['flagdata'] = event.data['flags'].hex()
      else:
         newdeviceRec['mac'] = str(event.data['xA'][::-1].hex())
         newdeviceRec['sku'] = str(event.data['SKU'][::-1])
         newdeviceRec['serial'] = event.data['Serial'][::-1]
         mfgdatestr = str(event.data['Mfg_date'][::-1].hex())
         mfgdatecln = mfgdatestr[1]+mfgdatestr[3]+'/'+mfgdatestr[5]+mfgdatestr[7]+'/'+mfgdatestr[9]+mfgdatestr[11]+mfgdatestr[13]+mfgdatestr[15]
         newdeviceRec['mfgdate'] = mfgdatecln #event.data['Mfg_date'][::-1].hex()
         newdeviceRec['hwvers'] = event.data['HW_version'][::-1].hex()
         newdeviceRec['battery'] = str("%1.1f" % (3.45*int(event.data['battery'][::-1].hex(), 16)/2047))
         newdeviceRec['utctime'] = event.data['UTC_Time'][::-1].hex()
         newdeviceRec['manid'] = ManID_holder
         newdeviceRec['status'] = status_holder
         newdeviceRec['laptime'] = 0
         #pageNetMon.sdptimertxc.SetStyle(wx.TextAttr(wx.NullColour, wx.LIGHT_GREY))
         pageNetMon.sdptimertxc.SetBackgroundColour(wx.NullColour)
         newdeviceRec['packageid'] = packageid_holder
         v = int(event.data['Device_type'].hex(), 16)
         if v == 0:
            v = "Coodinator"
         elif v == 1:
            v = "Router"
         else:
            v = "End Device"
         newdeviceRec['devtype'] = v
         newdeviceRec['chan'] = str(int(event.data['Channel_ID'].hex(), 16 ))
         newdeviceRec['fwvers'] = event.data['FW_version'][::-1].hex()
         newdeviceRec['sdpvers'] = event.data['SDP_version'].hex()
         newdeviceRec['transid'] = str(int(event.data['tranID'].hex(), 16))
         newdeviceRec['rssi'] = str(int(event.data['rssi'].hex(), 16) - 255)
         newdeviceRec['temp'] = str(int(event.data['int_temp'][::-1].hex(), 16))
         newdeviceRec['humid'] = str(int(event.data['int_humid'][::-1].hex(), 16))
         newdeviceRec['port1type'] = event.data['Port1'][::-1].hex()
         newdeviceRec['port2type'] = event.data['Port2'][::-1].hex()
         newdeviceRec['port3type'] = event.data['Port3'][::-1].hex()
         newdeviceRec['port1val'] = event.data['Port1_Reading'][::-1].hex()
         newdeviceRec['port2val'] = event.data['Port2_Reading'][::-1].hex()
         newdeviceRec['port3val'] = event.data['Port3_Reading'][::-1].hex()
         newdeviceRec['port1err'] = ' '
         newdeviceRec['port2err'] = ' '
         newdeviceRec['port3err'] = ' '
         newdeviceRec['ctrlbits'] = str(int(event.data['controlBit'].hex(), 16 ))
         tempstr = str(event.data['downLoadedVersion'].hex())
         spiverstr = tempstr[4]+tempstr[5]+tempstr[2]+tempstr[3]+tempstr[0]+tempstr[1]
         spiverint = str(int(spiverstr,16))
         newdeviceRec['spiver'] = spiverstr+' ('+spiverint+')'
         #newdeviceRec['spiver'] = spiverstr
         newdeviceRec['flagdata'] = event.data['flags'].hex()
         newdeviceRec['control'] = control_holder
         newdeviceRec['pkgtype'] = pkgtype_holder
         newdeviceRec['filever'] = filever_holder
         joinList.append(newdeviceRec)

   def addMacToList(self, event):
      global joinList
      newdeviceRec = {'mac':0, 'sku':' ', 'serial':' ', 'mfgdate':' ', 'hwvers':' ', 'battery':' ', 'utctime':' ', 'laptime':0, 'manid':' ', 'status':' ',
             'packageid':' ', 'devtype':' ', 'chan':' ', 'fwvers':' ', 'sdpvers':' ', 'transid':' ', 'rssi':' ',
             'temp':' ', 'humid':' ',
             'port1type':' ', 'port2type':' ', 'port3type':' ',
             'port1val':' ', 'port2val':' ', 'port3val':' ',
             'port1err':' ', 'port2err':' ', 'port3err':' ',
             'ctrlbits':' ', 'rebootcause':' ', 'spiver':' ', 'flagdata':' ',
             'control':' ', 'pkgtype':' ', 'filever':' '}

      deviceInList = next((item for item in joinList if item["mac"]==str(event.data['XAddr'][::-1].hex())),None)
      if deviceInList == None:
         #for elems in newdeviceRec:
         #   newdeviceRec[elems] = ' '
         newdeviceRec['mac'] = str(event.data['XAddr'][::-1].hex())
         joinList.append(newdeviceRec)

   def addCoordToList(self, event):
      global joinList
      for elems in joinList[0]:
         joinList[0][elems] = ' '
      joinList[0]['mac'] = str(event.data['xA'][::-1].hex())
      joinList[0]['laptime'] = 0

   def updateDictInList(self, event):
      global joinList
      global packageid_holder
      global control_holder
      global pkgtype_holder
      global filever_holder
      global ManID_holder

      deviceInList = next((item for item in joinList if item["mac"]==str(event.data['xA'][::-1].hex())),None)
      if deviceInList != None:
         deviceInList['packageid'] = packageid_holder
         deviceInList['manid'] = ManID_holder
         deviceInList['control'] = control_holder #event.data['CONTROL'].hex()
         deviceInList['pkgtype'] = pkgtype_holder #event.data['PKGTYPE'].hex()
         deviceInList['filever'] = filever_holder #event.data['FILEVER'].hex()


   def OnSerialRead(self, event):
      global fileCounter
      global pageNetMon
      global commishList
      global orphanList
      global rogueList
      global openJoin
      global tmpcommishList
      global seWSNsb
      global root
      global ManID_holder
      global packageid_holder
      global control_holder
      global pkgtype_holder
      global filever_holder
      global status_holder
      """Handle input from the serial port."""
      id = event.data['id']
      packageid_holder = id
      print(format(event.data))
      #text = str(event.data)
      text = format(event.data)
      if self.settings.unprintable:
         text = ''.join([(c >= ' ') and c or '<%d>' % ord(c)  for c in text])
      if id == 'PANID':
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
      elif id == 'STATUS':
         if event.data['Reboot_Reason'] == '"':
            event.data['Reboot_Reason'] = "Cold Shot"
         elif event.data['Reboot_Reason'] == '!':
            event.data['Reboot_Reason'] = "OTA Remote Command"
         elif event.data['Reboot_Reason'] == '#':
            event.data['Reboot_Reason'] = "OTW Remove Node"
         elif event.data['Reboot_Reason'] == b"\x24":
            event.data['Reboot_Reason'] = "Remove Node Success"
         elif event.data['Reboot_Reason'] == b"\x25":
            event.data['Reboot_Reason'] = "Remove Node Failed"
         elif event.data['Reboot_Reason'] == b"\x26":
            event.data['Reboot_Reason'] = "Node Not Found"
         elif event.data['Reboot_Reason'] == b"\x19":
            event.data['Reboot_Reason'] = "Status OK"
         elif event.data['Reboot_Reason'] == b"\x16":
            event.data['Reboot_Reason'] = "Hot Shot Received"
         elif event.data['Reboot_Reason'] == b"\x17":
            event.data['Reboot_Reason'] = "ZC_ASYNC_HELLO_STATUS"
         elif event.data['Reboot_Reason'] == b"\x30":
            event.data['Reboot_Reason'] = "Cannot Form Network"
         elif event.data['Reboot_Reason'] == b"\x20":
            event.data['Reboot_Reason'] = "OTW Remote Command"
         else:
            event.data['Reboot_Reason'] = "Unknown Code"+' '+event.data['Reboot_Reason'].hex()
         text = format(event.data)
         status_holder = event.data['Reboot_Reason']
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
         if openJoin:
            if joinList[0]['mac'] == 0:
               self.addCoordToList(event)
               commishList.append(str(event.data['xA'][::-1].hex()))
               root = pageNetMon.tree_ctrl.AddRoot(str(event.data['xA'][::-1].hex()))
               pageNetMon.tree_ctrl.SelectItem(root, True)
               statusbarframe.SetStatusText('0'+" nodes connected to "+str(event.data['xA'][::-1].hex()))
         else: #not openJoin
            if str(event.data['xA'][::-1].hex()) in commishList:
               if joinList[0]['mac'] == 0:
                  self.addCoordToList(event)
                  root = pageNetMon.tree_ctrl.AddRoot(str(event.data['xA'][::-1].hex()))
                  pageNetMon.tree_ctrl.SelectItem(root, True)
                  statusbarframe.SetStatusText('0'+" nodes connected to "+str(event.data['xA'][::-1].hex()))
            else:
               #this is the coordinator
               if joinList[0]['mac'] == 0:
                  self.addCoordToList(event)
                  root = pageNetMon.tree_ctrl.AddRoot(str(event.data['xA'][::-1].hex()))
                  pageNetMon.tree_ctrl.SelectItem(root, True)
                  statusbarframe.SetStatusText('0'+" nodes connected to "+str(event.data['xA'][::-1].hex())+", NOT IN COMMISSOIN LIST!")
         joinList[0]['status'] = status_holder+' '+str(event.data['Serial'][::-1].hex())
         xtreeItem = pageNetMon.tree_ctrl.GetSelection()
         xtreeItemText = pageNetMon.tree_ctrl.GetItemText(xtreeItem)
         selctedDeviceInList = next((item for item in joinList if item["mac"]==xtreeItemText),None)
         if selctedDeviceInList != None:
            selctedDeviceInList['status'] = status_holder+' '+str(event.data['Serial'][::-1].hex())
            if status_holder == "Remove Node Success":
               #remove from commission list
               pageNetMon.tree_ctrl.SetItemBackgroundColour(xtreeItem, wx.RED)
               for mac in commishList:
                  if xtreeItemText == mac:
                     commishList.remove(mac)
         if not openJoin:
            pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
         pageNetMon.tc_commish_list.Clear()
         for eachComm in commishList:
            if eachComm != '':
               pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
         #if not openJoin:
         pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
         status_holder = ' '
         self.UpdateStatusDisplay(None)
      elif id == 'SJOIN_REQ':
         #self.text_ctrl_output.AppendText(str(int(event.data['XAddr'].hex(), 16)))
         self.XAddr = event.data['XAddr']
         #text = format(event.data)
         if not openJoin:
            if str(event.data['XAddr'][::-1].hex()) in commishList:
               #if there is no coordinator
               if joinList[0]['mac'] == 0:
                  #if this is the coordinator
                  if str(event.data['xA'][::-1].hex()) == str(event.data['XAddr'][::-1].hex()):
                     self.OnSendSJoinAccept(id)
                     text += "SEND SJOIN ACCEPT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     self.addCoordToList(event)
                     root = pageNetMon.tree_ctrl.AddRoot(str(event.data['XAddr'][::-1].hex()))
                     pageNetMon.tree_ctrl.SelectItem(root, True)
                     statusbarframe.SetStatusText('0'+" nodes connected to "+joinList[0]['mac'])
                  else:
                     self.OnSendSJoinReject(id)
                     text += "SEND SJOIN REJECT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     if str(event.data['XAddr'][::-1].hex()) not in rogueList:
                        rogueList.append(str(event.data['XAddr'][::-1].hex()))
                        pageNetMon.tc_rogue_list.Clear()
                        for eachrogue in rogueList:
                           pageNetMon.tc_rogue_list.AppendText(eachrogue + "\r\n")
               else:
                  self.OnSendSJoinAccept(id)
                  text += "SEND SJOIN ACCEPT"
                  self.UpdatePageTerminal("\r\n")
                  self.UpdatePageTerminal(text)
                  self.UpdatePageTerminal("\r\n")
                  sdeviceInList = next((item for item in joinList if item["mac"]==str(event.data['XAddr'][::-1].hex())),None)
                  self.addMacToList(event)  #Adds XAddr to list
                  if sdeviceInList == None:
                     oldroot = pageNetMon.tree_ctrl.GetRootItem()
                     item = pageNetMon.tree_ctrl.AppendItem(oldroot, str(event.data['XAddr'][::-1].hex()))
                     if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                        pageNetMon.tree_ctrl.Expand(oldroot)
                  else:
                     theroot = pageNetMon.tree_ctrl.GetRootItem()
                     theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
                     while theitem.IsOk():
                        if pageNetMon.tree_ctrl.GetItemText(theitem) == sdeviceInList["mac"]:
                           pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.WHITE)
                           break
                        theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)
                  statusbarframe.SetStatusText(str(len(joinList)-1)+" nodes connected to "+joinList[0]['mac'])
               pageNetMon.tc_commish_list.Clear()
               pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
               for eachComm in commishList:
                  if eachComm != '':
                     pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
               pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))

            else:
               #if there is no coordinator
               if joinList[0]['mac'] == 0:
                  #if this is the coordinator
                  if str(event.data['xA'][::-1].hex()) == str(event.data['XAddr'][::-1].hex()):
                     self.OnSendSJoinAccept(id)
                     text += "SEND SJOIN ACCEPT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     self.addCoordToList(event)
                     root = pageNetMon.tree_ctrl.AddRoot(str(event.data['XAddr'][::-1].hex()))
                     pageNetMon.tree_ctrl.SelectItem(root, True)
                     statusbarframe.SetStatusText('0'+" nodes connected to "+str(event.data['xA'][::-1].hex())+", NOT IN COMMISSOIN LIST!")
                  else:
                     self.OnSendSJoinReject(id)
                     text += "SEND SJOIN REJECT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     if str(event.data['XAddr'][::-1].hex()) not in rogueList:
                        rogueList.append(str(event.data['XAddr'][::-1].hex()))
                        pageNetMon.tc_rogue_list.Clear()
                        for eachrogue in rogueList:
                           pageNetMon.tc_rogue_list.AppendText(eachrogue + "\r\n")
               else:
                  self.OnSendSJoinReject(id)
                  text += "SEND SJOIN REJECT"
                  self.UpdatePageTerminal("\r\n")
                  self.UpdatePageTerminal(text)
                  self.UpdatePageTerminal("\r\n")
                  if str(event.data['XAddr'][::-1].hex()) not in rogueList:
                     rogueList.append(str(event.data['XAddr'][::-1].hex()))
                     pageNetMon.tc_rogue_list.Clear()
                     for eachrogue in rogueList:
                        pageNetMon.tc_rogue_list.AppendText(eachrogue + "\r\n")
               pageNetMon.tc_commish_list.Clear()
               pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
               for eachComm in commishList:
                  if eachComm != '':
                     pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
               pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))

         else: #openJoin
            if str(event.data['XAddr'][::-1].hex()) not in commishList:
               commishList.append(str(event.data['XAddr'][::-1].hex()))
               if joinList[0]['mac'] == 0:
                  if str(event.data['xA'][::-1].hex()) == str(event.data['XAddr'][::-1].hex()):
                     self.OnSendSJoinAccept(id)
                     text += "SEND SJOIN ACCEPT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     self.addCoordToList(event)
                     root = pageNetMon.tree_ctrl.AddRoot(str(event.data['XAddr'][::-1].hex()))
                     pageNetMon.tree_ctrl.SelectItem(root, True)
                     statusbarframe.SetStatusText('0'+" nodes connected to "+joinList[0]['mac'])
                  else:
                     self.OnSendSJoinReject(id)
                     text += "SEND SJOIN REJECT"
                     self.UpdatePageTerminal("\r\n")
                     self.UpdatePageTerminal(text)
                     self.UpdatePageTerminal("\r\n")
                     if str(event.data['XAddr'][::-1].hex()) not in rogueList:
                        rogueList.append(str(event.data['XAddr'][::-1].hex()))
                        pageNetMon.tc_rogue_list.Clear()
                        for eachrogue in rogueList:
                           pageNetMon.tc_rogue_list.AppendText(eachrogue + "\r\n")

               else:
                  self.OnSendSJoinAccept(id)
                  text += "SEND SJOIN ACCEPT"
                  self.UpdatePageTerminal("\r\n")
                  self.UpdatePageTerminal(text)
                  self.UpdatePageTerminal("\r\n")
                  sdeviceInList = next((item for item in joinList if item["mac"]==str(event.data['XAddr'][::-1].hex())),None)
                  self.addMacToList(event)  #Adds XAddr to list
                  if sdeviceInList == None:
                     oldroot = pageNetMon.tree_ctrl.GetRootItem()
                     item = pageNetMon.tree_ctrl.AppendItem(oldroot, str(event.data['XAddr'][::-1].hex()))
                     statusbarframe.SetStatusText(str(len(joinList)-1)+" nodes connected to "+joinList[0]['mac'])
                     if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                        pageNetMon.tree_ctrl.Expand(oldroot)
                  else:
                     theroot = pageNetMon.tree_ctrl.GetRootItem()
                     theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
                     while theitem.IsOk():
                        if pageNetMon.tree_ctrl.GetItemText(theitem) == sdeviceInList["mac"]:
                           pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.WHITE)
                           break
                        theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)
               pageNetMon.tc_commish_list.Clear()
               for eachComm in commishList:
                  if eachComm != '':
                     pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")

      elif id == 'Query_Next_Package_REQ':
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
         self.OnSendQNPResponse(event)
         text = "SEND QNP Response"
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")

         ManID_holder = str(event.data['MANID'][::-1].hex())
         control_holder = str(event.data['CONTROL'].hex())
         pkgtype_temp = str(event.data['PKGTYPE'].hex())
         pkgtype_holder = pkgtype_temp[2]+pkgtype_temp[3]+pkgtype_temp[0]+pkgtype_temp[1]
         tempstr = str(event.data['FILEVER'].hex())
         fileverstr = tempstr[6]+tempstr[7]+tempstr[4]+tempstr[5]+tempstr[2]+tempstr[3]+tempstr[0]+tempstr[1]
         filever_holder = fileverstr #str(event.data['FILEVER'].hex())
         self.updateDictInList(event)
         xtreeItem = pageNetMon.tree_ctrl.GetSelection()
         if xtreeItem.IsOk():
            xtreeItemText = pageNetMon.tree_ctrl.GetItemText(xtreeItem)
            if xtreeItemText == str(event.data['xA'][::-1].hex()):
               self.UpdateStatusDisplay(event)

      elif id == 'Package_Block_REQ':
         """
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
         """
         ManID_holder = str(event.data['MANID'][::-1].hex())
         control_holder = str(event.data['CONTROL'].hex())
         pkgtype_holder = str(event.data['PKGTYPE'].hex())
         tempstr = str(event.data['FILEVER'].hex())
         fileverstr = tempstr[6]+tempstr[7]+tempstr[4]+tempstr[5]+tempstr[2]+tempstr[3]+tempstr[0]+tempstr[1]
         filever_holder = fileverstr #str(event.data['FILEVER'].hex())
         self.updateDictInList(event)
         xtreeItem = pageNetMon.tree_ctrl.GetSelection()
         if xtreeItem.IsOk():
            xtreeItemText = pageNetMon.tree_ctrl.GetItemText(xtreeItem)
            if xtreeItemText == str(event.data['xA'][::-1].hex()):
               self.UpdateStatusDisplay(event)
      elif id == 'Package_End_REQ':
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
         ManID_holder = str(event.data['MANID'][::-1].hex())
         control_holder = str(event.data['CONTROL'].hex())
         pkgtype_holder = str(event.data['PKGTYPE'].hex())
         tempstr = str(event.data['FILEVER'].hex())
         fileverstr = tempstr[6]+tempstr[7]+tempstr[4]+tempstr[5]+tempstr[2]+tempstr[3]+tempstr[0]+tempstr[1]
         filever_holder = fileverstr #str(event.data['FILEVER'].hex())
         self.updateDictInList(event)
         xtreeItem = pageNetMon.tree_ctrl.GetSelection()
         if xtreeItem.IsOk():
            xtreeItemText = pageNetMon.tree_ctrl.GetItemText(xtreeItem)
            if xtreeItemText == str(event.data['xA'][::-1].hex()):
               self.UpdateStatusDisplay(event)
      elif id == 'TIME_REQ':
         self.OnSendTimeResponse(id)
         text = "SEND TIME_REQ Response"
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")
      elif id == 'SDP':
         self.UpdatePageTerminal("\r\n")
         s = str(datetime.now())
         self.UpdatePageTerminal(s)
         self.UpdatePageTerminal("----")
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("----")
         self.UpdatePageTerminal(str(int(event.data['transID'].hex(), 16)))
         self.UpdatePageTerminal("----   ")
         self.UpdatePageTerminal(str("%1.1f" % (3.45*int(event.data['battery'][::-1].hex(), 16)/2047)))
         self.UpdatePageTerminal(" Volt")
         self.UpdatePageTerminal("---    ")
         self.UpdatePageTerminal(str(int(event.data['rssi'].hex(), 16) - 255))
         self.UpdatePageTerminal(" db")
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")

         if not openJoin:
            if str(event.data['xA'][::-1].hex()) in commishList:
               if int(event.data['controlBit'].hex(), 16 ) & 0x01:
                  self.OnSendCriticalAck(event)
               sdeviceInList = next((item for item in joinList if item["mac"]==str(event.data['xA'][::-1].hex())),None)
               self.addDictToList(event)  #Adds or updates xA to list
               if sdeviceInList == None:
                  oldroot = pageNetMon.tree_ctrl.GetRootItem()
                  item = pageNetMon.tree_ctrl.AppendItem(oldroot, str(event.data['xA'][::-1].hex()))
                  if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                     pageNetMon.tree_ctrl.Expand(oldroot)
               else:
                  theroot = pageNetMon.tree_ctrl.GetRootItem()
                  if pageNetMon.tree_ctrl.GetItemText(theroot) == sdeviceInList["mac"]:
                     pageNetMon.tree_ctrl.SetItemBackgroundColour(theroot, wx.WHITE)
                  else:
                     theitem, cookie = pageNetMon.tree_ctrl.GetFirstChild(theroot)
                     while theitem.IsOk():
                        if pageNetMon.tree_ctrl.GetItemText(theitem) == sdeviceInList["mac"]:
                           pageNetMon.tree_ctrl.SetItemBackgroundColour(theitem, wx.WHITE)
                           break
                        theitem, cookie = pageNetMon.tree_ctrl.GetNextChild(theroot, cookie)
               statusbarframe.SetStatusText(str(len(joinList)-1)+" nodes connected to "+joinList[0]['mac'])
               pageNetMon.tc_commish_list.Clear()
               pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
               for eachComm in commishList:
                  if eachComm != '':
                     pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
               pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
            else:
               theroot = pageNetMon.tree_ctrl.GetRootItem()
               if pageNetMon.tree_ctrl.GetItemText(theroot) == str(event.data['xA'][::-1].hex()):
                  pageNetMon.tree_ctrl.SetItemBackgroundColour(theroot, wx.WHITE)
                  commishList.append(str(event.data['xA'][::-1].hex()))
                  pageNetMon.tc_commish_list.Clear()
                  pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.RED))
                  for eachComm in commishList:
                     if eachComm != '':
                        pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
                  pageNetMon.tc_commish_list.SetDefaultStyle(wx.TextAttr(wx.BLACK))
                  sdeviceInList = next((item for item in joinList if item["mac"]==str(event.data['xA'][::-1].hex())),None)
                  self.addDictToList(event)  #Adds or updates xA to list
               else:
                  if str(event.data['xA'][::-1].hex()) not in orphanList:
                     orphanList.append(str(event.data['xA'][::-1].hex()))
                     pageNetMon.tc_orphan_list.Clear()
                     for eachOrph in orphanList:
                        pageNetMon.tc_orphan_list.AppendText(eachOrph + "\r\n")
         else:  #open join
            if int(event.data['controlBit'].hex(), 16 ) & 0x01:
               self.OnSendCriticalAck(event)
            #if len(commishList) == 0:
            if joinList[0]['mac'] == 0:
               if int(event.data['Device_type'].hex(), 16) == 0:   #Coordinator
                  self.addCoordToList(event)
                  #oldroot = pageNetMon.tree_ctrl.GetRootItem()
                  #if not oldroot.IsOk():
                  root = pageNetMon.tree_ctrl.AddRoot(str(event.data['xA'][::-1].hex()))
                  pageNetMon.tree_ctrl.SelectItem(root, True)
                  statusbarframe.SetStatusText('0'+" nodes connected to "+joinList[0]['mac'])
                  if str(event.data['xA'][::-1].hex()) not in commishList:
                     commishList.append(str(event.data['xA'][::-1].hex()))
               elif str(event.data['xA'][::-1].hex()) not in orphanList:
                  orphanList.append(str(event.data['xA'][::-1].hex()))
                  pageNetMon.tc_orphan_list.Clear()
                  for eachOrph in orphanList:
                     pageNetMon.tc_orphan_list.AppendText(eachOrph + "\r\n")
            else:
               if str(event.data['xA'][::-1].hex()) not in commishList:
                  commishList.append(str(event.data['xA'][::-1].hex()))
                  sdeviceInList = next((item for item in joinList if item["mac"]==str(event.data['xA'][::-1].hex())),None)
                  self.addDictToList(event)  #Adds or updates xA to list
                  if sdeviceInList == None:
                     oldroot = pageNetMon.tree_ctrl.GetRootItem()
                     if oldroot.IsOk():
                        item = pageNetMon.tree_ctrl.AppendItem(oldroot, str(event.data['xA'][::-1].hex()))
                        if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                           pageNetMon.tree_ctrl.Expand(oldroot)
                     statusbarframe.SetStatusText(str(len(joinList)-1)+" nodes connected to "+joinList[0]['mac'])
                  pageNetMon.tc_commish_list.Clear()
                  for eachComm in commishList:
                     if eachComm != '':
                        pageNetMon.tc_commish_list.AppendText(eachComm + "\r\n")
               else:
                  sdeviceInList = next((item for item in joinList if item["mac"]==str(event.data['xA'][::-1].hex())),None)
                  self.addDictToList(event)  #Adds or updates xA to list
                  if sdeviceInList == None:
                     oldroot = pageNetMon.tree_ctrl.GetRootItem()
                     item = pageNetMon.tree_ctrl.AppendItem(oldroot, str(event.data['xA'][::-1].hex()))
                     statusbarframe.SetStatusText(str(len(joinList)-1)+" nodes connected to "+joinList[0]['mac'])
                     if not pageNetMon.tree_ctrl.IsExpanded(oldroot):
                        pageNetMon.tree_ctrl.Expand(oldroot)

         xtreeItem = pageNetMon.tree_ctrl.GetSelection()
         if xtreeItem.IsOk():
            xtreeItemText = pageNetMon.tree_ctrl.GetItemText(xtreeItem)
            if xtreeItemText == str(event.data['xA'][::-1].hex()):
               self.UpdateStatusDisplay(event)

      elif id == 'NDP':
         s = str(datetime.now())

         self.UpdatePageTerminal(s)
         self.UpdatePageTerminal("----")
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("----")
         self.UpdatePageTerminal(str(int(event.data['transID'].hex(), 16)))
         self.UpdatePageTerminal("----   ")
         self.UpdatePageTerminal(str(int(event.data['rssi'].hex(), 16) - 255))
         self.UpdatePageTerminal(" db")
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")

         #----------------------------------------
         ndp_deviceType = event.data['deviceType']
         ndp_deviceType = str(ndp_deviceType.encode('hex'))

         ndp_deviceUptime = event.data['deviceUpTime']
         ndp_deviceUptime = str(ndp_deviceUptime[::-1].encode('hex'))

         ndp_deviceIEEEAddr = event.data['ieee_address']
         ndp_deviceIEEEAddr = str(ndp_deviceIEEEAddr[::-1].encode('hex'))

         ndp_packetLoss = event.data['packetLoss']
         ndp_packetLoss = str(ndp_packetLoss[::-1].encode('hex'))

         ndp_retryCounter = event.data['retryCount']
         ndp_retryCounter = str(ndp_retryCounter[::-1].encode('hex'))

         ndp_shortAddress = event.data['sA']
         ndp_shortAddress = str(ndp_shortAddress[::-1].encode('hex'))

         ndp_workingMemory = event.data['workingMemory']
         ndp_workingMemory = str(ndp_workingMemory[::-1].encode('hex'))

         ndp_parentIEEEaddr = event.data['parent_ieee_address']
         ndp_parentIEEEaddr = str(ndp_parentIEEEaddr[::-1].encode('hex'))

         ndp_deviceRssi = str(int(event.data['rssi'].hex(), 16) - 255)


         #build the new information into a JSON!
         addNewNodeInformation(ndp_deviceType, ndp_deviceUptime, ndp_deviceIEEEAddr, ndp_packetLoss, ndp_retryCounter, ndp_shortAddress, ndp_workingMemory, ndp_parentIEEEaddr,ndp_deviceRssi)

         fileCounter = (fileCounter+1) & 0x07
         jsonOUT = open(str(fileCounter)+'network.json','w')
         jsonOUT.write(json.dumps(networkJson, sort_keys=True, indent=2))
         jsonOUT.close()
      else:
         self.UpdatePageTerminal(id)
         self.UpdatePageTerminal("\r\n")
         self.UpdatePageTerminal(text)
         self.UpdatePageTerminal("\r\n")

   def ComPortArgusThread(self):
      # thread that will handle the serial traffic using xbee intrepreter.
      while self.alive.isSet():
         try:
            print("start XBee interpreter")
            text = self.Argus.wait_read_frame()
            print(text)
         except KeyboardInterrupt:
            break
         event = SerialRxEvent(self.GetId(), text)
         self.GetEventHandler().AddPendingEvent(event)

   def ComPortThread(self):
      """Thread that handles the incomming traffic. Does the basic input
         transformation (newlines) and generates a SerialRxEvent"""
      while self.alive.isSet():               #loop while alive event is true
         text = self.serial.read(1)          #read one, with timout
         if text:                            #check if not timeout
            n = self.serial.inWaiting()     #look if there is more to read
            if n:
               text = text + self.serial.read(n) #get it
            #newline transformation
            if self.settings.newline == NEWLINE_CR:
               text = text.replace('\r', '\n')
            elif self.settings.newline == NEWLINE_LF:
               pass
            elif self.settings.newline == NEWLINE_CRLF:
               text = text.replace('\r\n', '\n')
            event = SerialRxEvent(self.GetId(), text)
            self.GetEventHandler().AddPendingEvent(event)
            #~ self.OnSerialRead(text)         #output text in window

   def OnHelp(self, event):
      """Menu point Help menu. Show the help dialog"""
      message = "Version Information:\n\nseWSNView.py      : 0.0.0.14\nCompany Name   : Schneider Electric\nComments            : Engineering Release\nLegal Copyright    : Copyright (C) 2014"
      dialog = wx.MessageDialog(self, message, caption="Help About", style = wx.OK, pos=wx.DefaultPosition)
      result = dialog.ShowModal()
      dialog.Destroy()

# end of class seWSNViewLayout

class MyApp(wx.App):
    frame_seWSNView = None
    def OnInit(self):
        #wx.InitAllImageHandlers()
        global frame_seWSNView
        global outfile
        s = str(datetime.now())
        outfilename = 'D'+s[:4]+'_'+s[5:7]+'_'+s[8:10]+'T'+s[11:13]+'_'+s[14:16]+'_'+s[17:19]+'.log'
        saveout = sys.stdout
        outfile = open('raw'+outfilename, 'w')
        #outfile = open('stdout.log', 'w')
        sys.stdout = outfile
        #errfile = open('err'+outfilename, 'w')
        #sys.stderr = errfile
        frame_seWSNView = seWSNViewLayout(None, -1, "")
        self.SetTopWindow(frame_seWSNView)
        frame_seWSNView.Show(1)
        return 1

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
